{"mappings":"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","sources":["<anon>","Documents/Proyectos/javascript/ThreeJS/tutorial/birthdayGift/resource/GLTFLoader.js"],"sourcesContent":["/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */ THREE.GLTFLoader = function() {\n    function GLTFLoader(manager) {\n        THREE.Loader.call(this, manager);\n        this.dracoLoader = null;\n        this.ddsLoader = null;\n    }\n    GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n        constructor: GLTFLoader,\n        load: function(url, onLoad, onProgress, onError) {\n            var scope = this;\n            var resourcePath;\n            if (this.resourcePath !== '') resourcePath = this.resourcePath;\n            else if (this.path !== '') resourcePath = this.path;\n            else resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n            // Tells the LoadingManager to track an extra item, which resolves after\n            // the model is fully loaded. This means the count of items loaded will\n            // be incorrect, but ensures manager.onLoad() does not fire early.\n            scope.manager.itemStart(url);\n            var _onError = function(e) {\n                if (onError) onError(e);\n                else console.error(e);\n                scope.manager.itemError(url);\n                scope.manager.itemEnd(url);\n            };\n            var loader = new THREE.FileLoader(scope.manager);\n            loader.setPath(this.path);\n            loader.setResponseType('arraybuffer');\n            if (scope.crossOrigin === 'use-credentials') loader.setWithCredentials(true);\n            loader.load(url, function(data) {\n                try {\n                    scope.parse(data, resourcePath, function(gltf) {\n                        onLoad(gltf);\n                        scope.manager.itemEnd(url);\n                    }, _onError);\n                } catch (e) {\n                    _onError(e);\n                }\n            }, onProgress, _onError);\n        },\n        setDRACOLoader: function(dracoLoader) {\n            this.dracoLoader = dracoLoader;\n            return this;\n        },\n        setDDSLoader: function(ddsLoader) {\n            this.ddsLoader = ddsLoader;\n            return this;\n        },\n        parse: function(data, path, onLoad, onError) {\n            var content;\n            var extensions = {};\n            if (typeof data === 'string') content = data;\n            else {\n                var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n                if (magic === BINARY_EXTENSION_HEADER_MAGIC) {\n                    try {\n                        extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);\n                    } catch (error) {\n                        if (onError) onError(error);\n                        return;\n                    }\n                    content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n                } else content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n            }\n            var json = JSON.parse(content);\n            if (json.asset === undefined || json.asset.version[0] < 2) {\n                if (onError) onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));\n                return;\n            }\n            if (json.extensionsUsed) for(var i = 0; i < json.extensionsUsed.length; ++i){\n                var extensionName = json.extensionsUsed[i];\n                var extensionsRequired = json.extensionsRequired || [];\n                switch(extensionName){\n                    case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n                        extensions[extensionName] = new GLTFLightsExtension(json);\n                        break;\n                    case EXTENSIONS.KHR_MATERIALS_CLEARCOAT:\n                        extensions[extensionName] = new GLTFMaterialsClearcoatExtension();\n                        break;\n                    case EXTENSIONS.KHR_MATERIALS_UNLIT:\n                        extensions[extensionName] = new GLTFMaterialsUnlitExtension();\n                        break;\n                    case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n                        extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n                        break;\n                    case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n                        extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);\n                        break;\n                    case EXTENSIONS.MSFT_TEXTURE_DDS:\n                        extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);\n                        break;\n                    case EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n                        extensions[extensionName] = new GLTFTextureTransformExtension();\n                        break;\n                    case EXTENSIONS.KHR_MESH_QUANTIZATION:\n                        extensions[extensionName] = new GLTFMeshQuantizationExtension();\n                        break;\n                    default:\n                        if (extensionsRequired.indexOf(extensionName) >= 0) console.warn('THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".');\n                }\n            }\n            var parser = new GLTFParser(json, extensions, {\n                path: path || this.resourcePath || '',\n                crossOrigin: this.crossOrigin,\n                manager: this.manager\n            });\n            parser.parse(onLoad, onError);\n        }\n    });\n    /* GLTFREGISTRY */ function GLTFRegistry() {\n        var objects = {};\n        return {\n            get: function(key) {\n                return objects[key];\n            },\n            add: function(key, object) {\n                objects[key] = object;\n            },\n            remove: function(key) {\n                delete objects[key];\n            },\n            removeAll: function() {\n                objects = {};\n            }\n        };\n    }\n    /*********************************/ /********** EXTENSIONS ***********/ /*********************************/ var EXTENSIONS = {\n        KHR_BINARY_GLTF: 'KHR_binary_glTF',\n        KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n        KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n        KHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n        KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n        KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n        KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n        KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n        MSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n    };\n    /**\n\t * DDS Texture Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n\t *\n\t */ function GLTFTextureDDSExtension(ddsLoader) {\n        if (!ddsLoader) throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader');\n        this.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n        this.ddsLoader = ddsLoader;\n    }\n    /**\n\t * Punctual Lights Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\t */ function GLTFLightsExtension(json) {\n        this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n        var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};\n        this.lightDefs = extension.lights || [];\n    }\n    GLTFLightsExtension.prototype.loadLight = function(lightIndex) {\n        var lightDef = this.lightDefs[lightIndex];\n        var lightNode;\n        var color = new THREE.Color(0xffffff);\n        if (lightDef.color !== undefined) color.fromArray(lightDef.color);\n        var range = lightDef.range !== undefined ? lightDef.range : 0;\n        switch(lightDef.type){\n            case 'directional':\n                lightNode = new THREE.DirectionalLight(color);\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            case 'point':\n                lightNode = new THREE.PointLight(color);\n                lightNode.distance = range;\n                break;\n            case 'spot':\n                lightNode = new THREE.SpotLight(color);\n                lightNode.distance = range;\n                // Handle spotlight properties.\n                lightDef.spot = lightDef.spot || {};\n                lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n                lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n                lightNode.angle = lightDef.spot.outerConeAngle;\n                lightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n                lightNode.target.position.set(0, 0, -1);\n                lightNode.add(lightNode.target);\n                break;\n            default:\n                throw new Error('THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".');\n        }\n        // Some lights (e.g. spot) default to a position other than the origin. Reset the position\n        // here, because node-level parsing will only override position if explicitly specified.\n        lightNode.position.set(0, 0, 0);\n        lightNode.decay = 2;\n        if (lightDef.intensity !== undefined) lightNode.intensity = lightDef.intensity;\n        lightNode.name = lightDef.name || 'light_' + lightIndex;\n        return Promise.resolve(lightNode);\n    };\n    /**\n\t * Unlit Materials Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\t */ function GLTFMaterialsUnlitExtension() {\n        this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n    }\n    GLTFMaterialsUnlitExtension.prototype.getMaterialType = function() {\n        return THREE.MeshBasicMaterial;\n    };\n    GLTFMaterialsUnlitExtension.prototype.extendParams = function(materialParams, materialDef, parser) {\n        var pending = [];\n        materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n        materialParams.opacity = 1.0;\n        var metallicRoughness = materialDef.pbrMetallicRoughness;\n        if (metallicRoughness) {\n            if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                var array = metallicRoughness.baseColorFactor;\n                materialParams.color.fromArray(array);\n                materialParams.opacity = array[3];\n            }\n            if (metallicRoughness.baseColorTexture !== undefined) pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n        }\n        return Promise.all(pending);\n    };\n    /**\n\t * Clearcoat Materials Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat\n\t */ function GLTFMaterialsClearcoatExtension() {\n        this.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n    }\n    GLTFMaterialsClearcoatExtension.prototype.getMaterialType = function() {\n        return THREE.MeshPhysicalMaterial;\n    };\n    GLTFMaterialsClearcoatExtension.prototype.extendParams = function(materialParams, materialDef, parser) {\n        var pending = [];\n        var extension = materialDef.extensions[this.name];\n        if (extension.clearcoatFactor !== undefined) materialParams.clearcoat = extension.clearcoatFactor;\n        if (extension.clearcoatTexture !== undefined) pending.push(parser.assignTexture(materialParams, 'clearcoatMap', extension.clearcoatTexture));\n        if (extension.clearcoatRoughnessFactor !== undefined) materialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n        if (extension.clearcoatRoughnessTexture !== undefined) pending.push(parser.assignTexture(materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture));\n        if (extension.clearcoatNormalTexture !== undefined) {\n            pending.push(parser.assignTexture(materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture));\n            if (extension.clearcoatNormalTexture.scale !== undefined) {\n                var scale = extension.clearcoatNormalTexture.scale;\n                materialParams.clearcoatNormalScale = new THREE.Vector2(scale, scale);\n            }\n        }\n        return Promise.all(pending);\n    };\n    /* BINARY EXTENSION */ var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n    var BINARY_EXTENSION_HEADER_LENGTH = 12;\n    var BINARY_EXTENSION_CHUNK_TYPES = {\n        JSON: 0x4E4F534A,\n        BIN: 0x004E4942\n    };\n    function GLTFBinaryExtension(data) {\n        this.name = EXTENSIONS.KHR_BINARY_GLTF;\n        this.content = null;\n        this.body = null;\n        var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n        this.header = {\n            magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n            version: headerView.getUint32(4, true),\n            length: headerView.getUint32(8, true)\n        };\n        if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');\n        else if (this.header.version < 2.0) throw new Error('THREE.GLTFLoader: Legacy binary file detected.');\n        var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);\n        var chunkIndex = 0;\n        while(chunkIndex < chunkView.byteLength){\n            var chunkLength = chunkView.getUint32(chunkIndex, true);\n            chunkIndex += 4;\n            var chunkType = chunkView.getUint32(chunkIndex, true);\n            chunkIndex += 4;\n            if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {\n                var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);\n                this.content = THREE.LoaderUtils.decodeText(contentArray);\n            } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {\n                var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n                this.body = data.slice(byteOffset, byteOffset + chunkLength);\n            }\n            // Clients must ignore chunks with unknown types.\n            chunkIndex += chunkLength;\n        }\n        if (this.content === null) throw new Error('THREE.GLTFLoader: JSON content not found.');\n    }\n    /**\n\t * DRACO Mesh Compression Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n\t */ function GLTFDracoMeshCompressionExtension(json, dracoLoader) {\n        if (!dracoLoader) throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');\n        this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n        this.json = json;\n        this.dracoLoader = dracoLoader;\n        this.dracoLoader.preload();\n    }\n    GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function(primitive, parser) {\n        var json = this.json;\n        var dracoLoader = this.dracoLoader;\n        var bufferViewIndex = primitive.extensions[this.name].bufferView;\n        var gltfAttributeMap = primitive.extensions[this.name].attributes;\n        var threeAttributeMap = {};\n        var attributeNormalizedMap = {};\n        var attributeTypeMap = {};\n        for(var attributeName in gltfAttributeMap){\n            var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n            threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];\n        }\n        for(attributeName in primitive.attributes){\n            var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n            if (gltfAttributeMap[attributeName] !== undefined) {\n                var accessorDef = json.accessors[primitive.attributes[attributeName]];\n                var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n                attributeTypeMap[threeAttributeName] = componentType;\n                attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;\n            }\n        }\n        return parser.getDependency('bufferView', bufferViewIndex).then(function(bufferView) {\n            return new Promise(function(resolve) {\n                dracoLoader.decodeDracoFile(bufferView, function(geometry) {\n                    for(var attributeName in geometry.attributes){\n                        var attribute = geometry.attributes[attributeName];\n                        var normalized = attributeNormalizedMap[attributeName];\n                        if (normalized !== undefined) attribute.normalized = normalized;\n                    }\n                    resolve(geometry);\n                }, threeAttributeMap, attributeTypeMap);\n            });\n        });\n    };\n    /**\n\t * Texture Transform Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n\t */ function GLTFTextureTransformExtension() {\n        this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n    }\n    GLTFTextureTransformExtension.prototype.extendTexture = function(texture, transform) {\n        texture = texture.clone();\n        if (transform.offset !== undefined) texture.offset.fromArray(transform.offset);\n        if (transform.rotation !== undefined) texture.rotation = transform.rotation;\n        if (transform.scale !== undefined) texture.repeat.fromArray(transform.scale);\n        if (transform.texCoord !== undefined) console.warn('THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.');\n        texture.needsUpdate = true;\n        return texture;\n    };\n    /**\n\t * Specular-Glossiness Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n\t */ /**\n\t * A sub class of THREE.StandardMaterial with some of the functionality\n\t * changed via the `onBeforeCompile` callback\n\t * @pailhead\n\t */ function GLTFMeshStandardSGMaterial(params) {\n        THREE.MeshStandardMaterial.call(this);\n        this.isGLTFSpecularGlossinessMaterial = true;\n        //various chunks that need replacing\n        var specularMapParsFragmentChunk = [\n            '#ifdef USE_SPECULARMAP',\n            '\tuniform sampler2D specularMap;',\n            '#endif'\n        ].join('\\n');\n        var glossinessMapParsFragmentChunk = [\n            '#ifdef USE_GLOSSINESSMAP',\n            '\tuniform sampler2D glossinessMap;',\n            '#endif'\n        ].join('\\n');\n        var specularMapFragmentChunk = [\n            'vec3 specularFactor = specular;',\n            '#ifdef USE_SPECULARMAP',\n            '\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n            '\ttexelSpecular = sRGBToLinear( texelSpecular );',\n            '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n            '\tspecularFactor *= texelSpecular.rgb;',\n            '#endif'\n        ].join('\\n');\n        var glossinessMapFragmentChunk = [\n            'float glossinessFactor = glossiness;',\n            '#ifdef USE_GLOSSINESSMAP',\n            '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n            '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n            '\tglossinessFactor *= texelGlossiness.a;',\n            '#endif'\n        ].join('\\n');\n        var lightPhysicalFragmentChunk = [\n            'PhysicalMaterial material;',\n            'material.diffuseColor = diffuseColor.rgb;',\n            'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\n            'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\n            'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',\n            'material.specularRoughness += geometryRoughness;',\n            'material.specularRoughness = min( material.specularRoughness, 1.0 );',\n            'material.specularColor = specularFactor.rgb;'\n        ].join('\\n');\n        var uniforms = {\n            specular: {\n                value: new THREE.Color().setHex(0xffffff)\n            },\n            glossiness: {\n                value: 1\n            },\n            specularMap: {\n                value: null\n            },\n            glossinessMap: {\n                value: null\n            }\n        };\n        this._extraUniforms = uniforms;\n        // please see #14031 or #13198 for an alternate approach\n        this.onBeforeCompile = function(shader) {\n            for(var uniformName in uniforms)shader.uniforms[uniformName] = uniforms[uniformName];\n            shader.fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;');\n            shader.fragmentShader = shader.fragmentShader.replace('uniform float metalness;', 'uniform float glossiness;');\n            shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk);\n            shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk);\n            shader.fragmentShader = shader.fragmentShader.replace('#include <roughnessmap_fragment>', specularMapFragmentChunk);\n            shader.fragmentShader = shader.fragmentShader.replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk);\n            shader.fragmentShader = shader.fragmentShader.replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\n        };\n        /*eslint-disable*/ Object.defineProperties(this, {\n            specular: {\n                get: function() {\n                    return uniforms.specular.value;\n                },\n                set: function(v) {\n                    uniforms.specular.value = v;\n                }\n            },\n            specularMap: {\n                get: function() {\n                    return uniforms.specularMap.value;\n                },\n                set: function(v) {\n                    uniforms.specularMap.value = v;\n                }\n            },\n            glossiness: {\n                get: function() {\n                    return uniforms.glossiness.value;\n                },\n                set: function(v) {\n                    uniforms.glossiness.value = v;\n                }\n            },\n            glossinessMap: {\n                get: function() {\n                    return uniforms.glossinessMap.value;\n                },\n                set: function(v) {\n                    uniforms.glossinessMap.value = v;\n                    //how about something like this - @pailhead\n                    if (v) {\n                        this.defines.USE_GLOSSINESSMAP = '';\n                        // set USE_ROUGHNESSMAP to enable vUv\n                        this.defines.USE_ROUGHNESSMAP = '';\n                    } else {\n                        delete this.defines.USE_ROUGHNESSMAP;\n                        delete this.defines.USE_GLOSSINESSMAP;\n                    }\n                }\n            }\n        });\n        /*eslint-enable*/ delete this.metalness;\n        delete this.roughness;\n        delete this.metalnessMap;\n        delete this.roughnessMap;\n        this.setValues(params);\n    }\n    GLTFMeshStandardSGMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);\n    GLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;\n    GLTFMeshStandardSGMaterial.prototype.copy = function(source) {\n        THREE.MeshStandardMaterial.prototype.copy.call(this, source);\n        this.specularMap = source.specularMap;\n        this.specular.copy(source.specular);\n        this.glossinessMap = source.glossinessMap;\n        this.glossiness = source.glossiness;\n        delete this.metalness;\n        delete this.roughness;\n        delete this.metalnessMap;\n        delete this.roughnessMap;\n        return this;\n    };\n    function GLTFMaterialsPbrSpecularGlossinessExtension() {\n        return {\n            name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n            specularGlossinessParams: [\n                'color',\n                'map',\n                'lightMap',\n                'lightMapIntensity',\n                'aoMap',\n                'aoMapIntensity',\n                'emissive',\n                'emissiveIntensity',\n                'emissiveMap',\n                'bumpMap',\n                'bumpScale',\n                'normalMap',\n                'normalMapType',\n                'displacementMap',\n                'displacementScale',\n                'displacementBias',\n                'specularMap',\n                'specular',\n                'glossinessMap',\n                'glossiness',\n                'alphaMap',\n                'envMap',\n                'envMapIntensity',\n                'refractionRatio'\n            ],\n            getMaterialType: function() {\n                return GLTFMeshStandardSGMaterial;\n            },\n            extendParams: function(materialParams, materialDef, parser) {\n                var pbrSpecularGlossiness = materialDef.extensions[this.name];\n                materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n                materialParams.opacity = 1.0;\n                var pending = [];\n                if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {\n                    var array = pbrSpecularGlossiness.diffuseFactor;\n                    materialParams.color.fromArray(array);\n                    materialParams.opacity = array[3];\n                }\n                if (pbrSpecularGlossiness.diffuseTexture !== undefined) pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));\n                materialParams.emissive = new THREE.Color(0.0, 0.0, 0.0);\n                materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n                materialParams.specular = new THREE.Color(1.0, 1.0, 1.0);\n                if (Array.isArray(pbrSpecularGlossiness.specularFactor)) materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);\n                if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\n                    var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n                    pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));\n                    pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));\n                }\n                return Promise.all(pending);\n            },\n            createMaterial: function(materialParams) {\n                var material = new GLTFMeshStandardSGMaterial(materialParams);\n                material.fog = true;\n                material.color = materialParams.color;\n                material.map = materialParams.map === undefined ? null : materialParams.map;\n                material.lightMap = null;\n                material.lightMapIntensity = 1.0;\n                material.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;\n                material.aoMapIntensity = 1.0;\n                material.emissive = materialParams.emissive;\n                material.emissiveIntensity = 1.0;\n                material.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;\n                material.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;\n                material.bumpScale = 1;\n                material.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;\n                material.normalMapType = THREE.TangentSpaceNormalMap;\n                if (materialParams.normalScale) material.normalScale = materialParams.normalScale;\n                material.displacementMap = null;\n                material.displacementScale = 1;\n                material.displacementBias = 0;\n                material.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;\n                material.specular = materialParams.specular;\n                material.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;\n                material.glossiness = materialParams.glossiness;\n                material.alphaMap = null;\n                material.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;\n                material.envMapIntensity = 1.0;\n                material.refractionRatio = 0.98;\n                return material;\n            }\n        };\n    }\n    /**\n\t * Mesh Quantization Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n\t */ function GLTFMeshQuantizationExtension() {\n        this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n    }\n    /*********************************/ /********** INTERPOLATION ********/ /*********************************/ // Spline Interpolation\n    // Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n    function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n        THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n    }\n    GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);\n    GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n    GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function(index) {\n        // Copies a sample value to the result buffer. See description of glTF\n        // CUBICSPLINE values layout in interpolate_() function below.\n        var result = this.resultBuffer, values = this.sampleValues, valueSize = this.valueSize, offset = index * valueSize * 3 + valueSize;\n        for(var i = 0; i !== valueSize; i++)result[i] = values[offset + i];\n        return result;\n    };\n    GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n    GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n    GLTFCubicSplineInterpolant.prototype.interpolate_ = function(i1, t0, t, t1) {\n        var result = this.resultBuffer;\n        var values = this.sampleValues;\n        var stride = this.valueSize;\n        var stride2 = stride * 2;\n        var stride3 = stride * 3;\n        var td = t1 - t0;\n        var p = (t - t0) / td;\n        var pp = p * p;\n        var ppp = pp * p;\n        var offset1 = i1 * stride3;\n        var offset0 = offset1 - stride3;\n        var s2 = -2 * ppp + 3 * pp;\n        var s3 = ppp - pp;\n        var s0 = 1 - s2;\n        var s1 = s3 - pp + p;\n        // Layout of keyframe output values for CUBICSPLINE animations:\n        //   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n        for(var i = 0; i !== stride; i++){\n            var p0 = values[offset0 + i + stride]; // splineVertex_k\n            var m0 = values[offset0 + i + stride2] * td; // outTangent_k * (t_k+1 - t_k)\n            var p1 = values[offset1 + i + stride]; // splineVertex_k+1\n            var m1 = values[offset1 + i] * td; // inTangent_k+1 * (t_k+1 - t_k)\n            result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n        }\n        return result;\n    };\n    /*********************************/ /********** INTERNALS ************/ /*********************************/ /* CONSTANTS */ var WEBGL_CONSTANTS = {\n        FLOAT: 5126,\n        //FLOAT_MAT2: 35674,\n        FLOAT_MAT3: 35675,\n        FLOAT_MAT4: 35676,\n        FLOAT_VEC2: 35664,\n        FLOAT_VEC3: 35665,\n        FLOAT_VEC4: 35666,\n        LINEAR: 9729,\n        REPEAT: 10497,\n        SAMPLER_2D: 35678,\n        POINTS: 0,\n        LINES: 1,\n        LINE_LOOP: 2,\n        LINE_STRIP: 3,\n        TRIANGLES: 4,\n        TRIANGLE_STRIP: 5,\n        TRIANGLE_FAN: 6,\n        UNSIGNED_BYTE: 5121,\n        UNSIGNED_SHORT: 5123\n    };\n    var WEBGL_COMPONENT_TYPES = {\n        5120: Int8Array,\n        5121: Uint8Array,\n        5122: Int16Array,\n        5123: Uint16Array,\n        5125: Uint32Array,\n        5126: Float32Array\n    };\n    var WEBGL_FILTERS = {\n        9728: THREE.NearestFilter,\n        9729: THREE.LinearFilter,\n        9984: THREE.NearestMipmapNearestFilter,\n        9985: THREE.LinearMipmapNearestFilter,\n        9986: THREE.NearestMipmapLinearFilter,\n        9987: THREE.LinearMipmapLinearFilter\n    };\n    var WEBGL_WRAPPINGS = {\n        33071: THREE.ClampToEdgeWrapping,\n        33648: THREE.MirroredRepeatWrapping,\n        10497: THREE.RepeatWrapping\n    };\n    var WEBGL_TYPE_SIZES = {\n        'SCALAR': 1,\n        'VEC2': 2,\n        'VEC3': 3,\n        'VEC4': 4,\n        'MAT2': 4,\n        'MAT3': 9,\n        'MAT4': 16\n    };\n    var ATTRIBUTES = {\n        POSITION: 'position',\n        NORMAL: 'normal',\n        TANGENT: 'tangent',\n        TEXCOORD_0: 'uv',\n        TEXCOORD_1: 'uv2',\n        COLOR_0: 'color',\n        WEIGHTS_0: 'skinWeight',\n        JOINTS_0: 'skinIndex'\n    };\n    var PATH_PROPERTIES = {\n        scale: 'scale',\n        translation: 'position',\n        rotation: 'quaternion',\n        weights: 'morphTargetInfluences'\n    };\n    var INTERPOLATION = {\n        CUBICSPLINE: undefined,\n        // keyframe track will be initialized with a default interpolation type, then modified.\n        LINEAR: THREE.InterpolateLinear,\n        STEP: THREE.InterpolateDiscrete\n    };\n    var ALPHA_MODES = {\n        OPAQUE: 'OPAQUE',\n        MASK: 'MASK',\n        BLEND: 'BLEND'\n    };\n    var MIME_TYPE_FORMATS = {\n        'image/png': THREE.RGBAFormat,\n        'image/jpeg': THREE.RGBFormat\n    };\n    /* UTILITY FUNCTIONS */ function resolveURL(url, path) {\n        // Invalid URL\n        if (typeof url !== 'string' || url === '') return '';\n        // Host Relative URL\n        if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        // Absolute URL http://,https://,//\n        if (/^(https?:)?\\/\\//i.test(url)) return url;\n        // Data URI\n        if (/^data:.*,.*$/i.test(url)) return url;\n        // Blob URL\n        if (/^blob:.*$/i.test(url)) return url;\n        // Relative URL\n        return path + url;\n    }\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n\t */ function createDefaultMaterial(cache) {\n        if (cache['DefaultMaterial'] === undefined) cache['DefaultMaterial'] = new THREE.MeshStandardMaterial({\n            color: 0xFFFFFF,\n            emissive: 0x000000,\n            metalness: 1,\n            roughness: 1,\n            transparent: false,\n            depthTest: true,\n            side: THREE.FrontSide\n        });\n        return cache['DefaultMaterial'];\n    }\n    function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {\n        // Add unknown glTF extensions to an object's userData.\n        for(var name in objectDef.extensions)if (knownExtensions[name] === undefined) {\n            object.userData.gltfExtensions = object.userData.gltfExtensions || {};\n            object.userData.gltfExtensions[name] = objectDef.extensions[name];\n        }\n    }\n    /**\n\t * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n\t * @param {GLTF.definition} gltfDef\n\t */ function assignExtrasToUserData(object, gltfDef) {\n        if (gltfDef.extras !== undefined) {\n            if (typeof gltfDef.extras === 'object') Object.assign(object.userData, gltfDef.extras);\n            else console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);\n        }\n    }\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n\t *\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {Array<GLTF.Target>} targets\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */ function addMorphTargets(geometry, targets, parser) {\n        var hasMorphPosition = false;\n        var hasMorphNormal = false;\n        for(var i = 0, il = targets.length; i < il; i++){\n            var target = targets[i];\n            if (target.POSITION !== undefined) hasMorphPosition = true;\n            if (target.NORMAL !== undefined) hasMorphNormal = true;\n            if (hasMorphPosition && hasMorphNormal) break;\n        }\n        if (!hasMorphPosition && !hasMorphNormal) return Promise.resolve(geometry);\n        var pendingPositionAccessors = [];\n        var pendingNormalAccessors = [];\n        for(var i = 0, il = targets.length; i < il; i++){\n            var target = targets[i];\n            if (hasMorphPosition) {\n                var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;\n                pendingPositionAccessors.push(pendingAccessor);\n            }\n            if (hasMorphNormal) {\n                var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;\n                pendingNormalAccessors.push(pendingAccessor);\n            }\n        }\n        return Promise.all([\n            Promise.all(pendingPositionAccessors),\n            Promise.all(pendingNormalAccessors)\n        ]).then(function(accessors) {\n            var morphPositions = accessors[0];\n            var morphNormals = accessors[1];\n            if (hasMorphPosition) geometry.morphAttributes.position = morphPositions;\n            if (hasMorphNormal) geometry.morphAttributes.normal = morphNormals;\n            geometry.morphTargetsRelative = true;\n            return geometry;\n        });\n    }\n    /**\n\t * @param {THREE.Mesh} mesh\n\t * @param {GLTF.Mesh} meshDef\n\t */ function updateMorphTargets(mesh, meshDef) {\n        mesh.updateMorphTargets();\n        if (meshDef.weights !== undefined) for(var i = 0, il = meshDef.weights.length; i < il; i++)mesh.morphTargetInfluences[i] = meshDef.weights[i];\n        // .extras has user-defined data, so check that .extras.targetNames is an array.\n        if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {\n            var targetNames = meshDef.extras.targetNames;\n            if (mesh.morphTargetInfluences.length === targetNames.length) {\n                mesh.morphTargetDictionary = {};\n                for(var i = 0, il = targetNames.length; i < il; i++)mesh.morphTargetDictionary[targetNames[i]] = i;\n            } else console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');\n        }\n    }\n    function createPrimitiveKey(primitiveDef) {\n        var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];\n        var geometryKey;\n        if (dracoExtension) geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);\n        else geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;\n        return geometryKey;\n    }\n    function createAttributesKey(attributes) {\n        var attributesKey = '';\n        var keys = Object.keys(attributes).sort();\n        for(var i = 0, il = keys.length; i < il; i++)attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';\n        return attributesKey;\n    }\n    /* GLTF PARSER */ function GLTFParser(json, extensions, options) {\n        this.json = json || {};\n        this.extensions = extensions || {};\n        this.options = options || {};\n        // loader object cache\n        this.cache = new GLTFRegistry();\n        // BufferGeometry caching\n        this.primitiveCache = {};\n        this.textureLoader = new THREE.TextureLoader(this.options.manager);\n        this.textureLoader.setCrossOrigin(this.options.crossOrigin);\n        this.fileLoader = new THREE.FileLoader(this.options.manager);\n        this.fileLoader.setResponseType('arraybuffer');\n        if (this.options.crossOrigin === 'use-credentials') this.fileLoader.setWithCredentials(true);\n    }\n    GLTFParser.prototype.parse = function(onLoad, onError) {\n        var parser = this;\n        var json = this.json;\n        var extensions = this.extensions;\n        // Clear the loader cache\n        this.cache.removeAll();\n        // Mark the special nodes/meshes in json for efficient parse\n        this.markDefs();\n        Promise.all([\n            this.getDependencies('scene'),\n            this.getDependencies('animation'),\n            this.getDependencies('camera')\n        ]).then(function(dependencies) {\n            var result = {\n                scene: dependencies[0][json.scene || 0],\n                scenes: dependencies[0],\n                animations: dependencies[1],\n                cameras: dependencies[2],\n                asset: json.asset,\n                parser: parser,\n                userData: {}\n            };\n            addUnknownExtensionsToUserData(extensions, result, json);\n            assignExtrasToUserData(result, json);\n            onLoad(result);\n        }).catch(onError);\n    };\n    /**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t */ GLTFParser.prototype.markDefs = function() {\n        var nodeDefs = this.json.nodes || [];\n        var skinDefs = this.json.skins || [];\n        var meshDefs = this.json.meshes || [];\n        var meshReferences = {};\n        var meshUses = {};\n        // Nothing in the node definition indicates whether it is a Bone or an\n        // Object3D. Use the skins' joint references to mark bones.\n        for(var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++){\n            var joints = skinDefs[skinIndex].joints;\n            for(var i = 0, il = joints.length; i < il; i++)nodeDefs[joints[i]].isBone = true;\n        }\n        // Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n        // avoid having more than one THREE.Mesh with the same name, count\n        // references and rename instances below.\n        //\n        // Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n        for(var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++){\n            var nodeDef = nodeDefs[nodeIndex];\n            if (nodeDef.mesh !== undefined) {\n                if (meshReferences[nodeDef.mesh] === undefined) meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;\n                meshReferences[nodeDef.mesh]++;\n                // Nothing in the mesh definition indicates whether it is\n                // a SkinnedMesh or Mesh. Use the node's mesh reference\n                // to mark SkinnedMesh if node has skin.\n                if (nodeDef.skin !== undefined) meshDefs[nodeDef.mesh].isSkinnedMesh = true;\n            }\n        }\n        this.json.meshReferences = meshReferences;\n        this.json.meshUses = meshUses;\n    };\n    /**\n\t * Requests the specified dependency asynchronously, with caching.\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}\n\t */ GLTFParser.prototype.getDependency = function(type, index) {\n        var cacheKey = type + ':' + index;\n        var dependency = this.cache.get(cacheKey);\n        if (!dependency) {\n            switch(type){\n                case 'scene':\n                    dependency = this.loadScene(index);\n                    break;\n                case 'node':\n                    dependency = this.loadNode(index);\n                    break;\n                case 'mesh':\n                    dependency = this.loadMesh(index);\n                    break;\n                case 'accessor':\n                    dependency = this.loadAccessor(index);\n                    break;\n                case 'bufferView':\n                    dependency = this.loadBufferView(index);\n                    break;\n                case 'buffer':\n                    dependency = this.loadBuffer(index);\n                    break;\n                case 'material':\n                    dependency = this.loadMaterial(index);\n                    break;\n                case 'texture':\n                    dependency = this.loadTexture(index);\n                    break;\n                case 'skin':\n                    dependency = this.loadSkin(index);\n                    break;\n                case 'animation':\n                    dependency = this.loadAnimation(index);\n                    break;\n                case 'camera':\n                    dependency = this.loadCamera(index);\n                    break;\n                case 'light':\n                    dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);\n                    break;\n                default:\n                    throw new Error('Unknown type: ' + type);\n            }\n            this.cache.add(cacheKey, dependency);\n        }\n        return dependency;\n    };\n    /**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */ GLTFParser.prototype.getDependencies = function(type) {\n        var dependencies = this.cache.get(type);\n        if (!dependencies) {\n            var parser = this;\n            var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];\n            dependencies = Promise.all(defs.map(function(def, index) {\n                return parser.getDependency(type, index);\n            }));\n            this.cache.add(type, dependencies);\n        }\n        return dependencies;\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */ GLTFParser.prototype.loadBuffer = function(bufferIndex) {\n        var bufferDef = this.json.buffers[bufferIndex];\n        var loader = this.fileLoader;\n        if (bufferDef.type && bufferDef.type !== 'arraybuffer') throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');\n        // If present, GLB container is required to be the first buffer.\n        if (bufferDef.uri === undefined && bufferIndex === 0) return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);\n        var options = this.options;\n        return new Promise(function(resolve, reject) {\n            loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function() {\n                reject(new Error('THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".'));\n            });\n        });\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */ GLTFParser.prototype.loadBufferView = function(bufferViewIndex) {\n        var bufferViewDef = this.json.bufferViews[bufferViewIndex];\n        return this.getDependency('buffer', bufferViewDef.buffer).then(function(buffer) {\n            var byteLength = bufferViewDef.byteLength || 0;\n            var byteOffset = bufferViewDef.byteOffset || 0;\n            return buffer.slice(byteOffset, byteOffset + byteLength);\n        });\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t * @param {number} accessorIndex\n\t * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n\t */ GLTFParser.prototype.loadAccessor = function(accessorIndex) {\n        var parser = this;\n        var json = this.json;\n        var accessorDef = this.json.accessors[accessorIndex];\n        if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) // Ignore empty accessors, which may be used to declare runtime\n        // information about attributes coming from another source (e.g. Draco\n        // compression extension).\n        return Promise.resolve(null);\n        var pendingBufferViews = [];\n        if (accessorDef.bufferView !== undefined) pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));\n        else pendingBufferViews.push(null);\n        if (accessorDef.sparse !== undefined) {\n            pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));\n            pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));\n        }\n        return Promise.all(pendingBufferViews).then(function(bufferViews) {\n            var bufferView = bufferViews[0];\n            var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];\n            var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n            // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n            var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n            var itemBytes = elementBytes * itemSize;\n            var byteOffset = accessorDef.byteOffset || 0;\n            var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;\n            var normalized = accessorDef.normalized === true;\n            var array, bufferAttribute;\n            // The buffer is not interleaved if the stride is the item size in bytes.\n            if (byteStride && byteStride !== itemBytes) {\n                // Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n                // This makes sure that IBA.count reflects accessor.count properly\n                var ibSlice = Math.floor(byteOffset / byteStride);\n                var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n                var ib = parser.cache.get(ibCacheKey);\n                if (!ib) {\n                    array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes);\n                    // Integer parameters to IB/IBA are in array elements, not bytes.\n                    ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);\n                    parser.cache.add(ibCacheKey, ib);\n                }\n                bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);\n            } else {\n                if (bufferView === null) array = new TypedArray(accessorDef.count * itemSize);\n                else array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);\n                bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);\n            }\n            // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n            if (accessorDef.sparse !== undefined) {\n                var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n                var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];\n                var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n                var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n                var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);\n                var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);\n                if (bufferView !== null) // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n                bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\n                for(var i = 0, il = sparseIndices.length; i < il; i++){\n                    var index = sparseIndices[i];\n                    bufferAttribute.setX(index, sparseValues[i * itemSize]);\n                    if (itemSize >= 2) bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);\n                    if (itemSize >= 3) bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);\n                    if (itemSize >= 4) bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);\n                    if (itemSize >= 5) throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');\n                }\n            }\n            return bufferAttribute;\n        });\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture>}\n\t */ GLTFParser.prototype.loadTexture = function(textureIndex) {\n        var parser = this;\n        var json = this.json;\n        var options = this.options;\n        var textureLoader = this.textureLoader;\n        var URL = self.URL || self.webkitURL;\n        var textureDef = json.textures[textureIndex];\n        var textureExtensions = textureDef.extensions || {};\n        var source;\n        if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];\n        else source = json.images[textureDef.source];\n        var sourceURI = source.uri;\n        var isObjectURL = false;\n        if (source.bufferView !== undefined) // Load binary image data from bufferView, if provided.\n        sourceURI = parser.getDependency('bufferView', source.bufferView).then(function(bufferView) {\n            isObjectURL = true;\n            var blob = new Blob([\n                bufferView\n            ], {\n                type: source.mimeType\n            });\n            sourceURI = URL.createObjectURL(blob);\n            return sourceURI;\n        });\n        return Promise.resolve(sourceURI).then(function(sourceURI) {\n            // Load Texture resource.\n            var loader = options.manager.getHandler(sourceURI);\n            if (!loader) loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;\n            return new Promise(function(resolve, reject) {\n                loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);\n            });\n        }).then(function(texture) {\n            // Clean up resources and configure Texture.\n            if (isObjectURL === true) URL.revokeObjectURL(sourceURI);\n            texture.flipY = false;\n            if (textureDef.name) texture.name = textureDef.name;\n            // Ignore unknown mime types, like DDS files.\n            if (source.mimeType in MIME_TYPE_FORMATS) texture.format = MIME_TYPE_FORMATS[source.mimeType];\n            var samplers = json.samplers || {};\n            var sampler = samplers[textureDef.sampler] || {};\n            texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n            texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;\n            texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n            texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n            return texture;\n        });\n    };\n    /**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @return {Promise}\n\t */ GLTFParser.prototype.assignTexture = function(materialParams, mapName, mapDef) {\n        var parser = this;\n        return this.getDependency('texture', mapDef.index).then(function(texture) {\n            if (!texture.isCompressedTexture) switch(mapName){\n                case 'aoMap':\n                case 'emissiveMap':\n                case 'metalnessMap':\n                case 'normalMap':\n                case 'roughnessMap':\n                    texture.format = THREE.RGBFormat;\n                    break;\n            }\n            // Materials sample aoMap from UV set 1 and other maps from UV set 0 - this can't be configured\n            // However, we will copy UV set 0 to UV set 1 on demand for aoMap\n            if (mapDef.texCoord !== undefined && mapDef.texCoord != 0 && !(mapName === 'aoMap' && mapDef.texCoord == 1)) console.warn('THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.');\n            if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {\n                var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\n                if (transform) texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);\n            }\n            materialParams[mapName] = texture;\n        });\n    };\n    /**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accomodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.\n\t */ GLTFParser.prototype.assignFinalMaterial = function(mesh) {\n        var geometry = mesh.geometry;\n        var material = mesh.material;\n        var useVertexTangents = geometry.attributes.tangent !== undefined;\n        var useVertexColors = geometry.attributes.color !== undefined;\n        var useFlatShading = geometry.attributes.normal === undefined;\n        var useSkinning = mesh.isSkinnedMesh === true;\n        var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;\n        var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n        if (mesh.isPoints) {\n            var cacheKey = 'PointsMaterial:' + material.uuid;\n            var pointsMaterial = this.cache.get(cacheKey);\n            if (!pointsMaterial) {\n                pointsMaterial = new THREE.PointsMaterial();\n                THREE.Material.prototype.copy.call(pointsMaterial, material);\n                pointsMaterial.color.copy(material.color);\n                pointsMaterial.map = material.map;\n                pointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n                this.cache.add(cacheKey, pointsMaterial);\n            }\n            material = pointsMaterial;\n        } else if (mesh.isLine) {\n            var cacheKey = 'LineBasicMaterial:' + material.uuid;\n            var lineMaterial = this.cache.get(cacheKey);\n            if (!lineMaterial) {\n                lineMaterial = new THREE.LineBasicMaterial();\n                THREE.Material.prototype.copy.call(lineMaterial, material);\n                lineMaterial.color.copy(material.color);\n                this.cache.add(cacheKey, lineMaterial);\n            }\n            material = lineMaterial;\n        }\n        // Clone the material if it will be modified\n        if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {\n            var cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n            if (material.isGLTFSpecularGlossinessMaterial) cacheKey += 'specular-glossiness:';\n            if (useSkinning) cacheKey += 'skinning:';\n            if (useVertexTangents) cacheKey += 'vertex-tangents:';\n            if (useVertexColors) cacheKey += 'vertex-colors:';\n            if (useFlatShading) cacheKey += 'flat-shading:';\n            if (useMorphTargets) cacheKey += 'morph-targets:';\n            if (useMorphNormals) cacheKey += 'morph-normals:';\n            var cachedMaterial = this.cache.get(cacheKey);\n            if (!cachedMaterial) {\n                cachedMaterial = material.clone();\n                if (useSkinning) cachedMaterial.skinning = true;\n                if (useVertexTangents) cachedMaterial.vertexTangents = true;\n                if (useVertexColors) cachedMaterial.vertexColors = true;\n                if (useFlatShading) cachedMaterial.flatShading = true;\n                if (useMorphTargets) cachedMaterial.morphTargets = true;\n                if (useMorphNormals) cachedMaterial.morphNormals = true;\n                this.cache.add(cacheKey, cachedMaterial);\n            }\n            material = cachedMaterial;\n        }\n        // workarounds for mesh and geometry\n        if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) geometry.setAttribute('uv2', geometry.attributes.uv);\n        // https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n        if (material.normalScale && !useVertexTangents) material.normalScale.y = -material.normalScale.y;\n        if (material.clearcoatNormalScale && !useVertexTangents) material.clearcoatNormalScale.y = -material.clearcoatNormalScale.y;\n        mesh.material = material;\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t * @param {number} materialIndex\n\t * @return {Promise<THREE.Material>}\n\t */ GLTFParser.prototype.loadMaterial = function(materialIndex) {\n        var parser = this;\n        var json = this.json;\n        var extensions = this.extensions;\n        var materialDef = json.materials[materialIndex];\n        var materialType;\n        var materialParams = {};\n        var materialExtensions = materialDef.extensions || {};\n        var pending = [];\n        if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {\n            var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];\n            materialType = sgExtension.getMaterialType();\n            pending.push(sgExtension.extendParams(materialParams, materialDef, parser));\n        } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {\n            var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];\n            materialType = kmuExtension.getMaterialType();\n            pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));\n        } else {\n            // Specification:\n            // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n            materialType = THREE.MeshStandardMaterial;\n            var metallicRoughness = materialDef.pbrMetallicRoughness || {};\n            materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n            materialParams.opacity = 1.0;\n            if (Array.isArray(metallicRoughness.baseColorFactor)) {\n                var array = metallicRoughness.baseColorFactor;\n                materialParams.color.fromArray(array);\n                materialParams.opacity = array[3];\n            }\n            if (metallicRoughness.baseColorTexture !== undefined) pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n            materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n            materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n            if (metallicRoughness.metallicRoughnessTexture !== undefined) {\n                pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));\n                pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));\n            }\n        }\n        if (materialDef.doubleSided === true) materialParams.side = THREE.DoubleSide;\n        var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n        if (alphaMode === ALPHA_MODES.BLEND) {\n            materialParams.transparent = true;\n            // See: https://github.com/mrdoob/three.js/issues/17706\n            materialParams.depthWrite = false;\n        } else {\n            materialParams.transparent = false;\n            if (alphaMode === ALPHA_MODES.MASK) materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n        }\n        if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n            pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));\n            materialParams.normalScale = new THREE.Vector2(1, 1);\n            if (materialDef.normalTexture.scale !== undefined) materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);\n        }\n        if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n            pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));\n            if (materialDef.occlusionTexture.strength !== undefined) materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n        }\n        if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);\n        if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));\n        if (materialExtensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT]) {\n            var clearcoatExtension = extensions[EXTENSIONS.KHR_MATERIALS_CLEARCOAT];\n            materialType = clearcoatExtension.getMaterialType();\n            pending.push(clearcoatExtension.extendParams(materialParams, {\n                extensions: materialExtensions\n            }, parser));\n        }\n        return Promise.all(pending).then(function() {\n            var material;\n            if (materialType === GLTFMeshStandardSGMaterial) material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);\n            else material = new materialType(materialParams);\n            if (materialDef.name) material.name = materialDef.name;\n            // baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n            if (material.map) material.map.encoding = THREE.sRGBEncoding;\n            if (material.emissiveMap) material.emissiveMap.encoding = THREE.sRGBEncoding;\n            assignExtrasToUserData(material, materialDef);\n            if (materialDef.extensions) addUnknownExtensionsToUserData(extensions, material, materialDef);\n            return material;\n        });\n    };\n    /**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t */ function computeBounds(geometry, primitiveDef, parser) {\n        var attributes = primitiveDef.attributes;\n        var box = new THREE.Box3();\n        if (attributes.POSITION !== undefined) {\n            var accessor = parser.json.accessors[attributes.POSITION];\n            var min = accessor.min;\n            var max = accessor.max;\n            // glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n            if (min !== undefined && max !== undefined) box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));\n            else {\n                console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                return;\n            }\n        } else return;\n        var targets = primitiveDef.targets;\n        if (targets !== undefined) {\n            var maxDisplacement = new THREE.Vector3();\n            var vector = new THREE.Vector3();\n            for(var i = 0, il = targets.length; i < il; i++){\n                var target = targets[i];\n                if (target.POSITION !== undefined) {\n                    var accessor = parser.json.accessors[target.POSITION];\n                    var min = accessor.min;\n                    var max = accessor.max;\n                    // glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n                    if (min !== undefined && max !== undefined) {\n                        // we need to get max of absolute components because target weight is [-1,1]\n                        vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));\n                        vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));\n                        vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));\n                        // Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative\n                        // to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets\n                        // are used to implement key-frame animations and as such only two are active at a time - this results in very large\n                        // boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.\n                        maxDisplacement.max(vector);\n                    } else console.warn('THREE.GLTFLoader: Missing min/max properties for accessor POSITION.');\n                }\n            }\n            // As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.\n            box.expandByVector(maxDisplacement);\n        }\n        geometry.boundingBox = box;\n        var sphere = new THREE.Sphere();\n        box.getCenter(sphere.center);\n        sphere.radius = box.min.distanceTo(box.max) / 2;\n        geometry.boundingSphere = sphere;\n    }\n    /**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */ function addPrimitiveAttributes(geometry, primitiveDef, parser) {\n        var attributes = primitiveDef.attributes;\n        var pending = [];\n        function assignAttributeAccessor(accessorIndex, attributeName) {\n            return parser.getDependency('accessor', accessorIndex).then(function(accessor) {\n                geometry.setAttribute(attributeName, accessor);\n            });\n        }\n        for(var gltfAttributeName in attributes){\n            var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase();\n            // Skip attributes already provided by e.g. Draco extension.\n            if (threeAttributeName in geometry.attributes) continue;\n            pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));\n        }\n        if (primitiveDef.indices !== undefined && !geometry.index) {\n            var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function(accessor) {\n                geometry.setIndex(accessor);\n            });\n            pending.push(accessor);\n        }\n        assignExtrasToUserData(geometry, primitiveDef);\n        computeBounds(geometry, primitiveDef, parser);\n        return Promise.all(pending).then(function() {\n            return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;\n        });\n    }\n    /**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {Number} drawMode\n\t * @return {THREE.BufferGeometry}\n\t */ function toTrianglesDrawMode(geometry, drawMode) {\n        var index = geometry.getIndex();\n        // generate index if not present\n        if (index === null) {\n            var indices = [];\n            var position = geometry.getAttribute('position');\n            if (position !== undefined) {\n                for(var i = 0; i < position.count; i++)indices.push(i);\n                geometry.setIndex(indices);\n                index = geometry.getIndex();\n            } else {\n                console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.');\n                return geometry;\n            }\n        }\n        //\n        var numberOfTriangles = index.count - 2;\n        var newIndices = [];\n        if (drawMode === THREE.TriangleFanDrawMode) // gl.TRIANGLE_FAN\n        for(var i = 1; i <= numberOfTriangles; i++){\n            newIndices.push(index.getX(0));\n            newIndices.push(index.getX(i));\n            newIndices.push(index.getX(i + 1));\n        }\n        else {\n            // gl.TRIANGLE_STRIP\n            for(var i = 0; i < numberOfTriangles; i++)if (i % 2 === 0) {\n                newIndices.push(index.getX(i));\n                newIndices.push(index.getX(i + 1));\n                newIndices.push(index.getX(i + 2));\n            } else {\n                newIndices.push(index.getX(i + 2));\n                newIndices.push(index.getX(i + 1));\n                newIndices.push(index.getX(i));\n            }\n        }\n        if (newIndices.length / 3 !== numberOfTriangles) console.error('THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.');\n        // build final geometry\n        var newGeometry = geometry.clone();\n        newGeometry.setIndex(newIndices);\n        return newGeometry;\n    }\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<THREE.BufferGeometry>>}\n\t */ GLTFParser.prototype.loadGeometries = function(primitives) {\n        var parser = this;\n        var extensions = this.extensions;\n        var cache = this.primitiveCache;\n        function createDracoPrimitive(primitive) {\n            return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function(geometry) {\n                return addPrimitiveAttributes(geometry, primitive, parser);\n            });\n        }\n        var pending = [];\n        for(var i = 0, il = primitives.length; i < il; i++){\n            var primitive = primitives[i];\n            var cacheKey = createPrimitiveKey(primitive);\n            // See if we've already created this geometry\n            var cached = cache[cacheKey];\n            if (cached) // Use the cached geometry if it exists\n            pending.push(cached.promise);\n            else {\n                var geometryPromise;\n                if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) // Use DRACO geometry if available\n                geometryPromise = createDracoPrimitive(primitive);\n                else // Otherwise create a new geometry\n                geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);\n                // Cache this geometry\n                cache[cacheKey] = {\n                    primitive: primitive,\n                    promise: geometryPromise\n                };\n                pending.push(geometryPromise);\n            }\n        }\n        return Promise.all(pending);\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t * @param {number} meshIndex\n\t * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n\t */ GLTFParser.prototype.loadMesh = function(meshIndex) {\n        var parser = this;\n        var json = this.json;\n        var meshDef = json.meshes[meshIndex];\n        var primitives = meshDef.primitives;\n        var pending = [];\n        for(var i = 0, il = primitives.length; i < il; i++){\n            var material = primitives[i].material === undefined ? createDefaultMaterial(this.cache) : this.getDependency('material', primitives[i].material);\n            pending.push(material);\n        }\n        pending.push(parser.loadGeometries(primitives));\n        return Promise.all(pending).then(function(results) {\n            var materials = results.slice(0, results.length - 1);\n            var geometries = results[results.length - 1];\n            var meshes = [];\n            for(var i = 0, il = geometries.length; i < il; i++){\n                var geometry = geometries[i];\n                var primitive = primitives[i];\n                // 1. create Mesh\n                var mesh;\n                var material = materials[i];\n                if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {\n                    // .isSkinnedMesh isn't in glTF spec. See .markDefs()\n                    mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);\n                    if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) // we normalize floating point skin weight array to fix malformed assets (see #15319)\n                    // it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n                    mesh.normalizeSkinWeights();\n                    if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleStripDrawMode);\n                    else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) mesh.geometry = toTrianglesDrawMode(mesh.geometry, THREE.TriangleFanDrawMode);\n                } else if (primitive.mode === WEBGL_CONSTANTS.LINES) mesh = new THREE.LineSegments(geometry, material);\n                else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) mesh = new THREE.Line(geometry, material);\n                else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) mesh = new THREE.LineLoop(geometry, material);\n                else if (primitive.mode === WEBGL_CONSTANTS.POINTS) mesh = new THREE.Points(geometry, material);\n                else throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);\n                if (Object.keys(mesh.geometry.morphAttributes).length > 0) updateMorphTargets(mesh, meshDef);\n                mesh.name = meshDef.name || 'mesh_' + meshIndex;\n                if (geometries.length > 1) mesh.name += '_' + i;\n                assignExtrasToUserData(mesh, meshDef);\n                parser.assignFinalMaterial(mesh);\n                meshes.push(mesh);\n            }\n            if (meshes.length === 1) return meshes[0];\n            var group = new THREE.Group();\n            for(var i = 0, il = meshes.length; i < il; i++)group.add(meshes[i]);\n            return group;\n        });\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */ GLTFParser.prototype.loadCamera = function(cameraIndex) {\n        var camera;\n        var cameraDef = this.json.cameras[cameraIndex];\n        var params = cameraDef[cameraDef.type];\n        if (!params) {\n            console.warn('THREE.GLTFLoader: Missing camera parameters.');\n            return;\n        }\n        if (cameraDef.type === 'perspective') camera = new THREE.PerspectiveCamera(THREE.MathUtils.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6);\n        else if (cameraDef.type === 'orthographic') camera = new THREE.OrthographicCamera(-params.xmag, params.xmag, params.ymag, -params.ymag, params.znear, params.zfar);\n        if (cameraDef.name) camera.name = cameraDef.name;\n        assignExtrasToUserData(camera, cameraDef);\n        return Promise.resolve(camera);\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t * @param {number} skinIndex\n\t * @return {Promise<Object>}\n\t */ GLTFParser.prototype.loadSkin = function(skinIndex) {\n        var skinDef = this.json.skins[skinIndex];\n        var skinEntry = {\n            joints: skinDef.joints\n        };\n        if (skinDef.inverseBindMatrices === undefined) return Promise.resolve(skinEntry);\n        return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function(accessor) {\n            skinEntry.inverseBindMatrices = accessor;\n            return skinEntry;\n        });\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t * @param {number} animationIndex\n\t * @return {Promise<THREE.AnimationClip>}\n\t */ GLTFParser.prototype.loadAnimation = function(animationIndex) {\n        var json = this.json;\n        var animationDef = json.animations[animationIndex];\n        var pendingNodes = [];\n        var pendingInputAccessors = [];\n        var pendingOutputAccessors = [];\n        var pendingSamplers = [];\n        var pendingTargets = [];\n        for(var i = 0, il = animationDef.channels.length; i < il; i++){\n            var channel = animationDef.channels[i];\n            var sampler = animationDef.samplers[channel.sampler];\n            var target = channel.target;\n            var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n            var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;\n            var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;\n            pendingNodes.push(this.getDependency('node', name));\n            pendingInputAccessors.push(this.getDependency('accessor', input));\n            pendingOutputAccessors.push(this.getDependency('accessor', output));\n            pendingSamplers.push(sampler);\n            pendingTargets.push(target);\n        }\n        return Promise.all([\n            Promise.all(pendingNodes),\n            Promise.all(pendingInputAccessors),\n            Promise.all(pendingOutputAccessors),\n            Promise.all(pendingSamplers),\n            Promise.all(pendingTargets)\n        ]).then(function(dependencies) {\n            var nodes = dependencies[0];\n            var inputAccessors = dependencies[1];\n            var outputAccessors = dependencies[2];\n            var samplers = dependencies[3];\n            var targets = dependencies[4];\n            var tracks = [];\n            for(var i = 0, il = nodes.length; i < il; i++){\n                var node = nodes[i];\n                var inputAccessor = inputAccessors[i];\n                var outputAccessor = outputAccessors[i];\n                var sampler = samplers[i];\n                var target = targets[i];\n                if (node === undefined) continue;\n                node.updateMatrix();\n                node.matrixAutoUpdate = true;\n                var TypedKeyframeTrack;\n                switch(PATH_PROPERTIES[target.path]){\n                    case PATH_PROPERTIES.weights:\n                        TypedKeyframeTrack = THREE.NumberKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.rotation:\n                        TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n                        break;\n                    case PATH_PROPERTIES.position:\n                    case PATH_PROPERTIES.scale:\n                    default:\n                        TypedKeyframeTrack = THREE.VectorKeyframeTrack;\n                        break;\n                }\n                var targetName = node.name ? node.name : node.uuid;\n                var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;\n                var targetNames = [];\n                if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) // Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.\n                node.traverse(function(object) {\n                    if (object.isMesh === true && object.morphTargetInfluences) targetNames.push(object.name ? object.name : object.uuid);\n                });\n                else targetNames.push(targetName);\n                var outputArray = outputAccessor.array;\n                if (outputAccessor.normalized) {\n                    var scale;\n                    if (outputArray.constructor === Int8Array) scale = 1 / 127;\n                    else if (outputArray.constructor === Uint8Array) scale = 1 / 255;\n                    else if (outputArray.constructor == Int16Array) scale = 1 / 32767;\n                    else if (outputArray.constructor === Uint16Array) scale = 1 / 65535;\n                    else throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');\n                    var scaled = new Float32Array(outputArray.length);\n                    for(var j = 0, jl = outputArray.length; j < jl; j++)scaled[j] = outputArray[j] * scale;\n                    outputArray = scaled;\n                }\n                for(var j = 0, jl = targetNames.length; j < jl; j++){\n                    var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation);\n                    // Override interpolation with custom factory method.\n                    if (sampler.interpolation === 'CUBICSPLINE') {\n                        track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {\n                            // A CUBICSPLINE keyframe in glTF has three output values for each input value,\n                            // representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n                            // must be divided by three to get the interpolant's sampleSize argument.\n                            return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);\n                        };\n                        // Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n                        track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n                    }\n                    tracks.push(track);\n                }\n            }\n            var name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n            return new THREE.AnimationClip(name, undefined, tracks);\n        });\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t * @param {number} nodeIndex\n\t * @return {Promise<THREE.Object3D>}\n\t */ GLTFParser.prototype.loadNode = function(nodeIndex) {\n        var json = this.json;\n        var extensions = this.extensions;\n        var parser = this;\n        var meshReferences = json.meshReferences;\n        var meshUses = json.meshUses;\n        var nodeDef = json.nodes[nodeIndex];\n        return (function() {\n            var pending = [];\n            if (nodeDef.mesh !== undefined) pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function(mesh) {\n                var node;\n                if (meshReferences[nodeDef.mesh] > 1) {\n                    var instanceNum = meshUses[nodeDef.mesh]++;\n                    node = mesh.clone();\n                    node.name += '_instance_' + instanceNum;\n                } else node = mesh;\n                // if weights are provided on the node, override weights on the mesh.\n                if (nodeDef.weights !== undefined) node.traverse(function(o) {\n                    if (!o.isMesh) return;\n                    for(var i = 0, il = nodeDef.weights.length; i < il; i++)o.morphTargetInfluences[i] = nodeDef.weights[i];\n                });\n                return node;\n            }));\n            if (nodeDef.camera !== undefined) pending.push(parser.getDependency('camera', nodeDef.camera));\n            if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\n            return Promise.all(pending);\n        })().then(function(objects) {\n            var node;\n            // .isBone isn't in glTF spec. See .markDefs\n            if (nodeDef.isBone === true) node = new THREE.Bone();\n            else if (objects.length > 1) node = new THREE.Group();\n            else if (objects.length === 1) node = objects[0];\n            else node = new THREE.Object3D();\n            if (node !== objects[0]) for(var i = 0, il = objects.length; i < il; i++)node.add(objects[i]);\n            if (nodeDef.name) {\n                node.userData.name = nodeDef.name;\n                node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);\n            }\n            assignExtrasToUserData(node, nodeDef);\n            if (nodeDef.extensions) addUnknownExtensionsToUserData(extensions, node, nodeDef);\n            if (nodeDef.matrix !== undefined) {\n                var matrix = new THREE.Matrix4();\n                matrix.fromArray(nodeDef.matrix);\n                node.applyMatrix4(matrix);\n            } else {\n                if (nodeDef.translation !== undefined) node.position.fromArray(nodeDef.translation);\n                if (nodeDef.rotation !== undefined) node.quaternion.fromArray(nodeDef.rotation);\n                if (nodeDef.scale !== undefined) node.scale.fromArray(nodeDef.scale);\n            }\n            return node;\n        });\n    };\n    /**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t * @param {number} sceneIndex\n\t * @return {Promise<THREE.Group>}\n\t */ GLTFParser.prototype.loadScene = function() {\n        // scene node hierachy builder\n        function buildNodeHierachy(nodeId, parentObject, json, parser) {\n            var nodeDef = json.nodes[nodeId];\n            return parser.getDependency('node', nodeId).then(function(node) {\n                if (nodeDef.skin === undefined) return node;\n                // build skeleton here as well\n                var skinEntry;\n                return parser.getDependency('skin', nodeDef.skin).then(function(skin) {\n                    skinEntry = skin;\n                    var pendingJoints = [];\n                    for(var i = 0, il = skinEntry.joints.length; i < il; i++)pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));\n                    return Promise.all(pendingJoints);\n                }).then(function(jointNodes) {\n                    node.traverse(function(mesh) {\n                        if (!mesh.isMesh) return;\n                        var bones = [];\n                        var boneInverses = [];\n                        for(var j = 0, jl = jointNodes.length; j < jl; j++){\n                            var jointNode = jointNodes[j];\n                            if (jointNode) {\n                                bones.push(jointNode);\n                                var mat = new THREE.Matrix4();\n                                if (skinEntry.inverseBindMatrices !== undefined) mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);\n                                boneInverses.push(mat);\n                            } else console.warn('THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[j]);\n                        }\n                        mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);\n                    });\n                    return node;\n                });\n            }).then(function(node) {\n                // build node hierachy\n                parentObject.add(node);\n                var pending = [];\n                if (nodeDef.children) {\n                    var children = nodeDef.children;\n                    for(var i = 0, il = children.length; i < il; i++){\n                        var child = children[i];\n                        pending.push(buildNodeHierachy(child, node, json, parser));\n                    }\n                }\n                return Promise.all(pending);\n            });\n        }\n        return function loadScene(sceneIndex) {\n            var json = this.json;\n            var extensions = this.extensions;\n            var sceneDef = this.json.scenes[sceneIndex];\n            var parser = this;\n            // Loader returns Group, not Scene.\n            // See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172\n            var scene = new THREE.Group();\n            if (sceneDef.name) scene.name = sceneDef.name;\n            assignExtrasToUserData(scene, sceneDef);\n            if (sceneDef.extensions) addUnknownExtensionsToUserData(extensions, scene, sceneDef);\n            var nodeIds = sceneDef.nodes || [];\n            var pending = [];\n            for(var i = 0, il = nodeIds.length; i < il; i++)pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));\n            return Promise.all(pending).then(function() {\n                return scene;\n            });\n        };\n    }();\n    return GLTFLoader;\n}();\n\n//# sourceMappingURL=index.2f105777.js.map\n","/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nTHREE.GLTFLoader = ( function () {\n\n\tfunction GLTFLoader( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.dracoLoader = null;\n\t\tthis.ddsLoader = null;\n\n\t}\n\n\tGLTFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: GLTFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar resourcePath;\n\n\t\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\t\tresourcePath = this.resourcePath;\n\n\t\t\t} else if ( this.path !== '' ) {\n\n\t\t\t\tresourcePath = this.path;\n\n\t\t\t} else {\n\n\t\t\t\tresourcePath = THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\t}\n\n\t\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tvar _onError = function ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t};\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tif ( scope.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\tloader.setWithCredentials( true );\n\n\t\t\t}\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, _onError );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t_onError( e );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, _onError );\n\n\t\t},\n\n\t\tsetDRACOLoader: function ( dracoLoader ) {\n\n\t\t\tthis.dracoLoader = dracoLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDDSLoader: function ( ddsLoader ) {\n\n\t\t\tthis.ddsLoader = ddsLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( data, path, onLoad, onError ) {\n\n\t\t\tvar content;\n\t\t\tvar extensions = {};\n\n\t\t\tif ( typeof data === 'string' ) {\n\n\t\t\t\tcontent = data;\n\n\t\t\t} else {\n\n\t\t\t\tvar magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );\n\n\t\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontent = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar json = JSON.parse( content );\n\n\t\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( json.extensionsUsed ) {\n\n\t\t\t\tfor ( var i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\t\tvar extensionName = json.extensionsUsed[ i ];\n\t\t\t\t\tvar extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFLightsExtension( json );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_CLEARCOAT:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsClearcoatExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.MSFT_TEXTURE_DDS:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureDDSExtension( this.ddsLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MESH_QUANTIZATION:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMeshQuantizationExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar parser = new GLTFParser( json, extensions, {\n\n\t\t\t\tpath: path || this.resourcePath || '',\n\t\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\t\tmanager: this.manager\n\n\t\t\t} );\n\n\t\t\tparser.parse( onLoad, onError );\n\n\t\t}\n\n\t} );\n\n\t/* GLTFREGISTRY */\n\n\tfunction GLTFRegistry() {\n\n\t\tvar objects = {};\n\n\t\treturn\t{\n\n\t\t\tget: function ( key ) {\n\n\t\t\t\treturn objects[ key ];\n\n\t\t\t},\n\n\t\t\tadd: function ( key, object ) {\n\n\t\t\t\tobjects[ key ] = object;\n\n\t\t\t},\n\n\t\t\tremove: function ( key ) {\n\n\t\t\t\tdelete objects[ key ];\n\n\t\t\t},\n\n\t\t\tremoveAll: function () {\n\n\t\t\t\tobjects = {};\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/*********************************/\n\t/********** EXTENSIONS ***********/\n\t/*********************************/\n\n\tvar EXTENSIONS = {\n\t\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\t\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\t\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\t\tKHR_MATERIALS_CLEARCOAT: 'KHR_materials_clearcoat',\n\t\tKHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n\t\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\t\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\t\tKHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n\t\tMSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n\t};\n\n\t/**\n\t * DDS Texture Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n\t *\n\t */\n\tfunction GLTFTextureDDSExtension( ddsLoader ) {\n\n\t\tif ( ! ddsLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n\t\tthis.ddsLoader = ddsLoader;\n\n\t}\n\n\t/**\n\t * Punctual Lights Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\t */\n\tfunction GLTFLightsExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};\n\t\tthis.lightDefs = extension.lights || [];\n\n\t}\n\n\tGLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {\n\n\t\tvar lightDef = this.lightDefs[ lightIndex ];\n\t\tvar lightNode;\n\n\t\tvar color = new THREE.Color( 0xffffff );\n\t\tif ( lightDef.color !== undefined ) color.fromArray( lightDef.color );\n\n\t\tvar range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\tswitch ( lightDef.type ) {\n\n\t\t\tcase 'directional':\n\t\t\t\tlightNode = new THREE.DirectionalLight( color );\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tcase 'point':\n\t\t\t\tlightNode = new THREE.PointLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\tbreak;\n\n\t\t\tcase 'spot':\n\t\t\t\tlightNode = new THREE.SpotLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\t// Handle spotlight properties.\n\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".' );\n\n\t\t}\n\n\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\tlightNode.decay = 2;\n\n\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\tlightNode.name = lightDef.name || ( 'light_' + lightIndex );\n\n\t\treturn Promise.resolve( lightNode );\n\n\t};\n\n\t/**\n\t * Unlit Materials Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\t */\n\tfunction GLTFMaterialsUnlitExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t}\n\n\tGLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n\n\t\treturn THREE.MeshBasicMaterial;\n\n\t};\n\n\tGLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {\n\n\t\tvar pending = [];\n\n\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\tmaterialParams.opacity = 1.0;\n\n\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\tif ( metallicRoughness ) {\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/**\n\t * Clearcoat Materials Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_clearcoat\n\t */\n\tfunction GLTFMaterialsClearcoatExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_CLEARCOAT;\n\n\t}\n\n\tGLTFMaterialsClearcoatExtension.prototype.getMaterialType = function () {\n\n\t\treturn THREE.MeshPhysicalMaterial;\n\n\t};\n\n\tGLTFMaterialsClearcoatExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {\n\n\t\tvar pending = [];\n\n\t\tvar extension = materialDef.extensions[ this.name ];\n\n\t\tif ( extension.clearcoatFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoat = extension.clearcoatFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatMap', extension.clearcoatTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessFactor !== undefined ) {\n\n\t\t\tmaterialParams.clearcoatRoughness = extension.clearcoatRoughnessFactor;\n\n\t\t}\n\n\t\tif ( extension.clearcoatRoughnessTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatRoughnessMap', extension.clearcoatRoughnessTexture ) );\n\n\t\t}\n\n\t\tif ( extension.clearcoatNormalTexture !== undefined ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'clearcoatNormalMap', extension.clearcoatNormalTexture ) );\n\n\t\t\tif ( extension.clearcoatNormalTexture.scale !== undefined ) {\n\n\t\t\t\tvar scale = extension.clearcoatNormalTexture.scale;\n\n\t\t\t\tmaterialParams.clearcoatNormalScale = new THREE.Vector2( scale, scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/* BINARY EXTENSION */\n\tvar BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n\tvar BINARY_EXTENSION_HEADER_LENGTH = 12;\n\tvar BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\n\tfunction GLTFBinaryExtension( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tvar headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\n\t\tthis.header = {\n\t\t\tmagic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );\n\n\t\t}\n\n\t\tvar chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tvar chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkView.byteLength ) {\n\n\t\t\tvar chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tvar chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tvar contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = THREE.LoaderUtils.decodeText( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tvar byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * DRACO Mesh Compression Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n\t */\n\tfunction GLTFDracoMeshCompressionExtension( json, dracoLoader ) {\n\n\t\tif ( ! dracoLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\tthis.json = json;\n\t\tthis.dracoLoader = dracoLoader;\n\t\tthis.dracoLoader.preload();\n\n\t}\n\n\tGLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {\n\n\t\tvar json = this.json;\n\t\tvar dracoLoader = this.dracoLoader;\n\t\tvar bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\tvar gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\tvar threeAttributeMap = {};\n\t\tvar attributeNormalizedMap = {};\n\t\tvar attributeTypeMap = {};\n\n\t\tfor ( var attributeName in gltfAttributeMap ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t}\n\n\t\tfor ( attributeName in primitive.attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\tvar accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\tvar componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType;\n\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\tvar normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t}, threeAttributeMap, attributeTypeMap );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Texture Transform Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n\t */\n\tfunction GLTFTextureTransformExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t}\n\n\tGLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {\n\n\t\ttexture = texture.clone();\n\n\t\tif ( transform.offset !== undefined ) {\n\n\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t}\n\n\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\ttexture.rotation = transform.rotation;\n\n\t\t}\n\n\t\tif ( transform.scale !== undefined ) {\n\n\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t}\n\n\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.' );\n\n\t\t}\n\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t};\n\n\t/**\n\t * Specular-Glossiness Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n\t */\n\n\t/**\n\t * A sub class of THREE.StandardMaterial with some of the functionality\n\t * changed via the `onBeforeCompile` callback\n\t * @pailhead\n\t */\n\n\tfunction GLTFMeshStandardSGMaterial( params ) {\n\n\t\tTHREE.MeshStandardMaterial.call( this );\n\n\t\tthis.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t//various chunks that need replacing\n\t\tvar specularMapParsFragmentChunk = [\n\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t'\tuniform sampler2D specularMap;',\n\t\t\t'#endif'\n\t\t].join( '\\n' );\n\n\t\tvar glossinessMapParsFragmentChunk = [\n\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t'\tuniform sampler2D glossinessMap;',\n\t\t\t'#endif'\n\t\t].join( '\\n' );\n\n\t\tvar specularMapFragmentChunk = [\n\t\t\t'vec3 specularFactor = specular;',\n\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n\t\t\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\n\t\t\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t'\tspecularFactor *= texelSpecular.rgb;',\n\t\t\t'#endif'\n\t\t].join( '\\n' );\n\n\t\tvar glossinessMapFragmentChunk = [\n\t\t\t'float glossinessFactor = glossiness;',\n\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n\t\t\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t'\tglossinessFactor *= texelGlossiness.a;',\n\t\t\t'#endif'\n\t\t].join( '\\n' );\n\n\t\tvar lightPhysicalFragmentChunk = [\n\t\t\t'PhysicalMaterial material;',\n\t\t\t'material.diffuseColor = diffuseColor.rgb;',\n\t\t\t'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\n\t\t\t'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\n\t\t\t'material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.',\n\t\t\t'material.specularRoughness += geometryRoughness;',\n\t\t\t'material.specularRoughness = min( material.specularRoughness, 1.0 );',\n\t\t\t'material.specularColor = specularFactor.rgb;',\n\t\t].join( '\\n' );\n\n\t\tvar uniforms = {\n\t\t\tspecular: { value: new THREE.Color().setHex( 0xffffff ) },\n\t\t\tglossiness: { value: 1 },\n\t\t\tspecularMap: { value: null },\n\t\t\tglossinessMap: { value: null }\n\t\t};\n\n\t\tthis._extraUniforms = uniforms;\n\n\t\t// please see #14031 or #13198 for an alternate approach\n\t\tthis.onBeforeCompile = function ( shader ) {\n\n\t\t\tfor ( var uniformName in uniforms ) {\n\n\t\t\t\tshader.uniforms[ uniformName ] = uniforms[ uniformName ];\n\n\t\t\t}\n\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace( 'uniform float roughness;', 'uniform vec3 specular;' );\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace( 'uniform float metalness;', 'uniform float glossiness;' );\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk );\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk );\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk );\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk );\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );\n\n\t\t};\n\n\t\t/*eslint-disable*/\n\t\tObject.defineProperties(\n\t\t\tthis,\n\t\t\t{\n\t\t\t\tspecular: {\n\t\t\t\t\tget: function () { return uniforms.specular.value; },\n\t\t\t\t\tset: function ( v ) { uniforms.specular.value = v; }\n\t\t\t\t},\n\t\t\t\tspecularMap: {\n\t\t\t\t\tget: function () { return uniforms.specularMap.value; },\n\t\t\t\t\tset: function ( v ) { uniforms.specularMap.value = v; }\n\t\t\t\t},\n\t\t\t\tglossiness: {\n\t\t\t\t\tget: function () { return uniforms.glossiness.value; },\n\t\t\t\t\tset: function ( v ) { uniforms.glossiness.value = v; }\n\t\t\t\t},\n\t\t\t\tglossinessMap: {\n\t\t\t\t\tget: function () { return uniforms.glossinessMap.value; },\n\t\t\t\t\tset: function ( v ) {\n\n\t\t\t\t\t\tuniforms.glossinessMap.value = v;\n\t\t\t\t\t\t//how about something like this - @pailhead\n\t\t\t\t\t\tif ( v ) {\n\n\t\t\t\t\t\t\tthis.defines.USE_GLOSSINESSMAP = '';\n\t\t\t\t\t\t\t// set USE_ROUGHNESSMAP to enable vUv\n\t\t\t\t\t\t\tthis.defines.USE_ROUGHNESSMAP = '';\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdelete this.defines.USE_ROUGHNESSMAP;\n\t\t\t\t\t\t\tdelete this.defines.USE_GLOSSINESSMAP;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t/*eslint-enable*/\n\t\tdelete this.metalness;\n\t\tdelete this.roughness;\n\t\tdelete this.metalnessMap;\n\t\tdelete this.roughnessMap;\n\n\t\tthis.setValues( params );\n\n\t}\n\n\tGLTFMeshStandardSGMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\n\tGLTFMeshStandardSGMaterial.prototype.constructor = GLTFMeshStandardSGMaterial;\n\n\tGLTFMeshStandardSGMaterial.prototype.copy = function ( source ) {\n\n\t\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\n\t\tthis.specularMap = source.specularMap;\n\t\tthis.specular.copy( source.specular );\n\t\tthis.glossinessMap = source.glossinessMap;\n\t\tthis.glossiness = source.glossiness;\n\t\tdelete this.metalness;\n\t\tdelete this.roughness;\n\t\tdelete this.metalnessMap;\n\t\tdelete this.roughnessMap;\n\t\treturn this;\n\n\t};\n\n\tfunction GLTFMaterialsPbrSpecularGlossinessExtension() {\n\n\t\treturn {\n\n\t\t\tname: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n\n\t\t\tspecularGlossinessParams: [\n\t\t\t\t'color',\n\t\t\t\t'map',\n\t\t\t\t'lightMap',\n\t\t\t\t'lightMapIntensity',\n\t\t\t\t'aoMap',\n\t\t\t\t'aoMapIntensity',\n\t\t\t\t'emissive',\n\t\t\t\t'emissiveIntensity',\n\t\t\t\t'emissiveMap',\n\t\t\t\t'bumpMap',\n\t\t\t\t'bumpScale',\n\t\t\t\t'normalMap',\n\t\t\t\t'normalMapType',\n\t\t\t\t'displacementMap',\n\t\t\t\t'displacementScale',\n\t\t\t\t'displacementBias',\n\t\t\t\t'specularMap',\n\t\t\t\t'specular',\n\t\t\t\t'glossinessMap',\n\t\t\t\t'glossiness',\n\t\t\t\t'alphaMap',\n\t\t\t\t'envMap',\n\t\t\t\t'envMapIntensity',\n\t\t\t\t'refractionRatio',\n\t\t\t],\n\n\t\t\tgetMaterialType: function () {\n\n\t\t\t\treturn GLTFMeshStandardSGMaterial;\n\n\t\t\t},\n\n\t\t\textendParams: function ( materialParams, materialDef, parser ) {\n\n\t\t\t\tvar pbrSpecularGlossiness = materialDef.extensions[ this.name ];\n\n\t\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {\n\n\t\t\t\t\tvar array = pbrSpecularGlossiness.diffuseFactor;\n\n\t\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );\n\n\t\t\t\t}\n\n\t\t\t\tmaterialParams.emissive = new THREE.Color( 0.0, 0.0, 0.0 );\n\t\t\t\tmaterialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n\t\t\t\tmaterialParams.specular = new THREE.Color( 1.0, 1.0, 1.0 );\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {\n\n\t\t\t\t\tmaterialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {\n\n\t\t\t\t\tvar specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t},\n\n\t\t\tcreateMaterial: function ( materialParams ) {\n\n\t\t\t\tvar material = new GLTFMeshStandardSGMaterial( materialParams );\n\t\t\t\tmaterial.fog = true;\n\n\t\t\t\tmaterial.color = materialParams.color;\n\n\t\t\t\tmaterial.map = materialParams.map === undefined ? null : materialParams.map;\n\n\t\t\t\tmaterial.lightMap = null;\n\t\t\t\tmaterial.lightMapIntensity = 1.0;\n\n\t\t\t\tmaterial.aoMap = materialParams.aoMap === undefined ? null : materialParams.aoMap;\n\t\t\t\tmaterial.aoMapIntensity = 1.0;\n\n\t\t\t\tmaterial.emissive = materialParams.emissive;\n\t\t\t\tmaterial.emissiveIntensity = 1.0;\n\t\t\t\tmaterial.emissiveMap = materialParams.emissiveMap === undefined ? null : materialParams.emissiveMap;\n\n\t\t\t\tmaterial.bumpMap = materialParams.bumpMap === undefined ? null : materialParams.bumpMap;\n\t\t\t\tmaterial.bumpScale = 1;\n\n\t\t\t\tmaterial.normalMap = materialParams.normalMap === undefined ? null : materialParams.normalMap;\n\t\t\t\tmaterial.normalMapType = THREE.TangentSpaceNormalMap;\n\n\t\t\t\tif ( materialParams.normalScale ) material.normalScale = materialParams.normalScale;\n\n\t\t\t\tmaterial.displacementMap = null;\n\t\t\t\tmaterial.displacementScale = 1;\n\t\t\t\tmaterial.displacementBias = 0;\n\n\t\t\t\tmaterial.specularMap = materialParams.specularMap === undefined ? null : materialParams.specularMap;\n\t\t\t\tmaterial.specular = materialParams.specular;\n\n\t\t\t\tmaterial.glossinessMap = materialParams.glossinessMap === undefined ? null : materialParams.glossinessMap;\n\t\t\t\tmaterial.glossiness = materialParams.glossiness;\n\n\t\t\t\tmaterial.alphaMap = null;\n\n\t\t\t\tmaterial.envMap = materialParams.envMap === undefined ? null : materialParams.envMap;\n\t\t\t\tmaterial.envMapIntensity = 1.0;\n\n\t\t\t\tmaterial.refractionRatio = 0.98;\n\n\t\t\t\treturn material;\n\n\t\t\t},\n\n\t\t};\n\n\t}\n\n\t/**\n\t * Mesh Quantization Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n\t */\n\tfunction GLTFMeshQuantizationExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n\n\t}\n\n\t/*********************************/\n\t/********** INTERPOLATION ********/\n\t/*********************************/\n\n\t// Spline Interpolation\n\t// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n\tfunction GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tTHREE.Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tGLTFCubicSplineInterpolant.prototype = Object.create( THREE.Interpolant.prototype );\n\tGLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n\n\tGLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {\n\n\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tvalueSize = this.valueSize,\n\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\tfor ( var i = 0; i !== valueSize; i ++ ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\tGLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer;\n\t\tvar values = this.sampleValues;\n\t\tvar stride = this.valueSize;\n\n\t\tvar stride2 = stride * 2;\n\t\tvar stride3 = stride * 3;\n\n\t\tvar td = t1 - t0;\n\n\t\tvar p = ( t - t0 ) / td;\n\t\tvar pp = p * p;\n\t\tvar ppp = pp * p;\n\n\t\tvar offset1 = i1 * stride3;\n\t\tvar offset0 = offset1 - stride3;\n\n\t\tvar s2 = - 2 * ppp + 3 * pp;\n\t\tvar s3 = ppp - pp;\n\t\tvar s0 = 1 - s2;\n\t\tvar s1 = s3 - pp + p;\n\n\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\tfor ( var i = 0; i !== stride; i ++ ) {\n\n\t\t\tvar p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\tvar m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\tvar p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\tvar m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\t/*********************************/\n\t/********** INTERNALS ************/\n\t/*********************************/\n\n\t/* CONSTANTS */\n\n\tvar WEBGL_CONSTANTS = {\n\t\tFLOAT: 5126,\n\t\t//FLOAT_MAT2: 35674,\n\t\tFLOAT_MAT3: 35675,\n\t\tFLOAT_MAT4: 35676,\n\t\tFLOAT_VEC2: 35664,\n\t\tFLOAT_VEC3: 35665,\n\t\tFLOAT_VEC4: 35666,\n\t\tLINEAR: 9729,\n\t\tREPEAT: 10497,\n\t\tSAMPLER_2D: 35678,\n\t\tPOINTS: 0,\n\t\tLINES: 1,\n\t\tLINE_LOOP: 2,\n\t\tLINE_STRIP: 3,\n\t\tTRIANGLES: 4,\n\t\tTRIANGLE_STRIP: 5,\n\t\tTRIANGLE_FAN: 6,\n\t\tUNSIGNED_BYTE: 5121,\n\t\tUNSIGNED_SHORT: 5123\n\t};\n\n\tvar WEBGL_COMPONENT_TYPES = {\n\t\t5120: Int8Array,\n\t\t5121: Uint8Array,\n\t\t5122: Int16Array,\n\t\t5123: Uint16Array,\n\t\t5125: Uint32Array,\n\t\t5126: Float32Array\n\t};\n\n\tvar WEBGL_FILTERS = {\n\t\t9728: THREE.NearestFilter,\n\t\t9729: THREE.LinearFilter,\n\t\t9984: THREE.NearestMipmapNearestFilter,\n\t\t9985: THREE.LinearMipmapNearestFilter,\n\t\t9986: THREE.NearestMipmapLinearFilter,\n\t\t9987: THREE.LinearMipmapLinearFilter\n\t};\n\n\tvar WEBGL_WRAPPINGS = {\n\t\t33071: THREE.ClampToEdgeWrapping,\n\t\t33648: THREE.MirroredRepeatWrapping,\n\t\t10497: THREE.RepeatWrapping\n\t};\n\n\tvar WEBGL_TYPE_SIZES = {\n\t\t'SCALAR': 1,\n\t\t'VEC2': 2,\n\t\t'VEC3': 3,\n\t\t'VEC4': 4,\n\t\t'MAT2': 4,\n\t\t'MAT3': 9,\n\t\t'MAT4': 16\n\t};\n\n\tvar ATTRIBUTES = {\n\t\tPOSITION: 'position',\n\t\tNORMAL: 'normal',\n\t\tTANGENT: 'tangent',\n\t\tTEXCOORD_0: 'uv',\n\t\tTEXCOORD_1: 'uv2',\n\t\tCOLOR_0: 'color',\n\t\tWEIGHTS_0: 'skinWeight',\n\t\tJOINTS_0: 'skinIndex',\n\t};\n\n\tvar PATH_PROPERTIES = {\n\t\tscale: 'scale',\n\t\ttranslation: 'position',\n\t\trotation: 'quaternion',\n\t\tweights: 'morphTargetInfluences'\n\t};\n\n\tvar INTERPOLATION = {\n\t\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\t\tLINEAR: THREE.InterpolateLinear,\n\t\tSTEP: THREE.InterpolateDiscrete\n\t};\n\n\tvar ALPHA_MODES = {\n\t\tOPAQUE: 'OPAQUE',\n\t\tMASK: 'MASK',\n\t\tBLEND: 'BLEND'\n\t};\n\n\tvar MIME_TYPE_FORMATS = {\n\t\t'image/png': THREE.RGBAFormat,\n\t\t'image/jpeg': THREE.RGBFormat\n\t};\n\n\t/* UTILITY FUNCTIONS */\n\n\tfunction resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n\t */\n\tfunction createDefaultMaterial( cache ) {\n\n\t\tif ( cache[ 'DefaultMaterial' ] === undefined ) {\n\n\t\t\tcache[ 'DefaultMaterial' ] = new THREE.MeshStandardMaterial( {\n\t\t\t\tcolor: 0xFFFFFF,\n\t\t\t\temissive: 0x000000,\n\t\t\t\tmetalness: 1,\n\t\t\t\troughness: 1,\n\t\t\t\ttransparent: false,\n\t\t\t\tdepthTest: true,\n\t\t\t\tside: THREE.FrontSide\n\t\t\t} );\n\n\t\t}\n\n\t\treturn cache[ 'DefaultMaterial' ];\n\n\t}\n\n\tfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t\t// Add unknown glTF extensions to an object's userData.\n\n\t\tfor ( var name in objectDef.extensions ) {\n\n\t\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n\t * @param {GLTF.definition} gltfDef\n\t */\n\tfunction assignExtrasToUserData( object, gltfDef ) {\n\n\t\tif ( gltfDef.extras !== undefined ) {\n\n\t\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n\t *\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {Array<GLTF.Target>} targets\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */\n\tfunction addMorphTargets( geometry, targets, parser ) {\n\n\t\tvar hasMorphPosition = false;\n\t\tvar hasMorphNormal = false;\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\n\t\t\tif ( hasMorphPosition && hasMorphNormal ) break;\n\n\t\t}\n\n\t\tif ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );\n\n\t\tvar pendingPositionAccessors = [];\n\t\tvar pendingNormalAccessors = [];\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( hasMorphPosition ) {\n\n\t\t\t\tvar pendingAccessor = target.POSITION !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t\t: geometry.attributes.position;\n\n\t\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t\tif ( hasMorphNormal ) {\n\n\t\t\t\tvar pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t\t: geometry.attributes.normal;\n\n\t\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( [\n\t\t\tPromise.all( pendingPositionAccessors ),\n\t\t\tPromise.all( pendingNormalAccessors )\n\t\t] ).then( function ( accessors ) {\n\n\t\t\tvar morphPositions = accessors[ 0 ];\n\t\t\tvar morphNormals = accessors[ 1 ];\n\n\t\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\treturn geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * @param {THREE.Mesh} mesh\n\t * @param {GLTF.Mesh} meshDef\n\t */\n\tfunction updateMorphTargets( mesh, meshDef ) {\n\n\t\tmesh.updateMorphTargets();\n\n\t\tif ( meshDef.weights !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\t\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\t\tvar targetNames = meshDef.extras.targetNames;\n\n\t\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\t\tfor ( var i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createPrimitiveKey( primitiveDef ) {\n\n\t\tvar dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\t\tvar geometryKey;\n\n\t\tif ( dracoExtension ) {\n\n\t\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t\t} else {\n\n\t\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t\t}\n\n\t\treturn geometryKey;\n\n\t}\n\n\tfunction createAttributesKey( attributes ) {\n\n\t\tvar attributesKey = '';\n\n\t\tvar keys = Object.keys( attributes ).sort();\n\n\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t\t}\n\n\t\treturn attributesKey;\n\n\t}\n\n\t/* GLTF PARSER */\n\n\tfunction GLTFParser( json, extensions, options ) {\n\n\t\tthis.json = json || {};\n\t\tthis.extensions = extensions || {};\n\t\tthis.options = options || {};\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = {};\n\n\t\tthis.textureLoader = new THREE.TextureLoader( this.options.manager );\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\n\t\tthis.fileLoader = new THREE.FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t}\n\n\t}\n\n\tGLTFParser.prototype.parse = function ( onLoad, onError ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis.markDefs();\n\n\t\tPromise.all( [\n\n\t\t\tthis.getDependencies( 'scene' ),\n\t\t\tthis.getDependencies( 'animation' ),\n\t\t\tthis.getDependencies( 'camera' ),\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar result = {\n\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\tasset: json.asset,\n\t\t\t\tparser: parser,\n\t\t\t\tuserData: {}\n\t\t\t};\n\n\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\tonLoad( result );\n\n\t\t} ).catch( onError );\n\n\t};\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t */\n\tGLTFParser.prototype.markDefs = function () {\n\n\t\tvar nodeDefs = this.json.nodes || [];\n\t\tvar skinDefs = this.json.skins || [];\n\t\tvar meshDefs = this.json.meshes || [];\n\n\t\tvar meshReferences = {};\n\t\tvar meshUses = {};\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tvar joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( var i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n\t\t// avoid having more than one THREE.Mesh with the same name, count\n\t\t// references and rename instances below.\n\t\t//\n\t\t// Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t\tfor ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tvar nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tif ( meshReferences[ nodeDef.mesh ] === undefined ) {\n\n\t\t\t\t\tmeshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tmeshReferences[ nodeDef.mesh ] ++;\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.json.meshReferences = meshReferences;\n\t\tthis.json.meshUses = meshUses;\n\n\t};\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}\n\t */\n\tGLTFParser.prototype.getDependency = function ( type, index ) {\n\n\t\tvar cacheKey = type + ':' + index;\n\t\tvar dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'scene':\n\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tdependency = this.loadNode( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mesh':\n\t\t\t\t\tdependency = this.loadMesh( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'accessor':\n\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bufferView':\n\t\t\t\t\tdependency = this.loadBufferView( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'buffer':\n\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'material':\n\t\t\t\t\tdependency = this.loadMaterial( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'texture':\n\t\t\t\t\tdependency = this.loadTexture( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'skin':\n\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'animation':\n\t\t\t\t\tdependency = this.loadAnimation( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'camera':\n\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'light':\n\t\t\t\t\tdependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t}\n\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t};\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tGLTFParser.prototype.getDependencies = function ( type ) {\n\n\t\tvar dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBuffer = function ( bufferIndex ) {\n\n\t\tvar bufferDef = this.json.buffers[ bufferIndex ];\n\t\tvar loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tvar options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {\n\n\t\tvar bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tvar byteLength = bufferViewDef.byteLength || 0;\n\t\t\tvar byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t * @param {number} accessorIndex\n\t * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n\t */\n\tGLTFParser.prototype.loadAccessor = function ( accessorIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\t// Ignore empty accessors, which may be used to declare runtime\n\t\t\t// information about attributes coming from another source (e.g. Draco\n\t\t\t// compression extension).\n\t\t\treturn Promise.resolve( null );\n\n\t\t}\n\n\t\tvar pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tvar bufferView = bufferViews[ 0 ];\n\n\t\t\tvar itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tvar TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tvar elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tvar itemBytes = elementBytes * itemSize;\n\t\t\tvar byteOffset = accessorDef.byteOffset || 0;\n\t\t\tvar byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\tvar normalized = accessorDef.normalized === true;\n\t\t\tvar array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\tvar ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\tvar ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\tvar ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tvar itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tvar TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tvar byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tvar byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tvar sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tvar sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute = new THREE.BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture>}\n\t */\n\tGLTFParser.prototype.loadTexture = function ( textureIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar options = this.options;\n\t\tvar textureLoader = this.textureLoader;\n\n\t\tvar URL = self.URL || self.webkitURL;\n\n\t\tvar textureDef = json.textures[ textureIndex ];\n\n\t\tvar textureExtensions = textureDef.extensions || {};\n\n\t\tvar source;\n\n\t\tif ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {\n\n\t\t\tsource = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];\n\n\t\t} else {\n\n\t\t\tsource = json.images[ textureDef.source ];\n\n\t\t}\n\n\t\tvar sourceURI = source.uri;\n\t\tvar isObjectURL = false;\n\n\t\tif ( source.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tvar blob = new Blob( [ bufferView ], { type: source.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\t// Load Texture resource.\n\n\t\t\tvar loader = options.manager.getHandler( sourceURI );\n\n\t\t\tif ( ! loader ) {\n\n\t\t\t\tloader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]\n\t\t\t\t\t? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader\n\t\t\t\t\t: textureLoader;\n\n\t\t\t}\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tloader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( textureDef.name ) texture.name = textureDef.name;\n\n\t\t\t// Ignore unknown mime types, like DDS files.\n\t\t\tif ( source.mimeType in MIME_TYPE_FORMATS ) {\n\n\t\t\t\ttexture.format = MIME_TYPE_FORMATS[ source.mimeType ];\n\n\t\t\t}\n\n\t\t\tvar samplers = json.samplers || {};\n\t\t\tvar sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipmapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @return {Promise}\n\t */\n\tGLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {\n\n\t\tvar parser = this;\n\n\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\tif ( ! texture.isCompressedTexture ) {\n\n\t\t\t\tswitch ( mapName ) {\n\n\t\t\t\t\tcase 'aoMap':\n\t\t\t\t\tcase 'emissiveMap':\n\t\t\t\t\tcase 'metalnessMap':\n\t\t\t\t\tcase 'normalMap':\n\t\t\t\t\tcase 'roughnessMap':\n\t\t\t\t\t\ttexture.format = THREE.RGBFormat;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Materials sample aoMap from UV set 1 and other maps from UV set 0 - this can't be configured\n\t\t\t// However, we will copy UV set 0 to UV set 1 on demand for aoMap\n\t\t\tif ( mapDef.texCoord !== undefined && mapDef.texCoord != 0 && ! ( mapName === 'aoMap' && mapDef.texCoord == 1 ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Custom UV set ' + mapDef.texCoord + ' for texture ' + mapName + ' not yet supported.' );\n\n\t\t\t}\n\n\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\tvar transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accomodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.\n\t */\n\tGLTFParser.prototype.assignFinalMaterial = function ( mesh ) {\n\n\t\tvar geometry = mesh.geometry;\n\t\tvar material = mesh.material;\n\n\t\tvar useVertexTangents = geometry.attributes.tangent !== undefined;\n\t\tvar useVertexColors = geometry.attributes.color !== undefined;\n\t\tvar useFlatShading = geometry.attributes.normal === undefined;\n\t\tvar useSkinning = mesh.isSkinnedMesh === true;\n\t\tvar useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;\n\t\tvar useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n\n\t\tif ( mesh.isPoints ) {\n\n\t\t\tvar cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\tvar pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\tpointsMaterial = new THREE.PointsMaterial();\n\t\t\t\tTHREE.Material.prototype.copy.call( pointsMaterial, material );\n\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = pointsMaterial;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tvar cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\tvar lineMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\tlineMaterial = new THREE.LineBasicMaterial();\n\t\t\t\tTHREE.Material.prototype.copy.call( lineMaterial, material );\n\t\t\t\tlineMaterial.color.copy( material.color );\n\n\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = lineMaterial;\n\n\t\t}\n\n\t\t// Clone the material if it will be modified\n\t\tif ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {\n\n\t\t\tvar cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';\n\t\t\tif ( useSkinning ) cacheKey += 'skinning:';\n\t\t\tif ( useVertexTangents ) cacheKey += 'vertex-tangents:';\n\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\t\t\tif ( useMorphTargets ) cacheKey += 'morph-targets:';\n\t\t\tif ( useMorphNormals ) cacheKey += 'morph-normals:';\n\n\t\t\tvar cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\tcachedMaterial = material.clone();\n\n\t\t\t\tif ( useSkinning ) cachedMaterial.skinning = true;\n\t\t\t\tif ( useVertexTangents ) cachedMaterial.vertexTangents = true;\n\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = true;\n\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\t\t\t\tif ( useMorphTargets ) cachedMaterial.morphTargets = true;\n\t\t\t\tif ( useMorphNormals ) cachedMaterial.morphNormals = true;\n\n\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = cachedMaterial;\n\n\t\t}\n\n\t\t// workarounds for mesh and geometry\n\n\t\tif ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {\n\n\t\t\tgeometry.setAttribute( 'uv2', geometry.attributes.uv );\n\n\t\t}\n\n\t\t// https://github.com/mrdoob/three.js/issues/11438#issuecomment-507003995\n\t\tif ( material.normalScale && ! useVertexTangents ) {\n\n\t\t\tmaterial.normalScale.y = - material.normalScale.y;\n\n\t\t}\n\n\t\tif ( material.clearcoatNormalScale && ! useVertexTangents ) {\n\n\t\t\tmaterial.clearcoatNormalScale.y = - material.clearcoatNormalScale.y;\n\n\t\t}\n\n\t\tmesh.material = material;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t * @param {number} materialIndex\n\t * @return {Promise<THREE.Material>}\n\t */\n\tGLTFParser.prototype.loadMaterial = function ( materialIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar materialDef = json.materials[ materialIndex ];\n\n\t\tvar materialType;\n\t\tvar materialParams = {};\n\t\tvar materialExtensions = materialDef.extensions || {};\n\n\t\tvar pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {\n\n\t\t\tvar sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];\n\t\t\tmaterialType = sgExtension.getMaterialType();\n\t\t\tpending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\tvar kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tmaterialType = THREE.MeshStandardMaterial;\n\n\t\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = THREE.DoubleSide;\n\n\t\t}\n\n\t\tvar alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t\t// See: https://github.com/mrdoob/three.js/issues/17706\n\t\t\tmaterialParams.depthWrite = false;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\tmaterialParams.normalScale = new THREE.Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tmaterialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tmaterialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );\n\n\t\t}\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_CLEARCOAT ] ) {\n\n\t\t\tvar clearcoatExtension = extensions[ EXTENSIONS.KHR_MATERIALS_CLEARCOAT ];\n\t\t\tmaterialType = clearcoatExtension.getMaterialType();\n\t\t\tpending.push( clearcoatExtension.extendParams( materialParams, { extensions: materialExtensions }, parser ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tvar material;\n\n\t\t\tif ( materialType === GLTFMeshStandardSGMaterial ) {\n\n\t\t\t\tmaterial = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new materialType( materialParams );\n\n\t\t\t}\n\n\t\t\tif ( materialDef.name ) material.name = materialDef.name;\n\n\t\t\t// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n\t\t\tif ( material.map ) material.map.encoding = THREE.sRGBEncoding;\n\t\t\tif ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;\n\n\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t */\n\tfunction computeBounds( geometry, primitiveDef, parser ) {\n\n\t\tvar attributes = primitiveDef.attributes;\n\n\t\tvar box = new THREE.Box3();\n\n\t\tif ( attributes.POSITION !== undefined ) {\n\n\t\t\tvar accessor = parser.json.accessors[ attributes.POSITION ];\n\n\t\t\tvar min = accessor.min;\n\t\t\tvar max = accessor.max;\n\n\t\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\t\tbox.set(\n\t\t\t\t\tnew THREE.Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),\n\t\t\t\t\tnew THREE.Vector3( max[ 0 ], max[ 1 ], max[ 2 ] ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar targets = primitiveDef.targets;\n\n\t\tif ( targets !== undefined ) {\n\n\t\t\tvar maxDisplacement = new THREE.Vector3();\n\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\t\tvar accessor = parser.json.accessors[ target.POSITION ];\n\t\t\t\t\tvar min = accessor.min;\n\t\t\t\t\tvar max = accessor.max;\n\n\t\t\t\t\t// glTF requires 'min' and 'max', but VRM (which extends glTF) currently ignores that requirement.\n\n\t\t\t\t\tif ( min !== undefined && max !== undefined ) {\n\n\t\t\t\t\t\t// we need to get max of absolute components because target weight is [-1,1]\n\t\t\t\t\t\tvector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );\n\t\t\t\t\t\tvector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );\n\t\t\t\t\t\tvector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );\n\n\t\t\t\t\t\t// Note: this assumes that the sum of all weights is at most 1. This isn't quite correct - it's more conservative\n\t\t\t\t\t\t// to assume that each target can have a max weight of 1. However, for some use cases - notably, when morph targets\n\t\t\t\t\t\t// are used to implement key-frame animations and as such only two are active at a time - this results in very large\n\t\t\t\t\t\t// boxes. So for now we make a box that's sometimes a touch too small but is hopefully mostly of reasonable size.\n\t\t\t\t\t\tmaxDisplacement.max( vector );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing min/max properties for accessor POSITION.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// As per comment above this box isn't conservative, but has a reasonable size for a very large number of morph targets.\n\t\t\tbox.expandByVector( maxDisplacement );\n\n\t\t}\n\n\t\tgeometry.boundingBox = box;\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\tbox.getCenter( sphere.center );\n\t\tsphere.radius = box.min.distanceTo( box.max ) / 2;\n\n\t\tgeometry.boundingSphere = sphere;\n\n\t}\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */\n\tfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\t\tvar attributes = primitiveDef.attributes;\n\n\t\tvar pending = [];\n\n\t\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t\t.then( function ( accessor ) {\n\n\t\t\t\t\tgeometry.setAttribute( attributeName, accessor );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tfor ( var gltfAttributeName in attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t\t}\n\n\t\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\t\tvar accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\t\tgeometry.setIndex( accessor );\n\n\t\t\t} );\n\n\t\t\tpending.push( accessor );\n\n\t\t}\n\n\t\tassignExtrasToUserData( geometry, primitiveDef );\n\n\t\tcomputeBounds( geometry, primitiveDef, parser );\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\treturn primitiveDef.targets !== undefined\n\t\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t\t: geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {Number} drawMode\n\t * @return {THREE.BufferGeometry}\n\t */\n\tfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\t\tvar index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tvar indices = [];\n\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar numberOfTriangles = index.count - 2;\n\t\tvar newIndices = [];\n\n\t\tif ( drawMode === THREE.TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tvar newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\n\t\treturn newGeometry;\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<THREE.BufferGeometry>>}\n\t */\n\tGLTFParser.prototype.loadGeometries = function ( primitives ) {\n\n\t\tvar parser = this;\n\t\tvar extensions = this.extensions;\n\t\tvar cache = this.primitiveCache;\n\n\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar primitive = primitives[ i ];\n\t\t\tvar cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t// See if we've already created this geometry\n\t\t\tvar cached = cache[ cacheKey ];\n\n\t\t\tif ( cached ) {\n\n\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\tpending.push( cached.promise );\n\n\t\t\t} else {\n\n\t\t\t\tvar geometryPromise;\n\n\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new THREE.BufferGeometry(), primitive, parser );\n\n\t\t\t\t}\n\n\t\t\t\t// Cache this geometry\n\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t * @param {number} meshIndex\n\t * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n\t */\n\tGLTFParser.prototype.loadMesh = function ( meshIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar meshDef = json.meshes[ meshIndex ];\n\t\tvar primitives = meshDef.primitives;\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar material = primitives[ i ].material === undefined\n\t\t\t\t? createDefaultMaterial( this.cache )\n\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\tpending.push( material );\n\n\t\t}\n\n\t\tpending.push( parser.loadGeometries( primitives ) );\n\n\t\treturn Promise.all( pending ).then( function ( results ) {\n\n\t\t\tvar materials = results.slice( 0, results.length - 1 );\n\t\t\tvar geometries = results[ results.length - 1 ];\n\n\t\t\tvar meshes = [];\n\n\t\t\tfor ( var i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\tvar geometry = geometries[ i ];\n\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t// 1. create Mesh\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tvar material = materials[ i ];\n\n\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See .markDefs()\n\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t? new THREE.SkinnedMesh( geometry, material )\n\t\t\t\t\t\t: new THREE.Mesh( geometry, material );\n\n\t\t\t\t\tif ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {\n\n\t\t\t\t\t\t// we normalize floating point skin weight array to fix malformed assets (see #15319)\n\t\t\t\t\t\t// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, THREE.TriangleStripDrawMode );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\tmesh.geometry = toTrianglesDrawMode( mesh.geometry, THREE.TriangleFanDrawMode );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\tmesh = new THREE.LineSegments( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\tmesh = new THREE.Line( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\tmesh = new THREE.LineLoop( geometry, material );\n\n\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\tmesh = new THREE.Points( geometry, material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t}\n\n\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = meshDef.name || ( 'mesh_' + meshIndex );\n\n\t\t\t\tif ( geometries.length > 1 ) mesh.name += '_' + i;\n\n\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t}\n\n\t\t\tvar group = new THREE.Group();\n\n\t\t\tfor ( var i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */\n\tGLTFParser.prototype.loadCamera = function ( cameraIndex ) {\n\n\t\tvar camera;\n\t\tvar cameraDef = this.json.cameras[ cameraIndex ];\n\t\tvar params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tcamera = new THREE.PerspectiveCamera( THREE.MathUtils.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new THREE.OrthographicCamera( - params.xmag, params.xmag, params.ymag, - params.ymag, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name ) camera.name = cameraDef.name;\n\n\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\treturn Promise.resolve( camera );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t * @param {number} skinIndex\n\t * @return {Promise<Object>}\n\t */\n\tGLTFParser.prototype.loadSkin = function ( skinIndex ) {\n\n\t\tvar skinDef = this.json.skins[ skinIndex ];\n\n\t\tvar skinEntry = { joints: skinDef.joints };\n\n\t\tif ( skinDef.inverseBindMatrices === undefined ) {\n\n\t\t\treturn Promise.resolve( skinEntry );\n\n\t\t}\n\n\t\treturn this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {\n\n\t\t\tskinEntry.inverseBindMatrices = accessor;\n\n\t\t\treturn skinEntry;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t * @param {number} animationIndex\n\t * @return {Promise<THREE.AnimationClip>}\n\t */\n\tGLTFParser.prototype.loadAnimation = function ( animationIndex ) {\n\n\t\tvar json = this.json;\n\n\t\tvar animationDef = json.animations[ animationIndex ];\n\n\t\tvar pendingNodes = [];\n\t\tvar pendingInputAccessors = [];\n\t\tvar pendingOutputAccessors = [];\n\t\tvar pendingSamplers = [];\n\t\tvar pendingTargets = [];\n\n\t\tfor ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\tvar channel = animationDef.channels[ i ];\n\t\t\tvar sampler = animationDef.samplers[ channel.sampler ];\n\t\t\tvar target = channel.target;\n\t\t\tvar name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n\t\t\tvar input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\tvar output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\tpendingSamplers.push( sampler );\n\t\t\tpendingTargets.push( target );\n\n\t\t}\n\n\t\treturn Promise.all( [\n\n\t\t\tPromise.all( pendingNodes ),\n\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\tPromise.all( pendingSamplers ),\n\t\t\tPromise.all( pendingTargets )\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar nodes = dependencies[ 0 ];\n\t\t\tvar inputAccessors = dependencies[ 1 ];\n\t\t\tvar outputAccessors = dependencies[ 2 ];\n\t\t\tvar samplers = dependencies[ 3 ];\n\t\t\tvar targets = dependencies[ 4 ];\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tvar node = nodes[ i ];\n\t\t\t\tvar inputAccessor = inputAccessors[ i ];\n\t\t\t\tvar outputAccessor = outputAccessors[ i ];\n\t\t\t\tvar sampler = samplers[ i ];\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\tnode.updateMatrix();\n\t\t\t\tnode.matrixAutoUpdate = true;\n\n\t\t\t\tvar TypedKeyframeTrack;\n\n\t\t\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.NumberKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.position:\n\t\t\t\t\tcase PATH_PROPERTIES.scale:\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.VectorKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar targetName = node.name ? node.name : node.uuid;\n\n\t\t\t\tvar interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;\n\n\t\t\t\tvar targetNames = [];\n\n\t\t\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\t\t\t// Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.\n\t\t\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\t\t\tif ( object.isMesh === true && object.morphTargetInfluences ) {\n\n\t\t\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetNames.push( targetName );\n\n\t\t\t\t}\n\n\t\t\t\tvar outputArray = outputAccessor.array;\n\n\t\t\t\tif ( outputAccessor.normalized ) {\n\n\t\t\t\t\tvar scale;\n\n\t\t\t\t\tif ( outputArray.constructor === Int8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 127;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 255;\n\n\t\t\t\t\t} else if ( outputArray.constructor == Int16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 32767;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 65535;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar scaled = new Float32Array( outputArray.length );\n\n\t\t\t\t\tfor ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutputArray = scaled;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar track = new TypedKeyframeTrack(\n\t\t\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\t\t\tinputAccessor.array,\n\t\t\t\t\t\toutputArray,\n\t\t\t\t\t\tinterpolation\n\t\t\t\t\t);\n\n\t\t\t\t\t// Override interpolation with custom factory method.\n\t\t\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\t\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t\t\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t\t\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t\t\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\t\t\t\t\treturn new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\t\t\t\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( track );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = animationDef.name ? animationDef.name : 'animation_' + animationIndex;\n\n\t\t\treturn new THREE.AnimationClip( name, undefined, tracks );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t * @param {number} nodeIndex\n\t * @return {Promise<THREE.Object3D>}\n\t */\n\tGLTFParser.prototype.loadNode = function ( nodeIndex ) {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar parser = this;\n\n\t\tvar meshReferences = json.meshReferences;\n\t\tvar meshUses = json.meshUses;\n\n\t\tvar nodeDef = json.nodes[ nodeIndex ];\n\n\t\treturn ( function () {\n\n\t\t\tvar pending = [];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\t\t\tvar node;\n\n\t\t\t\t\tif ( meshReferences[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\t\t\tvar instanceNum = meshUses[ nodeDef.mesh ] ++;\n\n\t\t\t\t\t\tnode = mesh.clone();\n\t\t\t\t\t\tnode.name += '_instance_' + instanceNum;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode = mesh;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\t\t\tfor ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.extensions\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending );\n\n\t\t}() ).then( function ( objects ) {\n\n\t\t\tvar node;\n\n\t\t\t// .isBone isn't in glTF spec. See .markDefs\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new THREE.Bone();\n\n\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\tnode = new THREE.Group();\n\n\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name ) {\n\n\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\tnode.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix4( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t * @param {number} sceneIndex\n\t * @return {Promise<THREE.Group>}\n\t */\n\tGLTFParser.prototype.loadScene = function () {\n\n\t\t// scene node hierachy builder\n\n\t\tfunction buildNodeHierachy( nodeId, parentObject, json, parser ) {\n\n\t\t\tvar nodeDef = json.nodes[ nodeId ];\n\n\t\t\treturn parser.getDependency( 'node', nodeId ).then( function ( node ) {\n\n\t\t\t\tif ( nodeDef.skin === undefined ) return node;\n\n\t\t\t\t// build skeleton here as well\n\n\t\t\t\tvar skinEntry;\n\n\t\t\t\treturn parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {\n\n\t\t\t\t\tskinEntry = skin;\n\n\t\t\t\t\tvar pendingJoints = [];\n\n\t\t\t\t\tfor ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tpendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.all( pendingJoints );\n\n\t\t\t\t} ).then( function ( jointNodes ) {\n\n\t\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\t\tif ( ! mesh.isMesh ) return;\n\n\t\t\t\t\t\tvar bones = [];\n\t\t\t\t\t\tvar boneInverses = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar jointNode = jointNodes[ j ];\n\n\t\t\t\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\t\t\t\tvar mat = new THREE.Matrix4();\n\n\t\t\t\t\t\t\t\tif ( skinEntry.inverseBindMatrices !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tmat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[ j ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} );\n\n\t\t\t} ).then( function ( node ) {\n\n\t\t\t\t// build node hierachy\n\n\t\t\t\tparentObject.add( node );\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( nodeDef.children ) {\n\n\t\t\t\t\tvar children = nodeDef.children;\n\n\t\t\t\t\tfor ( var i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar child = children[ i ];\n\t\t\t\t\t\tpending.push( buildNodeHierachy( child, node, json, parser ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn function loadScene( sceneIndex ) {\n\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar sceneDef = this.json.scenes[ sceneIndex ];\n\t\t\tvar parser = this;\n\n\t\t\t// Loader returns Group, not Scene.\n\t\t\t// See: https://github.com/mrdoob/three.js/issues/18342#issuecomment-578981172\n\t\t\tvar scene = new THREE.Group();\n\t\t\tif ( sceneDef.name ) scene.name = sceneDef.name;\n\n\t\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\t\tvar nodeIds = sceneDef.nodes || [];\n\n\t\t\tvar pending = [];\n\n\t\t\tfor ( var i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\t\tpending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\t\treturn scene;\n\n\t\t\t} );\n\n\t\t};\n\n\t}();\n\n\treturn GLTFLoader;\n\n} )();\n"],"names":["THREE","GLTFLoader","manager","Loader","call","dracoLoader","ddsLoader","GLTFRegistry","objects","get","key","add","object","remove","removeAll","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","resourcePath","scope","path","LoaderUtils","extractUrlBase","itemStart","_onError","e","console","error","itemError","itemEnd","loader","FileLoader","setPath","setResponseType","crossOrigin","setWithCredentials","data","parse","gltf","setDRACOLoader","setDDSLoader","content","extensions","magic","decodeText","Uint8Array","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","GLTFBinaryExtension","json","JSON","undefined","asset","version","Error","extensionsUsed","i","length","extensionName","extensionsRequired","KHR_LIGHTS_PUNCTUAL","GLTFLightsExtension","KHR_MATERIALS_CLEARCOAT","GLTFMaterialsClearcoatExtension","KHR_MATERIALS_UNLIT","GLTFMaterialsUnlitExtension","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","GLTFMaterialsPbrSpecularGlossinessExtension","KHR_DRACO_MESH_COMPRESSION","GLTFDracoMeshCompressionExtension","MSFT_TEXTURE_DDS","GLTFTextureDDSExtension","KHR_TEXTURE_TRANSFORM","GLTFTextureTransformExtension","KHR_MESH_QUANTIZATION","GLTFMeshQuantizationExtension","indexOf","warn","parser","GLTFParser","name","extension","lightDefs","lights","loadLight","lightIndex","lightNode","lightDef","color","Color","fromArray","range","type","DirectionalLight","target","position","set","PointLight","distance","SpotLight","spot","innerConeAngle","outerConeAngle","Math","PI","angle","penumbra","decay","intensity","Promise","resolve","getMaterialType","MeshBasicMaterial","extendParams","materialParams","materialDef","pending","opacity","metallicRoughness","pbrMetallicRoughness","Array","isArray","baseColorFactor","array","baseColorTexture","push","assignTexture","all","MeshPhysicalMaterial","clearcoatFactor","clearcoat","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughness","clearcoatRoughnessTexture","clearcoatNormalTexture","scale","clearcoatNormalScale","Vector2","BINARY_EXTENSION_CHUNK_TYPES","BIN","body","headerView","DataView","header","slice","getUint32","chunkView","chunkIndex","byteLength","chunkLength","chunkType","contentArray","BINARY_EXTENSION_HEADER_LENGTH","byteOffset","preload","GLTFMeshStandardSGMaterial","params","MeshStandardMaterial","isGLTFSpecularGlossinessMaterial","uniforms","specular","value","setHex","glossiness","specularMap","glossinessMap","_extraUniforms","onBeforeCompile","shader","uniformName","fragmentShader","replace","defineProperties","v","defines","USE_GLOSSINESSMAP","USE_ROUGHNESSMAP","metalness","roughness","metalnessMap","roughnessMap","setValues","specularGlossinessParams","pbrSpecularGlossiness","diffuseFactor","diffuseTexture","emissive","glossinessFactor","specularFactor","specularGlossinessTexture","specGlossMapDef","createMaterial","material","fog","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","TangentSpaceNormalMap","normalScale","displacementMap","displacementScale","displacementBias","alphaMap","envMap","envMapIntensity","refractionRatio","GLTFCubicSplineInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","Interpolant","decodePrimitive","primitive","bufferViewIndex","bufferView","gltfAttributeMap","attributes","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","attributeName","threeAttributeName","ATTRIBUTES","toLowerCase","accessorDef","accessors","componentType","WEBGL_COMPONENT_TYPES","normalized","getDependency","then","decodeDracoFile","geometry","attribute","extendTexture","texture","transform","clone","offset","rotation","repeat","texCoord","needsUpdate","copy","source","copySampleValue_","index","result","values","valueSize","beforeStart_","afterEnd_","interpolate_","i1","t0","t","t1","stride","stride2","stride3","td","p","pp","ppp","offset1","offset0","s2","s3","s0","s1","p0","m0","p1","m1","WEBGL_CONSTANTS","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Int8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","WEBGL_FILTERS","NearestFilter","LinearFilter","NearestMipmapNearestFilter","LinearMipmapNearestFilter","NearestMipmapLinearFilter","LinearMipmapLinearFilter","WEBGL_WRAPPINGS","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","WEBGL_TYPE_SIZES","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","PATH_PROPERTIES","translation","weights","INTERPOLATION","CUBICSPLINE","LINEAR","InterpolateLinear","STEP","InterpolateDiscrete","ALPHA_MODES","OPAQUE","MASK","BLEND","MIME_TYPE_FORMATS","RGBAFormat","RGBFormat","resolveURL","test","addUnknownExtensionsToUserData","knownExtensions","objectDef","userData","gltfExtensions","assignExtrasToUserData","gltfDef","extras","createAttributesKey","attributesKey","keys","sort","il","options","cache","primitiveCache","textureLoader","TextureLoader","setCrossOrigin","fileLoader","addPrimitiveAttributes","primitiveDef","gltfAttributeName","assignAttributeAccessor","accessorIndex","accessor","setAttribute","indices","setIndex","computeBounds","box","Box3","min","max","Vector3","targets","maxDisplacement","vector","setX","abs","setY","setZ","expandByVector","boundingBox","sphere","Sphere","getCenter","center","radius","distanceTo","boundingSphere","addMorphTargets","hasMorphPosition","hasMorphNormal","pendingPositionAccessors","pendingNormalAccessors","pendingAccessor","normal","morphPositions","morphNormals","morphAttributes","morphTargetsRelative","toTrianglesDrawMode","drawMode","getIndex","getAttribute","count","numberOfTriangles","newIndices","TriangleFanDrawMode","getX","newGeometry","markDefs","getDependencies","dependencies","scene","scenes","animations","cameras","catch","nodeDefs","nodes","skinDefs","skins","meshDefs","meshes","meshReferences","meshUses","skinIndex","skinLength","joints","isBone","nodeIndex","nodeLength","nodeDef","mesh","skin","isSkinnedMesh","cacheKey","dependency","loadScene","loadNode","loadMesh","loadAccessor","loadBufferView","loadBuffer","loadMaterial","loadTexture","loadSkin","loadAnimation","loadCamera","defs","def","bufferIndex","bufferDef","buffers","uri","reject","bufferViewDef","bufferViews","buffer","sparse","pendingBufferViews","bufferAttribute","itemSize","TypedArray","elementBytes","BYTES_PER_ELEMENT","itemBytes","byteStride","ibSlice","floor","ibCacheKey","ib","InterleavedBuffer","InterleavedBufferAttribute","BufferAttribute","itemSizeIndices","SCALAR","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","setW","textureIndex","URL","self","webkitURL","textureDef","textures","textureExtensions","sourceURI","images","isObjectURL","blob","Blob","mimeType","createObjectURL","getHandler","revokeObjectURL","flipY","format","sampler","samplers","magFilter","minFilter","wrapS","wrapT","mapName","mapDef","isCompressedTexture","assignFinalMaterial","useVertexTangents","tangent","useVertexColors","useFlatShading","useSkinning","useMorphTargets","useMorphNormals","isPoints","uuid","pointsMaterial","PointsMaterial","Material","sizeAttenuation","isLine","lineMaterial","LineBasicMaterial","cachedMaterial","skinning","vertexTangents","vertexColors","flatShading","morphTargets","uv2","uv","y","materialIndex","materialType","materials","materialExtensions","sgExtension","kmuExtension","metallicFactor","roughnessFactor","metallicRoughnessTexture","doubleSided","side","DoubleSide","alphaMode","transparent","depthWrite","alphaTest","alphaCutoff","normalTexture","occlusionTexture","strength","emissiveFactor","emissiveTexture","clearcoatExtension","encoding","sRGBEncoding","loadGeometries","primitives","geometryPromise","createPrimitiveKey","dracoExtension","mode","cached","promise","createDracoPrimitive","BufferGeometry","meshIndex","meshDef","depthTest","FrontSide","results","geometries","SkinnedMesh","Mesh","skinWeight","normalizeSkinWeights","TriangleStripDrawMode","LineSegments","Line","LineLoop","Points","updateMorphTargets","morphTargetInfluences","targetNames","morphTargetDictionary","group","Group","cameraIndex","camera","cameraDef","PerspectiveCamera","MathUtils","radToDeg","yfov","aspectRatio","znear","zfar","OrthographicCamera","xmag","ymag","skinDef","skinEntry","inverseBindMatrices","animationIndex","animationDef","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","channels","channel","node","id","input","parameters","output","inputAccessors","outputAccessors","tracks","inputAccessor","outputAccessor","updateMatrix","matrixAutoUpdate","TypedKeyframeTrack","NumberKeyframeTrack","QuaternionKeyframeTrack","VectorKeyframeTrack","targetName","interpolation","traverse","isMesh","outputArray","scaled","j","jl","track","createInterpolant","times","getValueSize","isInterpolantFactoryMethodGLTFCubicSpline","AnimationClip","instanceNum","o","light","Bone","Object3D","PropertyBinding","sanitizeNodeName","matrix","Matrix4","applyMatrix4","quaternion","sceneIndex","sceneDef","nodeIds","buildNodeHierachy","nodeId","parentObject","pendingJoints","jointNodes","bones","boneInverses","jointNode","mat","bind","Skeleton","matrixWorld","children","child"],"version":3,"file":"index.2f105777.js.map"}