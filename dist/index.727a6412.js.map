{"mappings":"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","sources":["<anon>","OrbitControls.js"],"sourcesContent":["/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */ // This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\nTHREE.OrbitControls = function(object, domElement) {\n    if (domElement === undefined) console.warn('THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.');\n    if (domElement === document) console.error('THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n    this.object = object;\n    this.domElement = domElement;\n    // Set to false to disable this control\n    this.enabled = true;\n    // \"target\" sets the location of focus, where the object orbits around\n    this.target = new THREE.Vector3();\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    // How far you can zoom in and out ( OrthographicCamera only )\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    this.minPolarAngle = 0; // radians\n    this.maxPolarAngle = Math.PI; // radians\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n    this.minAzimuthAngle = -Infinity; // radians\n    this.maxAzimuthAngle = Infinity; // radians\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    this.enableDamping = false;\n    this.dampingFactor = 0.05;\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n    this.enableZoom = true;\n    this.zoomSpeed = 1.0;\n    // Set to false to disable rotating\n    this.enableRotate = true;\n    this.rotateSpeed = 1.0;\n    // Set to false to disable panning\n    this.enablePan = true;\n    this.panSpeed = 1.0;\n    this.screenSpacePanning = false; // if true, pan in screen-space\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n    // Set to false to disable use of the keys\n    this.enableKeys = true;\n    // The four arrow keys\n    this.keys = {\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        BOTTOM: 40\n    };\n    // Mouse buttons\n    this.mouseButtons = {\n        LEFT: THREE.MOUSE.ROTATE,\n        MIDDLE: THREE.MOUSE.DOLLY,\n        RIGHT: THREE.MOUSE.PAN\n    };\n    // Touch fingers\n    this.touches = {\n        ONE: THREE.TOUCH.ROTATE,\n        TWO: THREE.TOUCH.DOLLY_PAN\n    };\n    // for reset\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.zoom0 = this.object.zoom;\n    //\n    // public methods\n    //\n    this.getPolarAngle = function() {\n        return spherical.phi;\n    };\n    this.getAzimuthalAngle = function() {\n        return spherical.theta;\n    };\n    this.saveState = function() {\n        scope.target0.copy(scope.target);\n        scope.position0.copy(scope.object.position);\n        scope.zoom0 = scope.object.zoom;\n    };\n    this.reset = function() {\n        scope.target.copy(scope.target0);\n        scope.object.position.copy(scope.position0);\n        scope.object.zoom = scope.zoom0;\n        scope.object.updateProjectionMatrix();\n        scope.dispatchEvent(changeEvent);\n        scope.update();\n        state = STATE.NONE;\n    };\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = function() {\n        var offset = new THREE.Vector3();\n        // so camera.up is the orbit axis\n        var quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));\n        var quatInverse = quat.clone().inverse();\n        var lastPosition = new THREE.Vector3();\n        var lastQuaternion = new THREE.Quaternion();\n        return function update() {\n            var position = scope.object.position;\n            offset.copy(position).sub(scope.target);\n            // rotate offset to \"y-axis-is-up\" space\n            offset.applyQuaternion(quat);\n            // angle from z-axis around y-axis\n            spherical.setFromVector3(offset);\n            if (scope.autoRotate && state === STATE.NONE) rotateLeft(getAutoRotationAngle());\n            if (scope.enableDamping) {\n                spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n            } else {\n                spherical.theta += sphericalDelta.theta;\n                spherical.phi += sphericalDelta.phi;\n            }\n            // restrict theta to be between desired limits\n            spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));\n            // restrict phi to be between desired limits\n            spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n            spherical.makeSafe();\n            spherical.radius *= scale;\n            // restrict radius to be between desired limits\n            spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));\n            // move target to panned location\n            if (scope.enableDamping === true) scope.target.addScaledVector(panOffset, scope.dampingFactor);\n            else scope.target.add(panOffset);\n            offset.setFromSpherical(spherical);\n            // rotate offset back to \"camera-up-vector-is-up\" space\n            offset.applyQuaternion(quatInverse);\n            position.copy(scope.target).add(offset);\n            scope.object.lookAt(scope.target);\n            if (scope.enableDamping === true) {\n                sphericalDelta.theta *= 1 - scope.dampingFactor;\n                sphericalDelta.phi *= 1 - scope.dampingFactor;\n                panOffset.multiplyScalar(1 - scope.dampingFactor);\n            } else {\n                sphericalDelta.set(0, 0, 0);\n                panOffset.set(0, 0, 0);\n            }\n            scale = 1;\n            // update condition is:\n            // min(camera displacement, camera rotation in radians)^2 > EPS\n            // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n            if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n                scope.dispatchEvent(changeEvent);\n                lastPosition.copy(scope.object.position);\n                lastQuaternion.copy(scope.object.quaternion);\n                zoomChanged = false;\n                return true;\n            }\n            return false;\n        };\n    }();\n    this.dispose = function() {\n        scope.domElement.removeEventListener('contextmenu', onContextMenu, false);\n        scope.domElement.removeEventListener('mousedown', onMouseDown, false);\n        scope.domElement.removeEventListener('wheel', onMouseWheel, false);\n        scope.domElement.removeEventListener('touchstart', onTouchStart, false);\n        scope.domElement.removeEventListener('touchend', onTouchEnd, false);\n        scope.domElement.removeEventListener('touchmove', onTouchMove, false);\n        document.removeEventListener('mousemove', onMouseMove, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n        scope.domElement.removeEventListener('keydown', onKeyDown, false);\n    //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    };\n    //\n    // internals\n    //\n    var scope = this;\n    var changeEvent = {\n        type: 'change'\n    };\n    var startEvent = {\n        type: 'start'\n    };\n    var endEvent = {\n        type: 'end'\n    };\n    var STATE = {\n        NONE: -1,\n        ROTATE: 0,\n        DOLLY: 1,\n        PAN: 2,\n        TOUCH_ROTATE: 3,\n        TOUCH_PAN: 4,\n        TOUCH_DOLLY_PAN: 5,\n        TOUCH_DOLLY_ROTATE: 6\n    };\n    var state = STATE.NONE;\n    var EPS = 0.000001;\n    // current position in spherical coordinates\n    var spherical = new THREE.Spherical();\n    var sphericalDelta = new THREE.Spherical();\n    var scale = 1;\n    var panOffset = new THREE.Vector3();\n    var zoomChanged = false;\n    var rotateStart = new THREE.Vector2();\n    var rotateEnd = new THREE.Vector2();\n    var rotateDelta = new THREE.Vector2();\n    var panStart = new THREE.Vector2();\n    var panEnd = new THREE.Vector2();\n    var panDelta = new THREE.Vector2();\n    var dollyStart = new THREE.Vector2();\n    var dollyEnd = new THREE.Vector2();\n    var dollyDelta = new THREE.Vector2();\n    function getAutoRotationAngle() {\n        return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n    }\n    function getZoomScale() {\n        return Math.pow(0.95, scope.zoomSpeed);\n    }\n    function rotateLeft(angle) {\n        sphericalDelta.theta -= angle;\n    }\n    function rotateUp(angle) {\n        sphericalDelta.phi -= angle;\n    }\n    var panLeft = function() {\n        var v = new THREE.Vector3();\n        return function panLeft(distance, objectMatrix) {\n            v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n            v.multiplyScalar(-distance);\n            panOffset.add(v);\n        };\n    }();\n    var panUp = function() {\n        var v = new THREE.Vector3();\n        return function panUp(distance, objectMatrix) {\n            if (scope.screenSpacePanning === true) v.setFromMatrixColumn(objectMatrix, 1);\n            else {\n                v.setFromMatrixColumn(objectMatrix, 0);\n                v.crossVectors(scope.object.up, v);\n            }\n            v.multiplyScalar(distance);\n            panOffset.add(v);\n        };\n    }();\n    // deltaX and deltaY are in pixels; right and down are positive\n    var pan = function() {\n        var offset = new THREE.Vector3();\n        return function pan(deltaX, deltaY) {\n            var element = scope.domElement;\n            if (scope.object.isPerspectiveCamera) {\n                // perspective\n                var position = scope.object.position;\n                offset.copy(position).sub(scope.target);\n                var targetDistance = offset.length();\n                // half of the fov is center to top of screen\n                targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);\n                // we use only clientHeight here so aspect ratio does not distort speed\n                panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n                panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n            } else if (scope.object.isOrthographicCamera) {\n                // orthographic\n                panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n                panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n            } else {\n                // camera neither orthographic nor perspective\n                console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n                scope.enablePan = false;\n            }\n        };\n    }();\n    function dollyOut(dollyScale) {\n        if (scope.object.isPerspectiveCamera) scale /= dollyScale;\n        else if (scope.object.isOrthographicCamera) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n        } else {\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n            scope.enableZoom = false;\n        }\n    }\n    function dollyIn(dollyScale) {\n        if (scope.object.isPerspectiveCamera) scale *= dollyScale;\n        else if (scope.object.isOrthographicCamera) {\n            scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n        } else {\n            console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n            scope.enableZoom = false;\n        }\n    }\n    //\n    // event callbacks - update the object state\n    //\n    function handleMouseDownRotate(event) {\n        rotateStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownDolly(event) {\n        dollyStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseDownPan(event) {\n        panStart.set(event.clientX, event.clientY);\n    }\n    function handleMouseMoveRotate(event) {\n        rotateEnd.set(event.clientX, event.clientY);\n        rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n        var element = scope.domElement;\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n        rotateStart.copy(rotateEnd);\n        scope.update();\n    }\n    function handleMouseMoveDolly(event) {\n        dollyEnd.set(event.clientX, event.clientY);\n        dollyDelta.subVectors(dollyEnd, dollyStart);\n        if (dollyDelta.y > 0) dollyOut(getZoomScale());\n        else if (dollyDelta.y < 0) dollyIn(getZoomScale());\n        dollyStart.copy(dollyEnd);\n        scope.update();\n    }\n    function handleMouseMovePan(event) {\n        panEnd.set(event.clientX, event.clientY);\n        panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n        pan(panDelta.x, panDelta.y);\n        panStart.copy(panEnd);\n        scope.update();\n    }\n    function handleMouseUp() {\n    // no-op\n    }\n    function handleMouseWheel(event) {\n        if (event.deltaY < 0) dollyIn(getZoomScale());\n        else if (event.deltaY > 0) dollyOut(getZoomScale());\n        scope.update();\n    }\n    function handleKeyDown(event) {\n        var needsUpdate = false;\n        switch(event.keyCode){\n            case scope.keys.UP:\n                pan(0, scope.keyPanSpeed);\n                needsUpdate = true;\n                break;\n            case scope.keys.BOTTOM:\n                pan(0, -scope.keyPanSpeed);\n                needsUpdate = true;\n                break;\n            case scope.keys.LEFT:\n                pan(scope.keyPanSpeed, 0);\n                needsUpdate = true;\n                break;\n            case scope.keys.RIGHT:\n                pan(-scope.keyPanSpeed, 0);\n                needsUpdate = true;\n                break;\n        }\n        if (needsUpdate) {\n            // prevent the browser from scrolling on cursor keys\n            event.preventDefault();\n            scope.update();\n        }\n    }\n    function handleTouchStartRotate(event) {\n        if (event.touches.length == 1) rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n        else {\n            var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n            var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n            rotateStart.set(x, y);\n        }\n    }\n    function handleTouchStartPan(event) {\n        if (event.touches.length == 1) panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n        else {\n            var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n            var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n            panStart.set(x, y);\n        }\n    }\n    function handleTouchStartDolly(event) {\n        var dx = event.touches[0].pageX - event.touches[1].pageX;\n        var dy = event.touches[0].pageY - event.touches[1].pageY;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        dollyStart.set(0, distance);\n    }\n    function handleTouchStartDollyPan(event) {\n        if (scope.enableZoom) handleTouchStartDolly(event);\n        if (scope.enablePan) handleTouchStartPan(event);\n    }\n    function handleTouchStartDollyRotate(event) {\n        if (scope.enableZoom) handleTouchStartDolly(event);\n        if (scope.enableRotate) handleTouchStartRotate(event);\n    }\n    function handleTouchMoveRotate(event) {\n        if (event.touches.length == 1) rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n        else {\n            var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n            var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n            rotateEnd.set(x, y);\n        }\n        rotateDelta.subVectors(rotateEnd, rotateStart).multiplyScalar(scope.rotateSpeed);\n        var element = scope.domElement;\n        rotateLeft(2 * Math.PI * rotateDelta.x / element.clientHeight); // yes, height\n        rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight);\n        rotateStart.copy(rotateEnd);\n    }\n    function handleTouchMovePan(event) {\n        if (event.touches.length == 1) panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n        else {\n            var x = 0.5 * (event.touches[0].pageX + event.touches[1].pageX);\n            var y = 0.5 * (event.touches[0].pageY + event.touches[1].pageY);\n            panEnd.set(x, y);\n        }\n        panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n        pan(panDelta.x, panDelta.y);\n        panStart.copy(panEnd);\n    }\n    function handleTouchMoveDolly(event) {\n        var dx = event.touches[0].pageX - event.touches[1].pageX;\n        var dy = event.touches[0].pageY - event.touches[1].pageY;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        dollyEnd.set(0, distance);\n        dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n        dollyOut(dollyDelta.y);\n        dollyStart.copy(dollyEnd);\n    }\n    function handleTouchMoveDollyPan(event) {\n        if (scope.enableZoom) handleTouchMoveDolly(event);\n        if (scope.enablePan) handleTouchMovePan(event);\n    }\n    function handleTouchMoveDollyRotate(event) {\n        if (scope.enableZoom) handleTouchMoveDolly(event);\n        if (scope.enableRotate) handleTouchMoveRotate(event);\n    }\n    function handleTouchEnd() {\n    // no-op\n    }\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n    function onMouseDown(event) {\n        if (scope.enabled === false) return;\n        // Prevent the browser from scrolling.\n        event.preventDefault();\n        // Manually set the focus since calling preventDefault above\n        // prevents the browser from setting it automatically.\n        scope.domElement.focus ? scope.domElement.focus() : window.focus();\n        var mouseAction;\n        switch(event.button){\n            case 0:\n                mouseAction = scope.mouseButtons.LEFT;\n                break;\n            case 1:\n                mouseAction = scope.mouseButtons.MIDDLE;\n                break;\n            case 2:\n                mouseAction = scope.mouseButtons.RIGHT;\n                break;\n            default:\n                mouseAction = -1;\n        }\n        switch(mouseAction){\n            case THREE.MOUSE.DOLLY:\n                if (scope.enableZoom === false) return;\n                handleMouseDownDolly(event);\n                state = STATE.DOLLY;\n                break;\n            case THREE.MOUSE.ROTATE:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (scope.enablePan === false) return;\n                    handleMouseDownPan(event);\n                    state = STATE.PAN;\n                } else {\n                    if (scope.enableRotate === false) return;\n                    handleMouseDownRotate(event);\n                    state = STATE.ROTATE;\n                }\n                break;\n            case THREE.MOUSE.PAN:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (scope.enableRotate === false) return;\n                    handleMouseDownRotate(event);\n                    state = STATE.ROTATE;\n                } else {\n                    if (scope.enablePan === false) return;\n                    handleMouseDownPan(event);\n                    state = STATE.PAN;\n                }\n                break;\n            default:\n                state = STATE.NONE;\n        }\n        if (state !== STATE.NONE) {\n            document.addEventListener('mousemove', onMouseMove, false);\n            document.addEventListener('mouseup', onMouseUp, false);\n            scope.dispatchEvent(startEvent);\n        }\n    }\n    function onMouseMove(event) {\n        if (scope.enabled === false) return;\n        event.preventDefault();\n        switch(state){\n            case STATE.ROTATE:\n                if (scope.enableRotate === false) return;\n                handleMouseMoveRotate(event);\n                break;\n            case STATE.DOLLY:\n                if (scope.enableZoom === false) return;\n                handleMouseMoveDolly(event);\n                break;\n            case STATE.PAN:\n                if (scope.enablePan === false) return;\n                handleMouseMovePan(event);\n                break;\n        }\n    }\n    function onMouseUp(event) {\n        if (scope.enabled === false) return;\n        handleMouseUp(event);\n        document.removeEventListener('mousemove', onMouseMove, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n        scope.dispatchEvent(endEvent);\n        state = STATE.NONE;\n    }\n    function onMouseWheel(event) {\n        if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;\n        event.preventDefault();\n        event.stopPropagation();\n        scope.dispatchEvent(startEvent);\n        handleMouseWheel(event);\n        scope.dispatchEvent(endEvent);\n    }\n    function onKeyDown(event) {\n        if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;\n        handleKeyDown(event);\n    }\n    function onTouchStart(event) {\n        if (scope.enabled === false) return;\n        event.preventDefault(); // prevent scrolling\n        switch(event.touches.length){\n            case 1:\n                switch(scope.touches.ONE){\n                    case THREE.TOUCH.ROTATE:\n                        if (scope.enableRotate === false) return;\n                        handleTouchStartRotate(event);\n                        state = STATE.TOUCH_ROTATE;\n                        break;\n                    case THREE.TOUCH.PAN:\n                        if (scope.enablePan === false) return;\n                        handleTouchStartPan(event);\n                        state = STATE.TOUCH_PAN;\n                        break;\n                    default:\n                        state = STATE.NONE;\n                }\n                break;\n            case 2:\n                switch(scope.touches.TWO){\n                    case THREE.TOUCH.DOLLY_PAN:\n                        if (scope.enableZoom === false && scope.enablePan === false) return;\n                        handleTouchStartDollyPan(event);\n                        state = STATE.TOUCH_DOLLY_PAN;\n                        break;\n                    case THREE.TOUCH.DOLLY_ROTATE:\n                        if (scope.enableZoom === false && scope.enableRotate === false) return;\n                        handleTouchStartDollyRotate(event);\n                        state = STATE.TOUCH_DOLLY_ROTATE;\n                        break;\n                    default:\n                        state = STATE.NONE;\n                }\n                break;\n            default:\n                state = STATE.NONE;\n        }\n        if (state !== STATE.NONE) scope.dispatchEvent(startEvent);\n    }\n    function onTouchMove(event) {\n        if (scope.enabled === false) return;\n        event.preventDefault(); // prevent scrolling\n        event.stopPropagation();\n        switch(state){\n            case STATE.TOUCH_ROTATE:\n                if (scope.enableRotate === false) return;\n                handleTouchMoveRotate(event);\n                scope.update();\n                break;\n            case STATE.TOUCH_PAN:\n                if (scope.enablePan === false) return;\n                handleTouchMovePan(event);\n                scope.update();\n                break;\n            case STATE.TOUCH_DOLLY_PAN:\n                if (scope.enableZoom === false && scope.enablePan === false) return;\n                handleTouchMoveDollyPan(event);\n                scope.update();\n                break;\n            case STATE.TOUCH_DOLLY_ROTATE:\n                if (scope.enableZoom === false && scope.enableRotate === false) return;\n                handleTouchMoveDollyRotate(event);\n                scope.update();\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    }\n    function onTouchEnd(event) {\n        if (scope.enabled === false) return;\n        handleTouchEnd(event);\n        scope.dispatchEvent(endEvent);\n        state = STATE.NONE;\n    }\n    function onContextMenu(event) {\n        if (scope.enabled === false) return;\n        event.preventDefault();\n    }\n    //\n    scope.domElement.addEventListener('contextmenu', onContextMenu, false);\n    scope.domElement.addEventListener('mousedown', onMouseDown, false);\n    scope.domElement.addEventListener('wheel', onMouseWheel, false);\n    scope.domElement.addEventListener('touchstart', onTouchStart, false);\n    scope.domElement.addEventListener('touchend', onTouchEnd, false);\n    scope.domElement.addEventListener('touchmove', onTouchMove, false);\n    scope.domElement.addEventListener('keydown', onKeyDown, false);\n    // make sure element can receive keys.\n    if (scope.domElement.tabIndex === -1) scope.domElement.tabIndex = 0;\n    // force an update at start\n    this.update();\n};\nTHREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\nTHREE.MapControls = function(object, domElement) {\n    THREE.OrbitControls.call(this, object, domElement);\n    this.mouseButtons.LEFT = THREE.MOUSE.PAN;\n    this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n    this.touches.ONE = THREE.TOUCH.PAN;\n    this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n};\nTHREE.MapControls.prototype = Object.create(THREE.EventDispatcher.prototype);\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n\n//# sourceMappingURL=index.727a6412.js.map\n","/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n"],"names":["THREE","OrbitControls","object","domElement","undefined","console","warn","document","error","enabled","target","Vector3","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","Math","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","position","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","copy","reset","updateProjectionMatrix","dispatchEvent","changeEvent","update","state","STATE","NONE","offset","quatInverse","quat","Quaternion","setFromUnitVectors","up","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","max","min","makeSafe","radius","scale","addScaledVector","panOffset","add","setFromSpherical","lookAt","multiplyScalar","set","zoomChanged","distanceToSquared","EPS","dot","quaternion","dispose","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","v","type","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","pow","angle","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","isPerspectiveCamera","targetDistance","length","tan","fov","clientHeight","matrix","isOrthographicCamera","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","event","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","x","y","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","mouseAction","preventDefault","focus","window","button","ctrlKey","metaKey","shiftKey","addEventListener","stopPropagation","handleKeyDown","needsUpdate","keyCode","DOLLY_ROTATE","tabIndex","prototype","Object","create","EventDispatcher","constructor","MapControls","call"],"version":3,"file":"index.727a6412.js.map"}