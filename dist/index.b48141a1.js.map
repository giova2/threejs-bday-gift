{"mappings":"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","sources":["<anon>","main.js","init.js","initContent.js","pointer.js","Raycaster.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nconst $f6aeaa3031b25352$var$Ray = THREE.Ray;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */ function $f6aeaa3031b25352$export$8b7aaceff00bd2f(origin, direction, near, far) {\n    this.ray = new $f6aeaa3031b25352$var$Ray(origin, direction);\n    // direction is assumed to be normalized (for accurate distance calculations)\n    this.near = near || 0;\n    this.far = far || Infinity;\n    this.params = {\n        Mesh: {},\n        Line: {},\n        LOD: {},\n        Points: {\n            threshold: 1\n        },\n        Sprite: {}\n    };\n    Object.defineProperties(this.params, {\n        PointCloud: {\n            get: function() {\n                console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n                return this.Points;\n            }\n        }\n    });\n}\nfunction $f6aeaa3031b25352$var$ascSort(a, b) {\n    return a.distance - b.distance;\n}\nlet $f6aeaa3031b25352$var$count = 0;\nfunction $f6aeaa3031b25352$var$intersectObject(object, raycaster, intersects, recursive) {\n    if (object.visible === false) return;\n    if (raycaster.recurseFilter && !raycaster.recurseFilter(object)) return;\n    $f6aeaa3031b25352$var$count++;\n    object.raycast(raycaster, intersects);\n    if (recursive === true) {\n        var children = object.children;\n        for(var i = 0, l = children.length; i < l; i++)$f6aeaa3031b25352$var$intersectObject(children[i], raycaster, intersects, true);\n    }\n}\nObject.assign($f6aeaa3031b25352$export$8b7aaceff00bd2f.prototype, {\n    linePrecision: 1,\n    set: function(origin, direction) {\n        // direction is assumed to be normalized (for accurate distance calculations)\n        this.ray.set(origin, direction);\n    },\n    setFromCamera: function(coords, camera) {\n        if (camera && camera.isPerspectiveCamera) {\n            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n            this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n        } else if (camera && camera.isOrthographicCamera) {\n            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        } else console.error('THREE.Raycaster: Unsupported camera type.');\n    },\n    intersectObject: function(object, recursive, optionalTarget) {\n        var intersects = optionalTarget || [];\n        $f6aeaa3031b25352$var$intersectObject(object, this, intersects, recursive);\n        intersects.sort($f6aeaa3031b25352$var$ascSort);\n        return intersects;\n    },\n    intersectObjects: function(objects, recursive, optionalTarget) {\n        $f6aeaa3031b25352$var$count = 0;\n        var intersects = optionalTarget || [];\n        if (Array.isArray(objects) === false) {\n            console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n            return intersects;\n        }\n        for(var i = 0, l = objects.length; i < l; i++)$f6aeaa3031b25352$var$intersectObject(objects[i], this, intersects, recursive);\n        // console.log(\"intersected objects\",count)\n        intersects.sort($f6aeaa3031b25352$var$ascSort);\n        return intersects;\n    }\n});\n\n\nconst $8d666930dd10096c$export$9e9acba13cf5a64 = \"enter\";\nconst $8d666930dd10096c$export$c3e4e699c92e6b94 = \"exit\";\nconst $8d666930dd10096c$export$5e4b584171f643c2 = \"click\";\nconst $8d666930dd10096c$export$5c736a62aeec4dde = \"move\";\nconst $8d666930dd10096c$export$36aa50e6a49b087e = \"press\";\nconst $8d666930dd10096c$export$4a0c003eebde8c92 = \"release\";\n// import * as THREE from \"./node_modules/three/build/three.module.js\"\nconst $8d666930dd10096c$var$toRad = (degrees)=>degrees * Math.PI / 180;\nclass $8d666930dd10096c$export$b56007f12edf0c17 {\n    constructor(scene, renderer, camera, opts){\n        this.listeners = {};\n        this.opts = opts || {};\n        this.opts.enableLaser = opts.enableLaser !== undefined ? opts.enableLaser : true;\n        this.opts.laserLength = opts.laserLength !== undefined ? opts.laserLength : 3;\n        this.opts.enableMoveEvents = opts.enableMoveEvents !== undefined ? opts.enableMoveEvents : true;\n        this.scene = scene;\n        this.renderer = renderer;\n        this.canvas = renderer.domElement;\n        this.camera = camera;\n        this.raycaster = new (0, $f6aeaa3031b25352$export$8b7aaceff00bd2f)();\n        this.waitcb = null;\n        this.hoverTarget = null;\n        this.intersectionFilter = this.opts.intersectionFilter || (()=>true);\n        this.raycaster.recurseFilter = this.opts.recurseFilter || (()=>true);\n        // setup the mouse\n        this.canvas.addEventListener('mousemove', this.mouseMove.bind(this));\n        this.canvas.addEventListener('click', this.mouseClick.bind(this));\n        this.canvas.addEventListener('mousedown', this.mouseDown.bind(this));\n        this.canvas.addEventListener('mouseup', this.mouseUp.bind(this));\n        //touch events\n        this.canvas.addEventListener('touchstart', this.touchStart.bind(this));\n        this.canvas.addEventListener('touchmove', this.touchMove.bind(this));\n        this.canvas.addEventListener('touchend', this.touchEnd.bind(this));\n        // setup the VR controllers\n        this.controller1 = this.renderer.vr.getController(0);\n        this.controller1.addEventListener('selectstart', this.controllerSelectStart.bind(this));\n        this.controller1.addEventListener('selectend', this.controllerSelectEnd.bind(this));\n        this.controller2 = this.renderer.vr.getController(1);\n        this.controller2.addEventListener('selectstart', this.controllerSelectStart.bind(this));\n        this.controller2.addEventListener('selectend', this.controllerSelectEnd.bind(this));\n        this.setMouseSimulatesController(opts.mouseSimulatesController);\n        this.scene.add(this.controller1);\n        this.scene.add(this.controller2);\n        if (this.opts.enableLaser) {\n            //create visible lines for the two controllers\n            const geometry = new THREE.BufferGeometry();\n            geometry.addAttribute('position', new THREE.Float32BufferAttribute([\n                0,\n                0,\n                0,\n                0,\n                0,\n                -this.opts.laserLength\n            ], 3));\n            geometry.addAttribute('color', new THREE.Float32BufferAttribute([\n                1.0,\n                0.5,\n                0.5,\n                0,\n                0,\n                0\n            ], 3));\n            const material = new THREE.LineBasicMaterial({\n                vertexColors: false,\n                color: 0x880000,\n                linewidth: 5,\n                blending: THREE.NormalBlending\n            });\n            this.controller1.add(new THREE.Line(geometry, material));\n            this.controller2.add(new THREE.Line(geometry, material));\n        }\n    }\n    //override this to do something w/ the controllers on every tick\n    tick(time) {\n        this.controllerMove(this.controller1);\n        this.controllerMove(this.controller2);\n    }\n    fire(obj, type, payload) {\n        obj.dispatchEvent(payload);\n    }\n    fireSelf(type, payload) {\n        if (!this.listeners[type]) return;\n        this.listeners[type].forEach((cb)=>cb(payload));\n    }\n    //make the camera follow the mouse in desktop mode. Helps w/ debugging.\n    cameraFollowMouse(e) {\n        const bounds = this.canvas.getBoundingClientRect();\n        const ry = (e.clientX - bounds.left) / bounds.width * 2 - 1;\n        const rx = 1 - (e.clientY - bounds.top) / bounds.height * 2;\n        this.camera.rotation.y = -ry * 2;\n        this.camera.rotation.x = +rx;\n    }\n    mouseMove(e) {\n        const mouse = new THREE.Vector2();\n        const bounds = this.canvas.getBoundingClientRect();\n        mouse.x = (e.clientX - bounds.left) / bounds.width * 2 - 1;\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1;\n        this.raycaster.setFromCamera(mouse, this.camera);\n        if (this.opts.mouseSimulatesController) {\n            //create target from the mouse controls\n            const target = new THREE.Vector3();\n            target.x = mouse.x;\n            target.y = mouse.y;\n            target.z = -3;\n            //convert to camera space\n            target.add(this.camera.position);\n            this.spot.position.copy(target);\n            this.controller1.lookAt(target);\n            //have to flip over because the UP is down on controllers\n            const flip = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), $8d666930dd10096c$var$toRad(180));\n            this.controller1.quaternion.multiply(flip);\n        }\n        this._processMove();\n        if (this.opts.cameraFollowMouse) this.cameraFollowMouse(e);\n    }\n    touchStart(e) {\n        e.preventDefault();\n        if (e.changedTouches.length <= 0) return;\n        const tch = e.changedTouches[0];\n        const mouse = new THREE.Vector2();\n        const bounds = this.canvas.getBoundingClientRect();\n        mouse.x = (tch.clientX - bounds.left) / bounds.width * 2 - 1;\n        mouse.y = -((tch.clientY - bounds.top) / bounds.height) * 2 + 1;\n        this.raycaster.setFromCamera(mouse, this.camera);\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        intersects.forEach((it)=>{\n            this.fire(it.object, $8d666930dd10096c$export$36aa50e6a49b087e, {\n                type: $8d666930dd10096c$export$36aa50e6a49b087e\n            });\n        });\n    }\n    touchMove(e) {\n        e.preventDefault();\n        if (e.changedTouches.length <= 0) return;\n        const tch = e.changedTouches[0];\n        const mouse = new THREE.Vector2();\n        const bounds = this.canvas.getBoundingClientRect();\n        mouse.x = (tch.clientX - bounds.left) / bounds.width * 2 - 1;\n        mouse.y = -((tch.clientY - bounds.top) / bounds.height) * 2 + 1;\n        this.raycaster.setFromCamera(mouse, this.camera);\n        this._processMove();\n    }\n    touchEnd(e) {\n        e.preventDefault();\n        if (e.changedTouches.length <= 0) return;\n        const tch = e.changedTouches[0];\n        const mouse = new THREE.Vector2();\n        const bounds = this.canvas.getBoundingClientRect();\n        mouse.x = (tch.clientX - bounds.left) / bounds.width * 2 - 1;\n        mouse.y = -((tch.clientY - bounds.top) / bounds.height) * 2 + 1;\n        this.raycaster.setFromCamera(mouse, this.camera);\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        intersects.forEach((it)=>{\n            this.fire(it.object, $8d666930dd10096c$export$4a0c003eebde8c92, {\n                type: $8d666930dd10096c$export$4a0c003eebde8c92,\n                point: it.point\n            });\n        });\n        this._processClick();\n    }\n    controllerMove(controller) {\n        if (!controller.visible) return;\n        const c = controller;\n        const dir = new THREE.Vector3(0, 0, -1);\n        dir.applyQuaternion(c.quaternion);\n        this.raycaster.set(c.position, dir);\n        this._processMove();\n    }\n    _processMove() {\n        if (!this.opts.enableMoveEvents) return;\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        if (intersects.length === 0 && this.hoverTarget) {\n            this.fire(this.hoverTarget, $8d666930dd10096c$export$c3e4e699c92e6b94, {\n                type: $8d666930dd10096c$export$c3e4e699c92e6b94\n            });\n            this.hoverTarget = null;\n        }\n        if (intersects.length >= 1) {\n            const it = intersects[0];\n            const obj = it.object;\n            if (!obj) return;\n            this.fire(obj, $8d666930dd10096c$export$5c736a62aeec4dde, {\n                type: $8d666930dd10096c$export$5c736a62aeec4dde,\n                point: it.point,\n                intersection: it\n            });\n            if (obj === this.hoverTarget) ;\n            else {\n                if (this.hoverTarget) this.fire(this.hoverTarget, $8d666930dd10096c$export$c3e4e699c92e6b94, {\n                    type: $8d666930dd10096c$export$c3e4e699c92e6b94\n                });\n                this.hoverTarget = obj;\n                this.fire(this.hoverTarget, $8d666930dd10096c$export$9e9acba13cf5a64, {\n                    type: $8d666930dd10096c$export$9e9acba13cf5a64\n                });\n            }\n        }\n    }\n    _processClick() {\n        if (this.waitcb) {\n            this.waitcb();\n            this.waitcb = null;\n            return;\n        }\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        if (intersects.length > 0) {\n            const it = intersects[0];\n            this.fire(it.object, $8d666930dd10096c$export$5e4b584171f643c2, {\n                type: $8d666930dd10096c$export$5e4b584171f643c2,\n                point: it.point,\n                intersection: it\n            });\n        }\n        this.fireSelf($8d666930dd10096c$export$5e4b584171f643c2, {});\n    }\n    mouseClick(e) {\n        const mouse = new THREE.Vector2();\n        const bounds = this.canvas.getBoundingClientRect();\n        mouse.x = (e.clientX - bounds.left) / bounds.width * 2 - 1;\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1;\n        this.raycaster.setFromCamera(mouse, this.camera);\n        this._processClick();\n    }\n    mouseDown(e) {\n        const mouse = new THREE.Vector2();\n        const bounds = this.canvas.getBoundingClientRect();\n        mouse.x = (e.clientX - bounds.left) / bounds.width * 2 - 1;\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1;\n        this.raycaster.setFromCamera(mouse, this.camera);\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        intersects.forEach((it)=>{\n            this.fire(it.object, $8d666930dd10096c$export$36aa50e6a49b087e, {\n                type: $8d666930dd10096c$export$36aa50e6a49b087e,\n                point: it.point,\n                intersection: it\n            });\n        });\n    }\n    mouseUp(e) {\n        const mouse = new THREE.Vector2();\n        const bounds = this.canvas.getBoundingClientRect();\n        mouse.x = (e.clientX - bounds.left) / bounds.width * 2 - 1;\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1;\n        this.raycaster.setFromCamera(mouse, this.camera);\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        intersects.forEach((it)=>{\n            this.fire(it.object, $8d666930dd10096c$export$4a0c003eebde8c92, {\n                type: $8d666930dd10096c$export$4a0c003eebde8c92,\n                point: it.point,\n                intersection: it\n            });\n        });\n    }\n    controllerSelectStart(e) {\n        e.target.userData.isSelecting = true;\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        intersects.forEach((it)=>{\n            this.fire(it.object, $8d666930dd10096c$export$36aa50e6a49b087e, {\n                type: $8d666930dd10096c$export$36aa50e6a49b087e,\n                point: it.point,\n                intersection: it\n            });\n        });\n    }\n    controllerSelectEnd(e) {\n        e.target.userData.isSelecting = false;\n        const c = e.target;\n        const dir = new THREE.Vector3(0, 0, -1);\n        dir.applyQuaternion(c.quaternion);\n        this.raycaster.set(c.position, dir);\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true).filter((it)=>this.intersectionFilter(it.object));\n        intersects.forEach((it)=>{\n            this.fire(it.object, $8d666930dd10096c$export$4a0c003eebde8c92, {\n                type: $8d666930dd10096c$export$4a0c003eebde8c92,\n                point: it.point\n            });\n        });\n        this._processClick();\n    }\n    waitSceneClick(cb) {\n        this.waitcb = cb;\n    }\n    on(type, cb) {\n        if (!this.listeners[type]) this.listeners[type] = [];\n        this.listeners[type].push(cb);\n    }\n    off(type, cb) {\n        this.listeners[type] = this.listeners[type].filter((c)=>c !== cb);\n    }\n    setMouseSimulatesController(val) {\n        this.opts.mouseSimulatesController = val;\n        if (this.opts.mouseSimulatesController) {\n            this.controller1 = new THREE.Group();\n            this.controller1.position.set(0, 1, -2);\n            this.controller1.quaternion.setFromUnitVectors(THREE.Object3D.DefaultUp, new THREE.Vector3(0, 0, 1));\n            this.spot = new THREE.Mesh(new THREE.SphereBufferGeometry(0.1), new THREE.MeshLambertMaterial({\n                color: 'red'\n            }));\n            this.scene.add(this.spot);\n        }\n    }\n}\n\n\n\nvar $7Pul0 = parcelRequire(\"7Pul0\");\nconst $08c298cfc32018b5$var$on = (elem, type, cb)=>elem.addEventListener(type, cb);\nconst $08c298cfc32018b5$export$dcafbe2feb5040aa = (scene, camera, renderer)=>{\n    const audiosSrc = {\n        sunshine: {\n            src: './assets/audio/sunshine.mp3'\n        },\n        crowd: {\n            src: './assets/audio/happy-birthday-crowd.mp3'\n        },\n        applause: {\n            src: './assets/audio/small-group-applauding.wav'\n        },\n        cheers: {\n            src: './assets/audio/cheers.wav'\n        },\n        hidden1: {\n            src: './assets/audio/happy-birthday-music.mp3'\n        },\n        aleatorio: {\n            src: './assets/audio/Hidden-message-birthday.mp3'\n        },\n        cumple: {\n            src: './assets/audio/happy-birthday-music.mp3'\n        }\n    };\n    //set the background color of the scene\n    let pointer;\n    const stage = new THREE.Group();\n    //load a cat texture\n    const texture_loader = new THREE.TextureLoader();\n    const gltf_loader = new THREE.GLTFLoader();\n    gltf_loader.load('./assets/birthdaycard.glb', (model)=>{\n        model.scene.position.x = -1;\n        model.scene.position.y = 0;\n        model.scene.position.z = -1;\n        stage.add(model.scene);\n    });\n    //a standard light\n    // Luces\n    const light = new THREE.DirectionalLight(0xffffff, 1.0);\n    light.position.set(0, 10, 25).normalize();\n    stage.add(light);\n    const amb = new THREE.AmbientLight(0xffffff, 0.3);\n    stage.add(amb);\n    const point = new THREE.PointLight(0xffffff, 1.5);\n    point.position.set(0.15, 2.1, -5.8);\n    stage.add(point);\n    const text_loader = new THREE.TTFLoader();\n    text_loader.load(\"./assets/Vollkorn-BlackItalic.ttf\", (data)=>{\n        const font = new THREE.FontLoader().parse(data);\n        const geo = new THREE.TextBufferGeometry(\"Happy Birthday [name]!\", {\n            font: font,\n            size: 0.8,\n            height: 0.2,\n            bevelEnabled: false,\n            bevelThickness: 0.2,\n            bevelSize: 0.05\n        });\n        geo.center();\n        const mesh = new THREE.Mesh(geo, new THREE.MeshStandardMaterial({\n            color: '#ff11ff',\n            metalness: 0.3,\n            roughness: 0.3\n        }));\n        mesh.position.set(0, 3.5, -4);\n        gsap.to(mesh.scale, 2, {\n            x: 1.5,\n            y: 1.5,\n            z: 1.5,\n            ease: \"back.in(1.7)\",\n            yoyo: true,\n            repeat: -1\n        });\n        stage.add(mesh);\n    });\n    // enable stats visible inside VR\n    stage.add(camera);\n    //class which handles mouse and VR controller\n    pointer = new (0, $8d666930dd10096c$export$b56007f12edf0c17)(stage, renderer, camera, {\n        //Pointer searches everything in the scene by default\n        //override this to match just certain things\n        intersectionFilter: (o)=>o.userData.clickable,\n        //make the camera pan when moving the mouse. good for simulating head turning on desktop\n        cameraFollowMouse: false,\n        // set to true to move the controller node forward and tilt with the mouse.\n        // good for testing VR controls on desktop\n        mouseSimulatesController: false\n    });\n    const targets = [];\n    //Eventos\n    var domEvents = new THREEx.DomEvents(camera, renderer.domElement);\n    // objetos\n    var geometryParams = [\n        2,\n        2,\n        2\n    ];\n    var materialParams = {\n        color: 0xFFCC00\n    };\n    const quantity = 50;\n    let cubosEntrada = (0, $7Pul0.randomMeshes)(scene, geometryParams, materialParams, domEvents, quantity);\n    const cubos = (0, $7Pul0.agregarCubos)(scene, texture_loader);\n    const piramides = (0, $7Pul0.agregarPiramides)(scene, domEvents);\n    // creamos una esfera\n    const target1 = new THREE.Mesh(new THREE.SphereGeometry(0.25), new THREE.MeshLambertMaterial({\n        color: 'red'\n    }));\n    // controls.target.set( 0, 3, -4 );\n    target1.position.set(0, 1, -6);\n    target1.name = 'cake';\n    targets.push(target1);\n    const sol = new THREE.Mesh(new THREE.SphereGeometry(2.5), new THREE.MeshLambertMaterial({\n        color: 'yellow'\n    }));\n    // controls.target.set( 0, 3, -4 );\n    sol.position.set(-7, 9, -25);\n    sol.name = 'sol';\n    targets.push(sol);\n    //DEFINIMOS LA BOLA CENTRAL DEL MAPA\n    const bola = new THREE.Mesh(new THREE.SphereGeometry(0.25), new THREE.MeshLambertMaterial({\n        color: 'blue'\n    }));\n    bola.position.set(0, 1.5, 0);\n    bola.name = 'cumple';\n    gsap.to(bola.scale, 2, {\n        x: 3,\n        y: 3,\n        z: 3,\n        ease: \"power2.inOut\",\n        yoyo: true,\n        repeat: -1\n    });\n    targets.push(bola);\n    targets.forEach((target)=>{\n        target.userData.clickable = true;\n        stage.add(target);\n        $08c298cfc32018b5$var$on(target, 'click', (e)=>{\n            // stage.position.x = -e.target.position.x\n            // stage.position.z = -e.target.position.z\n            if (e.target.name == \"cake\") audioAleatorio.play();\n            if (e.target.name == \"cumple\") {\n                const delay = (0, $7Pul0.despejarEntrada)(cubosEntrada);\n                (0, $7Pul0.acercarBolaAzul)(camera.position, delay);\n                audioCumple.play();\n            }\n            if (e.target.name == \"sol\") // audioAleatorio.play();\n            audioSunshine.play();\n        });\n    });\n    cubos.forEach((cubo, index)=>{\n        cubo.userData.clickable = true;\n        stage.add(cubo);\n        $08c298cfc32018b5$var$on(cubo, 'click', (e)=>{\n            if (index == 0) audioCheers.play();\n            if (index == 1) audioCrowd.play();\n            if (index == 2) audioApplause.play();\n        });\n    });\n    scene.add(stage);\n    const audioListener = new THREE.AudioListener();\n    camera.add(audioListener);\n    const audioAleatorio = new THREE.Audio(audioListener);\n    const audioCrowd = new THREE.Audio(audioListener);\n    const audioApplause = new THREE.Audio(audioListener);\n    const audioCheers = new THREE.Audio(audioListener);\n    const audioSunshine = new THREE.Audio(audioListener);\n    const audioHidden1 = new THREE.Audio(audioListener);\n    const audioCumple = new THREE.Audio(audioListener);\n    const audioLoader = new THREE.AudioLoader();\n    audioLoader.load(audiosSrc.hidden1.src, (mp4)=>{\n        audioHidden1.setBuffer(mp4);\n        audioHidden1.setVolume(0.4);\n    });\n    audioLoader.load(audiosSrc.cumple.src, (mp4)=>{\n        audioCumple.setBuffer(mp4);\n    });\n    audioLoader.load(audiosSrc.aleatorio.src, (mp4)=>{\n        audioAleatorio.setBuffer(mp4);\n    });\n    audioLoader.load(audiosSrc.crowd.src, (mp4)=>{\n        audioCrowd.setBuffer(mp4);\n        audioCrowd.setVolume(0.8);\n    });\n    audioLoader.load(audiosSrc.applause.src, (mp4)=>{\n        audioApplause.setBuffer(mp4);\n        audioApplause.setVolume(1.3);\n    });\n    audioLoader.load(audiosSrc.cheers.src, (mp4)=>{\n        audioCheers.setBuffer(mp4);\n        audioCheers.setVolume(0.8);\n    });\n    audioLoader.load(audiosSrc.sunshine.src, (mp4)=>{\n        audioSunshine.setBuffer(mp4);\n        audioSunshine.setVolume(1.2);\n    });\n    const audiosFiles = {\n        sunshine: audioSunshine,\n        crowd: audioCrowd,\n        applause: audioApplause,\n        cheers: audioCheers,\n        hidden1: audioHidden1,\n        aleatorio: audioAleatorio,\n        cumple: audioCumple\n    };\n    scene.add(new THREE.Mesh(new THREE.SphereGeometry(30), new THREE.MeshLambertMaterial({\n        color: 'white',\n        map: texture_loader.load('assets/sky.jpg'),\n        side: THREE.BackSide\n    })));\n    return {\n        cubosEntrada: cubosEntrada,\n        cubos: cubos,\n        secreto: target1,\n        bola: bola,\n        piramides: piramides,\n        audios: audiosFiles\n    };\n};\n\n\n\n\nvar $7Pul0 = parcelRequire(\"7Pul0\");\nconst $9495dc782b1de45f$var$$ = (sel)=>document.querySelector(sel);\nconst $9495dc782b1de45f$export$70cebd2f263e5940 = ()=>{\n    //create DIV for the canvas\n    const container = document.createElement('div');\n    document.body.appendChild(container);\n    const canvas = document.querySelector('#canvas');\n    const renderer = new THREE.WebGLRenderer({\n        canvas: canvas,\n        logarithmicDepthBuffer: true,\n        antialias: true\n    });\n    const fov = 70;\n    const aspect = window.innerWidth / window.innerHeight; // 2 is the canvas default\n    const near = 0.1;\n    const far = 50;\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.z = 25;\n    camera.position.y = 6;\n    const scene = new THREE.Scene();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    container.appendChild(renderer.domElement);\n    const controls = new THREE.OrbitControls(camera, renderer.domElement);\n    controls.target.set(0, 1, -5.3);\n    controls.minDistance = 0.2;\n    controls.maxDistance = 25;\n    //CON ESTO LO QUE HACEMOS ES LIMITAR LA ORBITA A EL SUELO, EL RANGO VA DE 0 A PI SIENDO 0 LA VISTA DESDE ARRIBA Y PI LA VISTA DESDE ABAJO\n    controls.maxPolarAngle = Math.PI / 2;\n    let objects = (0, $08c298cfc32018b5$export$dcafbe2feb5040aa)(scene, camera, renderer);\n    window.addEventListener('resize', ()=>{\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n    THREE.DefaultLoadingManager.onStart = (url, loaded, total)=>{\n    // console.log(`loading ${url}.  loaded ${loaded} of ${total}`)\n    };\n    THREE.DefaultLoadingManager.onLoad = ()=>{\n        $9495dc782b1de45f$var$$('#loading-indicator').style.display = 'none';\n        $9495dc782b1de45f$var$$('#click-to-play').style.display = 'block';\n        const overlay = $9495dc782b1de45f$var$$('#overlay');\n        const callback = ()=>{\n            (0, $7Pul0.addAnimationHide)(document.body.querySelector(\".container-marquesina\"));\n        };\n        marquesina(callback);\n        $9495dc782b1de45f$var$$(\"#click-to-play\").getElementsByTagName('button');\n        document.querySelectorAll(\"#click-to-play button\").forEach((elem)=>{\n            elem.addEventListener('click', (e)=>{\n                (0, $7Pul0.addAnimationHide)(overlay);\n                objects.audios.cumple.play();\n                setTimeout(()=>{\n                    objects.audios.crowd.play();\n                }, 12000);\n                (0, $efd3ba4ec2608b1d$export$a8b500dc61192962)(camera, e.target.value);\n            });\n        });\n        document.body.querySelector('#volver').addEventListener('click', ()=>{\n            (0, $7Pul0.showElem)(overlay);\n        }, false);\n        document.body.querySelector('#clue').addEventListener('click', ()=>{\n            if (Swal) Swal.fire({\n                title: 'A clue!',\n                text: 'Look inside the cake! You can move around by clicking and dragging! Zoom in with the wheel of your mouse!',\n                icon: 'warning',\n                confirmButtonText: 'Ok'\n            });\n            else alert('Look inside the cake!');\n        }, false);\n    };\n    THREE.DefaultLoadingManager.onProgress = (url, loaded, total)=>{\n        // console.log(`prog ${url}.  loaded ${loaded} of ${total}`)\n        $9495dc782b1de45f$var$$(\"#progress\").setAttribute('value', 100 * (loaded / total));\n    };\n    THREE.DefaultLoadingManager.onError = (url)=>{\n    // console.log(`error loading ${url}`)\n    };\n    return [\n        renderer,\n        scene,\n        camera,\n        controls,\n        objects\n    ];\n};\n\n\n\nvar $7Pul0 = parcelRequire(\"7Pul0\");\n\nvar $efd3ba4ec2608b1d$var$renderer, $efd3ba4ec2608b1d$var$scene, $efd3ba4ec2608b1d$var$camera, $efd3ba4ec2608b1d$var$controls, $efd3ba4ec2608b1d$var$objects;\n[$efd3ba4ec2608b1d$var$renderer, $efd3ba4ec2608b1d$var$scene, $efd3ba4ec2608b1d$var$camera, $efd3ba4ec2608b1d$var$controls, $efd3ba4ec2608b1d$var$objects] = (0, $9495dc782b1de45f$export$70cebd2f263e5940)();\n// capturador de rayos que nos sirve para interceptar objetos con el mouse\n{\n    const color = 0xFFFFFF; // white\n    // const near = 1;\n    // const far = 70;\n    /**\n     * FogExp2 is closer to reality but Fog is used more commonly since it \n     * lets you choose a place to apply the fog so you can decide to show a \n     * clear scene up to a certain distance and then fade out to some color past that distance.\n     */ //   const density = 0.1;\n    //   scene.fog = new THREE.FogExp2(color, density);\n    // scene.fog = new THREE.Fog(color, near, far);\n    $efd3ba4ec2608b1d$var$scene.background = new THREE.Color(color);\n}var $efd3ba4ec2608b1d$var$raycaster = new THREE.Raycaster();\nvar $efd3ba4ec2608b1d$var$mouse = new THREE.Vector2();\nvar $efd3ba4ec2608b1d$var$render = (time)=>{\n    time *= 0.001;\n    $efd3ba4ec2608b1d$var$objects.cubos.forEach((cube, ndx)=>{\n        const speed = .2 + ndx * .1;\n        const rot = time * speed;\n        if (cube.name == \"principal\") cube.rotation.x = rot;\n        cube.rotation.y = rot + 1;\n    });\n    $efd3ba4ec2608b1d$var$renderer.render($efd3ba4ec2608b1d$var$scene, $efd3ba4ec2608b1d$var$camera);\n    requestAnimationFrame($efd3ba4ec2608b1d$var$render);\n};\nsetInterval(()=>{\n    const r = Math.random(), g = Math.random(), b = Math.random();\n    $efd3ba4ec2608b1d$var$objects.secreto.material.emissive.setRGB(r, g, b);\n    $efd3ba4ec2608b1d$var$objects.secreto.material.color.setRGB(r, g, b);\n}, 500);\nconst $efd3ba4ec2608b1d$var$onMouseMove = (event)=>{\n    event.preventDefault();\n    $efd3ba4ec2608b1d$var$mouse.x = event.clientX / window.innerWidth * 2 - 1; //obtiene la coordenada del mouse en el eje x\n    $efd3ba4ec2608b1d$var$mouse.y = -(event.clientY / window.innerHeight) * 2 + 1; //obtiene la coordenada del mouse en el eje y\n    // update the picking ray with the camera and mouse position\n    $efd3ba4ec2608b1d$var$raycaster.setFromCamera($efd3ba4ec2608b1d$var$mouse, $efd3ba4ec2608b1d$var$camera);\n    var intersects = $efd3ba4ec2608b1d$var$raycaster.intersectObjects($efd3ba4ec2608b1d$var$scene.children, true);\n    intersects.map((intersection)=>{\n        // console.log('intersection', intersection);\n        const tl = new TimelineMax();\n        tl.to(intersection.object.scale, .5, {\n            x: .5,\n            ease: Expo.easeOut\n        });\n        tl.to(intersection.object.position, .5, {\n            x: 5,\n            ease: Expo.easeOut\n        });\n        tl.to(intersection.object.rotation, .5, {\n            y: Math.PI * 2,\n            ease: Expo.easeOut\n        });\n    });\n};\nconst $efd3ba4ec2608b1d$export$a8b500dc61192962 = (camera, modo)=>{\n    setTimeout(()=>{\n        if (modo == 'a') {\n            const delay = (0, $7Pul0.despejarEntrada)($efd3ba4ec2608b1d$var$objects.cubosEntrada);\n            (0, $7Pul0.acercarBolaAzul)(camera.position, delay);\n        }\n    }, 1000);\n};\nrequestAnimationFrame($efd3ba4ec2608b1d$var$render);\n\n\n//# sourceMappingURL=index.b48141a1.js.map\n","import { initScene } from './init.js';\nimport { acercarBolaAzul, despejarEntrada } from './funciones.js';\nimport {POINTER_CLICK, POINTER_ENTER, POINTER_EXIT, Pointer} from './pointer.js'\n\nvar renderer, scene, camera, controls, objects;\n[renderer, scene, camera, controls, objects] = initScene();\n// capturador de rayos que nos sirve para interceptar objetos con el mouse\n{\n    const color = 0xFFFFFF;  // white\n    // const near = 1;\n    // const far = 70;\n    /**\n     * FogExp2 is closer to reality but Fog is used more commonly since it \n     * lets you choose a place to apply the fog so you can decide to show a \n     * clear scene up to a certain distance and then fade out to some color past that distance.\n     */\n    //   const density = 0.1;\n    //   scene.fog = new THREE.FogExp2(color, density);\n    // scene.fog = new THREE.Fog(color, near, far);\n    scene.background = new THREE.Color(color);\n}\n\nvar raycaster = new THREE.Raycaster();\nvar mouse = new THREE.Vector2();\n\nvar render = (time) => {\n    time *= 0.001;\n\n    objects.cubos.forEach((cube, ndx) => {\n        const speed = .2 + ndx * .1;\n        const rot = time * speed;\n        \n        if(cube.name == \"principal\"){\n            cube.rotation.x = rot;\n        }\n        cube.rotation.y = rot +1;\n    });\n\n    renderer.render(scene, camera);\n    requestAnimationFrame(render);\n}\n\nsetInterval(() => {\n    const r = Math.random(), g = Math.random(), b = Math.random();\n    objects.secreto.material.emissive.setRGB(r, g, b);\n    objects.secreto.material.color.setRGB(r, g, b);\n}, 500);\n\n\nconst onMouseMove = (event) => {\n    event.preventDefault();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1; //obtiene la coordenada del mouse en el eje x\n    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1; //obtiene la coordenada del mouse en el eje y\n    // update the picking ray with the camera and mouse position\n    raycaster.setFromCamera(mouse, camera);\n    var intersects = raycaster.intersectObjects(scene.children, true);\n    intersects.map((intersection) => {\n        // console.log('intersection', intersection);\n        const tl = new TimelineMax();\n        tl.to(intersection.object.scale, .5, {x:.5, ease: Expo.easeOut });\n        tl.to(intersection.object.position, .5, {x: 5, ease: Expo.easeOut });\n        tl.to(intersection.object.rotation, .5, {y: Math.PI*2 , ease: Expo.easeOut });\n    }); \n}\n\n// document.body.addEventListener('mousemove', onMouseMove, false);\n\nexport const showTime = (camera, modo) =>{\n\n    \n    setTimeout(() => {\n        if(modo == 'a'){\n            const delay = despejarEntrada(objects.cubosEntrada);\n            acercarBolaAzul(camera.position, delay);\n        }\n    }\n    ,1000);\n}\n\nrequestAnimationFrame(render);\n","import { initContent } from './initContent.js';\nimport { showTime } from './main.js';\nimport { addAnimationHide, showElem } from './funciones.js';\nconst $ = (sel) => document.querySelector(sel)\n\nexport const initScene = () => {\n    //create DIV for the canvas\n    const container = document.createElement( 'div' );\n    document.body.appendChild( container );\n    const canvas = document.querySelector('#canvas');\n    const renderer = new THREE.WebGLRenderer({ canvas, \n        logarithmicDepthBuffer: true,\n         antialias: true \n    } );\n    const fov = 70;\n    const aspect = window.innerWidth / window.innerHeight;  // 2 is the canvas default\n    const near = 0.1;\n    const far = 50;\n    const camera = new THREE.PerspectiveCamera( fov, aspect, near, far );\n    camera.position.z = 25;\n    camera.position.y = 6;\n    const scene = new THREE.Scene();\n\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    container.appendChild( renderer.domElement );\n\n    const controls = new THREE.OrbitControls(camera, renderer.domElement);\n    \n    controls.target.set( 0, 1, -5.3 );\n    controls.minDistance= 0.2;\n    controls.maxDistance= 25;\n    //CON ESTO LO QUE HACEMOS ES LIMITAR LA ORBITA A EL SUELO, EL RANGO VA DE 0 A PI SIENDO 0 LA VISTA DESDE ARRIBA Y PI LA VISTA DESDE ABAJO\n    controls.maxPolarAngle = Math.PI/2\n    \n    \n    let objects = initContent(scene,camera,renderer)\n    \n    \n    window.addEventListener( 'resize', ()=>{\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize( window.innerWidth, window.innerHeight );\n    }, false );\n\n\n    THREE.DefaultLoadingManager.onStart = (url, loaded, total) => {\n        // console.log(`loading ${url}.  loaded ${loaded} of ${total}`)\n        \n    }\n    THREE.DefaultLoadingManager.onLoad = () => {\n        $('#loading-indicator').style.display = 'none'\n        $('#click-to-play').style.display = 'block'\n        const overlay = $('#overlay');\n        const callback = () => {\n            addAnimationHide(document.body.querySelector(\".container-marquesina\"));\n        };\n        marquesina(callback);\n        \n        $(\"#click-to-play\").getElementsByTagName('button')\n        document.querySelectorAll(\"#click-to-play button\").forEach((elem)=>{\n            elem.addEventListener('click',(e)=>{\n                addAnimationHide(overlay);\n                objects.audios.cumple.play();\n                setTimeout(() => {\n                    objects.audios.crowd.play()\n                }, 12000);\n                showTime(camera, e.target.value);\n            })\n        });\n        document.body.querySelector('#volver').addEventListener('click',\n        () => {\n            showElem(overlay);\n        }\n        ,false)\n        document.body.querySelector('#clue').addEventListener('click',\n        () => {\n            if(Swal){\n                Swal.fire({\n                    title: 'A clue!',\n                    text: 'Look inside the cake! You can move around by clicking and dragging! Zoom in with the wheel of your mouse!',\n                    icon: 'warning',\n                    confirmButtonText: 'Ok'\n                })\n            }else{\n                alert('Look inside the cake!')\n            }\n            \n        }\n        ,false)\n    }\n    THREE.DefaultLoadingManager.onProgress = (url, loaded, total) => {\n        // console.log(`prog ${url}.  loaded ${loaded} of ${total}`)\n        $(\"#progress\").setAttribute('value', 100*(loaded/total))\n    }\n    THREE.DefaultLoadingManager.onError = (url) => {\n        // console.log(`error loading ${url}`)\n    }\n\n    return [ renderer, scene, camera, controls, objects];\n}","import { Pointer } from './pointer.js'\nimport { despejarEntrada, agregarCubos, acercarBolaAzul, randomMeshes, agregarPiramides } from './funciones.js';\nconst on = (elem, type, cb) => elem.addEventListener(type,cb)\n\nexport const initContent = (scene,camera,renderer) => {\n    const audiosSrc= {\n        sunshine: {src: './assets/audio/sunshine.mp3'},\n        crowd: {src: './assets/audio/happy-birthday-crowd.mp3'},\n        applause: {src: './assets/audio/small-group-applauding.wav'},\n        cheers: {src: './assets/audio/cheers.wav'},\n        hidden1: {src: './assets/audio/happy-birthday-music.mp3'},\n        aleatorio: {src: './assets/audio/Hidden-message-birthday.mp3'},\n        cumple: {src: './assets/audio/happy-birthday-music.mp3'},\n    }\n    //set the background color of the scene\n    let pointer;\n    const stage = new THREE.Group()\n\n    //load a cat texture\n    const texture_loader = new THREE.TextureLoader()\n\n    const gltf_loader = new THREE.GLTFLoader()\n    gltf_loader.load('./assets/birthdaycard.glb', \n        (model)=> {\n            model.scene.position.x = -1\n            model.scene.position.y = 0\n            model.scene.position.z = -1\n            stage.add(model.scene)\n        }\n    )\n\n    //a standard light\n    // Luces\n    const light = new THREE.DirectionalLight( 0xffffff, 1.0 );\n    light.position.set( 0, 10, 25 ).normalize();\n    stage.add( light );\n\n    const amb = new THREE.AmbientLight(0xffffff, 0.3);\n    stage.add(amb);\n\n    const point = new THREE.PointLight(0xffffff, 1.5);\n    point.position.set(0.15, 2.1, -5.8);\n    stage.add(point);\n    \n\n    const text_loader = new THREE.TTFLoader()\n    text_loader.load(\"./assets/Vollkorn-BlackItalic.ttf\", data =>{\n        const font = new THREE.FontLoader().parse(data)\n        const geo = new THREE.TextBufferGeometry(\"Happy Birthday [name]!\", {\n            font: font,\n            size: 0.8,\n            height: 0.2,\n            bevelEnabled: false,\n            bevelThickness: 0.2,\n            bevelSize: 0.05\n        })\n        geo.center()\n        const mesh = new THREE.Mesh(geo,\n            new THREE.MeshStandardMaterial({\n                color: '#ff11ff',\n                metalness: 0.3,\n                roughness: 0.3\n            })\n        )\n        mesh.position.set(0, 3.5, -4)\n        \n        gsap.to(mesh.scale, 2, {x:1.5, y:1.5, z:1.5, ease: \"back.in(1.7)\", yoyo:true, repeat:-1 })\n        stage.add(mesh)\n    })\n\n    // enable stats visible inside VR\n    stage.add(camera)\n\n    //class which handles mouse and VR controller\n    pointer = new Pointer(stage,renderer,camera, {\n        //Pointer searches everything in the scene by default\n        //override this to match just certain things\n        intersectionFilter: ((o) => o.userData.clickable),\n        //make the camera pan when moving the mouse. good for simulating head turning on desktop\n        cameraFollowMouse:false,\n        // set to true to move the controller node forward and tilt with the mouse.\n        // good for testing VR controls on desktop\n        mouseSimulatesController:false,\n    })\n\n    const targets = []\n    //Eventos\n    var domEvents\t= new THREEx.DomEvents(camera, renderer.domElement);\n    // objetos\n    var geometryParams = [2, 2, 2];\n    var materialParams = { color: 0xFFCC00 };\n    const quantity = 50;\n    let cubosEntrada = randomMeshes(scene, geometryParams, materialParams, domEvents, quantity);\n    const cubos = agregarCubos(scene, texture_loader);\n\n    const piramides = agregarPiramides(scene, domEvents);    \n\n    // creamos una esfera\n    const target1 = new THREE.Mesh(\n        new THREE.SphereGeometry(0.25),\n        new THREE.MeshLambertMaterial({ color: 'red'})\n    )\n    // controls.target.set( 0, 3, -4 );\n    target1.position.set(0, 1, -6)\n    target1.name = 'cake'\n    targets.push(target1)\n\n    const sol = new THREE.Mesh(\n        new THREE.SphereGeometry(2.5),\n        new THREE.MeshLambertMaterial({ color: 'yellow'})\n    )\n    // controls.target.set( 0, 3, -4 );\n    sol.position.set(-7, 9, -25)\n    sol.name = 'sol'\n    targets.push(sol)\n\n    //DEFINIMOS LA BOLA CENTRAL DEL MAPA\n    const bola = new THREE.Mesh(\n        new THREE.SphereGeometry(0.25),\n        new THREE.MeshLambertMaterial({ color: 'blue'})\n    )\n    bola.position.set(0,1.5,0)\n    bola.name = 'cumple';\n\n    gsap.to(bola.scale, 2, {x:3, y:3, z:3, ease: \"power2.inOut\", yoyo:true, repeat:-1 })\n    \n    targets.push(bola)\n    \n    targets.forEach((target) =>{\n        target.userData.clickable = true\n        stage.add(target)\n        on(target, 'click', (e)=>{\n            // stage.position.x = -e.target.position.x\n            // stage.position.z = -e.target.position.z\n            if(e.target.name == \"cake\"){\n                audioAleatorio.play()\n            }\n            if(e.target.name == \"cumple\"){\n                const delay = despejarEntrada(cubosEntrada);\n                acercarBolaAzul(camera.position, delay);\n                audioCumple.play()\n            }\n            if(e.target.name == \"sol\"){\n                // audioAleatorio.play();\n                audioSunshine.play()\n            }\n        })\n    })\n    cubos.forEach((cubo, index) => {\n        cubo.userData.clickable = true\n        stage.add(cubo);\n        on(cubo, 'click', (e)=>{\n            if(index == 0){\n                audioCheers.play()\n            }\n            if(index == 1){\n                audioCrowd.play()\n            }\n            if(index == 2){\n                audioApplause.play()\n            }\n        })\n    })\n    scene.add(stage)\n\n    const audioListener = new THREE.AudioListener()\n    camera.add(audioListener)\n    \n    const audioAleatorio = new THREE.Audio(audioListener)\n    const audioCrowd     = new THREE.Audio(audioListener)\n    const audioApplause     = new THREE.Audio(audioListener)\n    const audioCheers     = new THREE.Audio(audioListener)\n    const audioSunshine   = new THREE.Audio(audioListener)\n    const audioHidden1   = new THREE.Audio(audioListener)\n    const audioCumple   = new THREE.Audio(audioListener)\n\n    const audioLoader = new THREE.AudioLoader()\n\n    audioLoader.load(audiosSrc.hidden1.src, (mp4)=>{\n        audioHidden1.setBuffer(mp4)\n        audioHidden1.setVolume( 0.4 )\n    })\n    audioLoader.load(audiosSrc.cumple.src, (mp4)=>{\n        audioCumple.setBuffer(mp4)\n    })\n    audioLoader.load(audiosSrc.aleatorio.src, (mp4)=>{\n        audioAleatorio.setBuffer(mp4)\n    })\n    audioLoader.load(audiosSrc.crowd.src, (mp4)=>{\n        audioCrowd.setBuffer(mp4)\n        audioCrowd.setVolume(0.8)\n    })\n    audioLoader.load(audiosSrc.applause.src, (mp4)=>{\n        audioApplause.setBuffer(mp4)\n        audioApplause.setVolume(1.3)\n    })\n    audioLoader.load(audiosSrc.cheers.src, (mp4)=>{\n        audioCheers.setBuffer(mp4)\n        audioCheers.setVolume(0.8)\n    })\n    audioLoader.load(audiosSrc.sunshine.src, (mp4)=>{\n        audioSunshine.setBuffer(mp4)\n        audioSunshine.setVolume(1.2)\n    })\n    \n    const audiosFiles = {\n        sunshine: audioSunshine,\n        crowd: audioCrowd,\n        applause: audioApplause,\n        cheers: audioCheers,\n        hidden1: audioHidden1,\n        aleatorio: audioAleatorio,\n        cumple: audioCumple,\n    }\n    scene.add(new THREE.Mesh(\n        new THREE.SphereGeometry(30),\n        new THREE.MeshLambertMaterial({\n            color: 'white',\n            map: texture_loader.load('assets/sky.jpg'),\n            side: THREE.BackSide\n        })\n    ))\n\n    return {cubosEntrada: cubosEntrada, cubos: cubos, secreto: target1, bola: bola, piramides: piramides, audios: audiosFiles};\n}","import {Raycaster} from \"./Raycaster.js\"\nexport const POINTER_ENTER = \"enter\"\nexport const POINTER_EXIT = \"exit\"\nexport const POINTER_CLICK = \"click\"\nexport const POINTER_MOVE = \"move\"\nexport const POINTER_PRESS = \"press\"\nexport const POINTER_RELEASE = \"release\"\n\n// import * as THREE from \"./node_modules/three/build/three.module.js\"\n\nconst toRad = (degrees) => degrees*Math.PI/180\n\nexport class Pointer {\n    constructor(scene, renderer, camera, opts) {\n        this.listeners = {}\n        this.opts = opts || {}\n        this.opts.enableLaser = (opts.enableLaser !== undefined) ? opts.enableLaser : true\n        this.opts.laserLength = (opts.laserLength !== undefined) ? opts.laserLength : 3\n        this.opts.enableMoveEvents = (opts.enableMoveEvents !== undefined) ? opts.enableMoveEvents : true\n        this.scene = scene\n        this.renderer = renderer\n        this.canvas = renderer.domElement\n        this.camera = camera\n\n        this.raycaster = new Raycaster()\n        this.waitcb = null\n        this.hoverTarget = null\n\n        this.intersectionFilter = this.opts.intersectionFilter || (() => true)\n        this.raycaster.recurseFilter = this.opts.recurseFilter || (()=> true)\n\n\n        // setup the mouse\n        this.canvas.addEventListener('mousemove', this.mouseMove.bind(this))\n        this.canvas.addEventListener('click', this.mouseClick.bind(this))\n        this.canvas.addEventListener('mousedown',this.mouseDown.bind(this))\n        this.canvas.addEventListener('mouseup',this.mouseUp.bind(this))\n\n        //touch events\n        this.canvas.addEventListener('touchstart',this.touchStart.bind(this))\n        this.canvas.addEventListener('touchmove',this.touchMove.bind(this))\n        this.canvas.addEventListener('touchend',this.touchEnd.bind(this))\n\n        // setup the VR controllers\n        this.controller1 = this.renderer.vr.getController(0);\n        this.controller1.addEventListener('selectstart', this.controllerSelectStart.bind(this));\n        this.controller1.addEventListener('selectend', this.controllerSelectEnd.bind(this));\n\n\n        this.controller2 = this.renderer.vr.getController(1);\n        this.controller2.addEventListener('selectstart', this.controllerSelectStart.bind(this));\n        this.controller2.addEventListener('selectend', this.controllerSelectEnd.bind(this));\n\n        this.setMouseSimulatesController(opts.mouseSimulatesController)\n\n        this.scene.add(this.controller1);\n        this.scene.add(this.controller2);\n\n\n\n        if(this.opts.enableLaser) {\n            //create visible lines for the two controllers\n            const geometry = new THREE.BufferGeometry()\n            geometry.addAttribute('position', new THREE.Float32BufferAttribute([0, 0, 0, 0, 0, -this.opts.laserLength], 3));\n            geometry.addAttribute('color', new THREE.Float32BufferAttribute([1.0, 0.5, 0.5, 0, 0, 0], 3));\n\n            const material = new THREE.LineBasicMaterial({\n                vertexColors: false,\n                color: 0x880000,\n                linewidth: 5,\n                blending: THREE.NormalBlending\n            })\n\n            this.controller1.add(new THREE.Line(geometry, material));\n            this.controller2.add(new THREE.Line(geometry, material));\n        }\n\n    }\n\n    //override this to do something w/ the controllers on every tick\n    tick(time) {\n        this.controllerMove(this.controller1)\n        this.controllerMove(this.controller2)\n    }\n\n\n    fire(obj, type, payload) {\n        obj.dispatchEvent(payload)\n    }\n    fireSelf(type,payload) {\n        if(!this.listeners[type]) return\n        this.listeners[type].forEach(cb => cb(payload))\n    }\n\n    //make the camera follow the mouse in desktop mode. Helps w/ debugging.\n    cameraFollowMouse(e) {\n        const bounds = this.canvas.getBoundingClientRect()\n        const ry = ((e.clientX - bounds.left) / bounds.width) * 2 - 1\n        const rx = 1 - ((e.clientY - bounds.top) / bounds.height) * 2\n        this.camera.rotation.y = -ry*2\n        this.camera.rotation.x = +rx\n    }\n\n    mouseMove(e) {\n        const mouse = new THREE.Vector2()\n        const bounds = this.canvas.getBoundingClientRect()\n        mouse.x = ((e.clientX - bounds.left) / bounds.width) * 2 - 1\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1\n        this.raycaster.setFromCamera(mouse, this.camera)\n        if(this.opts.mouseSimulatesController) {\n            //create target from the mouse controls\n            const target = new THREE.Vector3()\n            target.x = mouse.x\n            target.y = mouse.y\n            target.z = -3\n            //convert to camera space\n            target.add(this.camera.position)\n            this.spot.position.copy(target)\n            this.controller1.lookAt(target)\n            //have to flip over because the UP is down on controllers\n            const flip = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0,1,0),toRad(180))\n            this.controller1.quaternion.multiply(flip)\n        }\n        this._processMove()\n\n        if(this.opts.cameraFollowMouse) this.cameraFollowMouse(e)\n    }\n\n    touchStart(e) {\n        e.preventDefault()\n        if(e.changedTouches.length <= 0) return\n        const tch = e.changedTouches[0]\n        const mouse = new THREE.Vector2()\n        const bounds = this.canvas.getBoundingClientRect()\n        mouse.x = ((tch.clientX - bounds.left) / bounds.width) * 2 - 1\n        mouse.y = -((tch.clientY - bounds.top) / bounds.height) * 2 + 1\n        this.raycaster.setFromCamera(mouse, this.camera)\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n            .filter(it => this.intersectionFilter(it.object))\n        intersects.forEach((it) => {\n            this.fire(it.object, POINTER_PRESS, {type: POINTER_PRESS})\n        })\n    }\n    touchMove(e) {\n        e.preventDefault()\n        if(e.changedTouches.length <= 0) return\n        const tch = e.changedTouches[0]\n        const mouse = new THREE.Vector2()\n        const bounds = this.canvas.getBoundingClientRect()\n        mouse.x = ((tch.clientX - bounds.left) / bounds.width) * 2 - 1\n        mouse.y = -((tch.clientY - bounds.top) / bounds.height) * 2 + 1\n        this.raycaster.setFromCamera(mouse, this.camera)\n        this._processMove()\n    }\n    touchEnd(e) {\n        e.preventDefault()\n        if(e.changedTouches.length <= 0) return\n        const tch = e.changedTouches[0]\n        const mouse = new THREE.Vector2()\n        const bounds = this.canvas.getBoundingClientRect()\n        mouse.x = ((tch.clientX - bounds.left) / bounds.width) * 2 - 1\n        mouse.y = -((tch.clientY - bounds.top) / bounds.height) * 2 + 1\n        this.raycaster.setFromCamera(mouse, this.camera)\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n            .filter(it => this.intersectionFilter(it.object))\n        intersects.forEach((it) => {\n            this.fire(it.object, POINTER_RELEASE, {type: POINTER_RELEASE, point: it.point})\n        })\n        this._processClick()\n    }\n\n    controllerMove(controller) {\n        if(!controller.visible) return\n        const c = controller\n        const dir = new THREE.Vector3(0, 0, -1)\n        dir.applyQuaternion(c.quaternion)\n        this.raycaster.set(c.position, dir)\n        this._processMove()\n    }\n\n    _processMove() {\n        if(!this.opts.enableMoveEvents)return\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n                .filter(it => this.intersectionFilter(it.object))\n\n        if(intersects.length === 0 && this.hoverTarget) {\n            this.fire(this.hoverTarget, POINTER_EXIT, {type: POINTER_EXIT})\n            this.hoverTarget = null\n        }\n        if(intersects.length >= 1) {\n            const it = intersects[0]\n            const obj = it.object\n            if (!obj) return\n            this.fire(obj, POINTER_MOVE, {type: POINTER_MOVE, point: it.point, intersection:it})\n            if (obj === this.hoverTarget) {\n                //still inside\n            } else {\n                if (this.hoverTarget)\n                    this.fire(this.hoverTarget, POINTER_EXIT, {type: POINTER_EXIT})\n                this.hoverTarget = obj\n                this.fire(this.hoverTarget, POINTER_ENTER, {type: POINTER_ENTER})\n            }\n        }\n    }\n\n    _processClick() {\n        if (this.waitcb) {\n            this.waitcb()\n            this.waitcb = null\n            return\n        }\n\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n                .filter(it => this.intersectionFilter(it.object))\n        if(intersects.length > 0) {\n            const it = intersects[0]\n            this.fire(it.object, POINTER_CLICK, {type: POINTER_CLICK, point: it.point, intersection:it})\n        }\n\n        this.fireSelf(POINTER_CLICK, {})\n    }\n    mouseClick(e) {\n        const mouse = new THREE.Vector2()\n        const bounds = this.canvas.getBoundingClientRect()\n        mouse.x = ((e.clientX - bounds.left) / bounds.width) * 2 - 1\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1\n        this.raycaster.setFromCamera(mouse, this.camera)\n        this._processClick()\n    }\n    mouseDown(e) {\n        const mouse = new THREE.Vector2()\n        const bounds = this.canvas.getBoundingClientRect()\n        mouse.x = ((e.clientX - bounds.left) / bounds.width) * 2 - 1\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1\n        this.raycaster.setFromCamera(mouse, this.camera)\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n            .filter(it => this.intersectionFilter(it.object))\n        intersects.forEach((it) => {\n            this.fire(it.object, POINTER_PRESS, {type: POINTER_PRESS, point: it.point, intersection:it})\n        })\n    }\n    mouseUp(e) {\n        const mouse = new THREE.Vector2()\n        const bounds = this.canvas.getBoundingClientRect()\n        mouse.x = ((e.clientX - bounds.left) / bounds.width) * 2 - 1\n        mouse.y = -((e.clientY - bounds.top) / bounds.height) * 2 + 1\n        this.raycaster.setFromCamera(mouse, this.camera)\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n            .filter(it => this.intersectionFilter(it.object))\n        intersects.forEach((it) => {\n            this.fire(it.object, POINTER_RELEASE, {type: POINTER_RELEASE, point: it.point, intersection:it})\n        })\n    }\n\n    controllerSelectStart(e) {\n        e.target.userData.isSelecting = true;\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n            .filter(it => this.intersectionFilter(it.object))\n        intersects.forEach((it) => {\n            this.fire(it.object, POINTER_PRESS, {type: POINTER_PRESS, point: it.point, intersection:it})\n        })\n    }\n\n    controllerSelectEnd(e) {\n        e.target.userData.isSelecting = false;\n        const c = e.target\n        const dir = new THREE.Vector3(0, 0, -1)\n        dir.applyQuaternion(c.quaternion)\n        this.raycaster.set(c.position, dir)\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n            .filter(it => this.intersectionFilter(it.object))\n        intersects.forEach((it) => {\n            this.fire(it.object, POINTER_RELEASE, {type: POINTER_RELEASE, point: it.point})\n        })\n        this._processClick()\n    }\n\n    waitSceneClick(cb) {\n        this.waitcb = cb\n    }\n\n\n    on(type,cb) {\n        if(!this.listeners[type]) this.listeners[type] = []\n        this.listeners[type].push(cb)\n    }\n    off(type,cb) {\n        this.listeners[type] = this.listeners[type].filter(c => c !== cb)\n    }\n    setMouseSimulatesController(val) {\n        this.opts.mouseSimulatesController = val\n        if(this.opts.mouseSimulatesController) {\n            this.controller1 = new THREE.Group()\n            this.controller1.position.set(0,1,-2)\n            this.controller1.quaternion.setFromUnitVectors(THREE.Object3D.DefaultUp, new THREE.Vector3(0,0,1))\n            this.spot = new THREE.Mesh(\n                new THREE.SphereBufferGeometry(0.1),\n                new THREE.MeshLambertMaterial({color: 'red'})\n            )\n            this.scene.add(this.spot)\n        } else {\n        }\n\n    }\n}\n","const Ray = THREE.Ray\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\n\nfunction Raycaster( origin, direction, near, far ) {\n\n    this.ray = new Ray( origin, direction );\n    // direction is assumed to be normalized (for accurate distance calculations)\n\n    this.near = near || 0;\n    this.far = far || Infinity;\n\n    this.params = {\n        Mesh: {},\n        Line: {},\n        LOD: {},\n        Points: { threshold: 1 },\n        Sprite: {}\n    };\n\n    Object.defineProperties( this.params, {\n        PointCloud: {\n            get: function () {\n\n                console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n                return this.Points;\n\n            }\n        }\n    } );\n\n}\n\nfunction ascSort( a, b ) {\n\n    return a.distance - b.distance;\n\n}\n\nlet count = 0\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n    if ( object.visible === false ) return;\n    if(raycaster.recurseFilter && !raycaster.recurseFilter(object)) return;\n\n    count++\n    object.raycast( raycaster, intersects );\n\n    if ( recursive === true ) {\n\n        var children = object.children;\n\n        for ( var i = 0, l = children.length; i < l; i ++ ) {\n\n            intersectObject( children[ i ], raycaster, intersects, true );\n\n        }\n\n    }\n\n}\n\nObject.assign( Raycaster.prototype, {\n\n    linePrecision: 1,\n\n    set: function ( origin, direction ) {\n\n        // direction is assumed to be normalized (for accurate distance calculations)\n\n        this.ray.set( origin, direction );\n\n    },\n\n    setFromCamera: function ( coords, camera ) {\n\n        if ( ( camera && camera.isPerspectiveCamera ) ) {\n\n            this.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n            this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n        } else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n            this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n            this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n        } else {\n\n            console.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n        }\n\n    },\n\n    intersectObject: function ( object, recursive, optionalTarget ) {\n\n        var intersects = optionalTarget || [];\n\n        intersectObject( object, this, intersects, recursive);\n\n        intersects.sort( ascSort );\n\n        return intersects;\n\n    },\n\n    intersectObjects: function ( objects, recursive, optionalTarget ) {\n        count = 0\n        var intersects = optionalTarget || [];\n\n        if ( Array.isArray( objects ) === false ) {\n\n            console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n            return intersects;\n\n        }\n\n        for ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n            intersectObject( objects[ i ], this, intersects, recursive);\n\n        }\n\n        // console.log(\"intersected objects\",count)\n\n        intersects.sort( ascSort );\n\n        return intersects;\n\n    }\n\n} );\n\n\nexport { Raycaster };\n"],"names":["$efd3ba4ec2608b1d$var$renderer","$efd3ba4ec2608b1d$var$scene","$efd3ba4ec2608b1d$var$camera","$efd3ba4ec2608b1d$var$controls","$efd3ba4ec2608b1d$var$objects","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$f6aeaa3031b25352$var$Ray","THREE","Ray","$f6aeaa3031b25352$export$8b7aaceff00bd2f","origin","direction","near","far","ray","Infinity","params","Mesh","Line","LOD","Points","threshold","Sprite","Object","defineProperties","PointCloud","get","console","warn","$f6aeaa3031b25352$var$ascSort","a","b","distance","$f6aeaa3031b25352$var$count","$f6aeaa3031b25352$var$intersectObject","object","raycaster","intersects","recursive","visible","recurseFilter","raycast","children","i","l","length","assign","prototype","linePrecision","set","setFromCamera","coords","camera","isPerspectiveCamera","setFromMatrixPosition","matrixWorld","x","y","unproject","sub","normalize","isOrthographicCamera","transformDirection","error","intersectObject","optionalTarget","sort","intersectObjects","objects","Array","isArray","$8d666930dd10096c$export$9e9acba13cf5a64","$8d666930dd10096c$export$c3e4e699c92e6b94","$8d666930dd10096c$export$5e4b584171f643c2","$8d666930dd10096c$export$5c736a62aeec4dde","$8d666930dd10096c$export$36aa50e6a49b087e","$8d666930dd10096c$export$4a0c003eebde8c92","$8d666930dd10096c$var$toRad","degrees","Math","PI","$8d666930dd10096c$export$b56007f12edf0c17","constructor","scene","renderer","opts","listeners","enableLaser","undefined","laserLength","enableMoveEvents","canvas","domElement","waitcb","hoverTarget","intersectionFilter","addEventListener","mouseMove","bind","mouseClick","mouseDown","mouseUp","touchStart","touchMove","touchEnd","controller1","vr","getController","controllerSelectStart","controllerSelectEnd","controller2","setMouseSimulatesController","mouseSimulatesController","add","geometry","BufferGeometry","addAttribute","Float32BufferAttribute","material","LineBasicMaterial","vertexColors","color","linewidth","blending","NormalBlending","tick","time","controllerMove","fire","obj","type","payload","dispatchEvent","fireSelf","forEach","cb","cameraFollowMouse","e","bounds","getBoundingClientRect","ry","clientX","left","width","rx","clientY","top","height","rotation","mouse","Vector2","target","Vector3","z","position","spot","copy","lookAt","flip","Quaternion","setFromAxisAngle","quaternion","multiply","_processMove","preventDefault","changedTouches","tch","filter","it","point","_processClick","controller","dir","applyQuaternion","c","intersection","userData","isSelecting","waitSceneClick","on","push","off","val","Group","setFromUnitVectors","Object3D","DefaultUp","SphereBufferGeometry","MeshLambertMaterial","$7Pul0","$08c298cfc32018b5$var$on","elem","$08c298cfc32018b5$export$dcafbe2feb5040aa","stage","texture_loader","TextureLoader","gltf_loader","GLTFLoader","load","model","light","DirectionalLight","amb","AmbientLight","PointLight","text_loader","TTFLoader","data","font","FontLoader","parse","geo","TextBufferGeometry","size","bevelEnabled","bevelThickness","bevelSize","center","mesh","MeshStandardMaterial","metalness","roughness","gsap","to","scale","ease","yoyo","repeat","o","clickable","targets","domEvents","THREEx","DomEvents","cubosEntrada","randomMeshes","cubos","agregarCubos","piramides","agregarPiramides","target1","SphereGeometry","name","sol","bola","audioAleatorio","play","delay","despejarEntrada","acercarBolaAzul","audioCumple","audioSunshine","cubo","index","audioCheers","audioCrowd","audioApplause","audioListener","AudioListener","Audio","audioHidden1","audioLoader","AudioLoader","mp4","setBuffer","setVolume","map","side","BackSide","secreto","audios","sunshine","crowd","applause","cheers","hidden1","aleatorio","cumple","$9495dc782b1de45f$var$$","sel","document","querySelector","container","createElement","body","appendChild","WebGLRenderer","logarithmicDepthBuffer","antialias","aspect","window","innerWidth","innerHeight","PerspectiveCamera","Scene","setSize","controls","OrbitControls","minDistance","maxDistance","maxPolarAngle","updateProjectionMatrix","DefaultLoadingManager","onStart","url","loaded","total","onLoad","style","display","overlay","marquesina","addAnimationHide","getElementsByTagName","querySelectorAll","setTimeout","value","showElem","Swal","title","text","icon","confirmButtonText","alert","onProgress","setAttribute","onError","background","Color","Raycaster","$efd3ba4ec2608b1d$var$render","cube","ndx","rot","render","requestAnimationFrame","setInterval","r","random","g","emissive","setRGB","$efd3ba4ec2608b1d$export$a8b500dc61192962","modo"],"version":3,"file":"index.b48141a1.js.map"}