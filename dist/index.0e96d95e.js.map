{"mappings":"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","sources":["<anon>","resource/threex.domevents.js"],"sourcesContent":["// This THREEx helper makes it easy to handle the mouse events in your 3D scene\n//\n// * CHANGES NEEDED\n//   * handle drag/drop\n//   * notify events not object3D - like DOM\n//     * so single object with property\n//   * DONE bubling implement bubling/capturing\n//   * DONE implement event.stopPropagation()\n//   * DONE implement event.type = \"click\" and co\n//   * DONE implement event.target\n//\n// # Lets get started\n//\n// First you include it in your page\n//\n// ```<script src='threex.domevent.js'>< /script>```\n//\n// # use the object oriented api\n//\n// You bind an event like this\n// \n// ```mesh.on('click', function(object3d){ ... })```\n//\n// To unbind an event, just do\n//\n// ```mesh.off('click', function(object3d){ ... })```\n//\n// As an alternative, there is another naming closer DOM events.\n// Pick the one you like, they are doing the same thing\n//\n// ```mesh.addEventListener('click', function(object3d){ ... })```\n// ```mesh.removeEventListener('click', function(object3d){ ... })```\n//\n// # Supported Events\n//\n// Always in a effort to stay close to usual pratices, the events name are the same as in DOM.\n// The semantic is the same too.\n// Currently, the available events are\n// [click, dblclick, mouseup, mousedown](http://www.quirksmode.org/dom/events/click.html),\n// [mouseover and mouse out](http://www.quirksmode.org/dom/events/mouseover.html).\n//\n// # use the standalone api\n//\n// The object-oriented api modifies THREE.Object3D class.\n// It is a global class, so it may be legitimatly considered unclean by some people.\n// If this bother you, simply do ```THREEx.DomEvents.noConflict()``` and use the\n// standalone API. In fact, the object oriented API is just a thin wrapper\n// on top of the standalone API.\n//\n// First, you instanciate the object\n//\n// ```var domEvent = new THREEx.DomEvent();```\n// \n// Then you bind an event like this\n//\n// ```domEvent.bind(mesh, 'click', function(object3d){ object3d.scale.x *= 2; });```\n//\n// To unbind an event, just do\n//\n// ```domEvent.unbind(mesh, 'click', callback);```\n//\n// \n// # Code\n//\n/** @namespace */ var THREEx = THREEx || {};\n// # Constructor\nTHREEx.DomEvents = function(camera, domElement) {\n    this._camera = camera || null;\n    this._domElement = domElement || document;\n    this._raycaster = new THREE.Raycaster();\n    this._selected = null;\n    this._boundObjs = {};\n    // Bind dom event for mouse and touch\n    var _this = this;\n    this._$onClick = function() {\n        _this._onClick.apply(_this, arguments);\n    };\n    this._$onDblClick = function() {\n        _this._onDblClick.apply(_this, arguments);\n    };\n    this._$onMouseMove = function() {\n        _this._onMouseMove.apply(_this, arguments);\n    };\n    this._$onMouseDown = function() {\n        _this._onMouseDown.apply(_this, arguments);\n    };\n    this._$onMouseUp = function() {\n        _this._onMouseUp.apply(_this, arguments);\n    };\n    this._$onTouchMove = function() {\n        _this._onTouchMove.apply(_this, arguments);\n    };\n    this._$onTouchStart = function() {\n        _this._onTouchStart.apply(_this, arguments);\n    };\n    this._$onTouchEnd = function() {\n        _this._onTouchEnd.apply(_this, arguments);\n    };\n    this._$onContextmenu = function() {\n        _this._onContextmenu.apply(_this, arguments);\n    };\n    this._domElement.addEventListener('click', this._$onClick, false);\n    this._domElement.addEventListener('dblclick', this._$onDblClick, false);\n    this._domElement.addEventListener('mousemove', this._$onMouseMove, false);\n    this._domElement.addEventListener('mousedown', this._$onMouseDown, false);\n    this._domElement.addEventListener('mouseup', this._$onMouseUp, false);\n    this._domElement.addEventListener('touchmove', this._$onTouchMove, false);\n    this._domElement.addEventListener('touchstart', this._$onTouchStart, false);\n    this._domElement.addEventListener('touchend', this._$onTouchEnd, false);\n    this._domElement.addEventListener('contextmenu', this._$onContextmenu, false);\n};\n// # Destructor\nTHREEx.DomEvents.prototype.destroy = function() {\n    // unBind dom event for mouse and touch\n    this._domElement.removeEventListener('click', this._$onClick, false);\n    this._domElement.removeEventListener('dblclick', this._$onDblClick, false);\n    this._domElement.removeEventListener('mousemove', this._$onMouseMove, false);\n    this._domElement.removeEventListener('mousedown', this._$onMouseDown, false);\n    this._domElement.removeEventListener('mouseup', this._$onMouseUp, false);\n    this._domElement.removeEventListener('touchmove', this._$onTouchMove, false);\n    this._domElement.removeEventListener('touchstart', this._$onTouchStart, false);\n    this._domElement.removeEventListener('touchend', this._$onTouchEnd, false);\n    this._domElement.removeEventListener('contextmenu', this._$onContextmenu, false);\n};\nTHREEx.DomEvents.eventNames = [\n    \"click\",\n    \"dblclick\",\n    \"mouseover\",\n    \"mouseout\",\n    \"mousemove\",\n    \"mousedown\",\n    \"mouseup\",\n    \"contextmenu\",\n    \"touchstart\",\n    \"touchend\"\n];\nTHREEx.DomEvents.prototype._getRelativeMouseXY = function(domEvent) {\n    var element = domEvent.target || domEvent.srcElement;\n    if (element.nodeType === 3) element = element.parentNode; // Safari fix -- see http://www.quirksmode.org/js/events_properties.html\n    //get the real position of an element relative to the page starting point (0, 0)\n    //credits go to brainjam on answering http://stackoverflow.com/questions/5755312/getting-mouse-position-relative-to-content-area-of-an-element\n    var elPosition = {\n        x: 0,\n        y: 0\n    };\n    var tmpElement = element;\n    //store padding\n    var style = getComputedStyle(tmpElement, null);\n    elPosition.y += parseInt(style.getPropertyValue(\"padding-top\"), 10);\n    elPosition.x += parseInt(style.getPropertyValue(\"padding-left\"), 10);\n    //add positions\n    do {\n        elPosition.x += tmpElement.offsetLeft;\n        elPosition.y += tmpElement.offsetTop;\n        style = getComputedStyle(tmpElement, null);\n        elPosition.x += parseInt(style.getPropertyValue(\"border-left-width\"), 10);\n        elPosition.y += parseInt(style.getPropertyValue(\"border-top-width\"), 10);\n    }while (tmpElement = tmpElement.offsetParent);\n    var elDimension = {\n        width: element === window ? window.innerWidth : element.offsetWidth,\n        height: element === window ? window.innerHeight : element.offsetHeight\n    };\n    return {\n        x: +((domEvent.pageX - elPosition.x) / elDimension.width) * 2 - 1,\n        y: -((domEvent.pageY - elPosition.y) / elDimension.height) * 2 + 1\n    };\n};\n/********************************************************************************/ /*\t\tdomevent context\t\t\t\t\t\t*/ /********************************************************************************/ // handle domevent context in object3d instance\nTHREEx.DomEvents.prototype._objectCtxInit = function(object3d) {\n    object3d._3xDomEvent = {};\n};\nTHREEx.DomEvents.prototype._objectCtxDeinit = function(object3d) {\n    delete object3d._3xDomEvent;\n};\nTHREEx.DomEvents.prototype._objectCtxIsInit = function(object3d) {\n    return object3d._3xDomEvent ? true : false;\n};\nTHREEx.DomEvents.prototype._objectCtxGet = function(object3d) {\n    return object3d._3xDomEvent;\n};\n/********************************************************************************/ /*\t\t\t\t\t\t\t\t\t\t*/ /********************************************************************************/ /**\n * Getter/Setter for camera\n*/ THREEx.DomEvents.prototype.camera = function(value) {\n    if (value) this._camera = value;\n    return this._camera;\n};\nTHREEx.DomEvents.prototype.bind = function(object3d, eventName, callback, useCapture) {\n    console.assert(THREEx.DomEvents.eventNames.indexOf(eventName) !== -1, \"not available events:\" + eventName);\n    if (!this._objectCtxIsInit(object3d)) this._objectCtxInit(object3d);\n    var objectCtx = this._objectCtxGet(object3d);\n    if (!objectCtx[eventName + 'Handlers']) objectCtx[eventName + 'Handlers'] = [];\n    objectCtx[eventName + 'Handlers'].push({\n        callback: callback,\n        useCapture: useCapture\n    });\n    // add this object in this._boundObjs\n    if (this._boundObjs[eventName] === undefined) this._boundObjs[eventName] = [];\n    this._boundObjs[eventName].push(object3d);\n};\nTHREEx.DomEvents.prototype.addEventListener = THREEx.DomEvents.prototype.bind;\nTHREEx.DomEvents.prototype.unbind = function(object3d, eventName, callback, useCapture) {\n    console.assert(THREEx.DomEvents.eventNames.indexOf(eventName) !== -1, \"not available events:\" + eventName);\n    if (!this._objectCtxIsInit(object3d)) this._objectCtxInit(object3d);\n    var objectCtx = this._objectCtxGet(object3d);\n    if (!objectCtx[eventName + 'Handlers']) objectCtx[eventName + 'Handlers'] = [];\n    var handlers = objectCtx[eventName + 'Handlers'];\n    for(var i = 0; i < handlers.length; i++){\n        var handler = handlers[i];\n        if (callback != handler.callback) continue;\n        if (useCapture != handler.useCapture) continue;\n        handlers.splice(i, 1);\n        break;\n    }\n    // from this object from this._boundObjs\n    var index = this._boundObjs[eventName].indexOf(object3d);\n    console.assert(index !== -1);\n    this._boundObjs[eventName].splice(index, 1);\n};\nTHREEx.DomEvents.prototype.removeEventListener = THREEx.DomEvents.prototype.unbind;\nTHREEx.DomEvents.prototype._bound = function(eventName, object3d) {\n    var objectCtx = this._objectCtxGet(object3d);\n    if (!objectCtx) return false;\n    return objectCtx[eventName + 'Handlers'] ? true : false;\n};\n/********************************************************************************/ /*\t\tonMove\t\t\t\t\t\t\t\t*/ /********************************************************************************/ // # handle mousemove kind of events\nTHREEx.DomEvents.prototype._onMove = function(eventName, mouseX, mouseY, origDomEvent) {\n    //console.log('eventName', eventName, 'boundObjs', this._boundObjs[eventName])\n    // get objects bound to this event\n    var boundObjs = this._boundObjs[eventName];\n    if (boundObjs === undefined || boundObjs.length === 0) return;\n    // compute the intersection\n    var vector = new THREE.Vector2();\n    // update the picking ray with the camera and mouse position\n    vector.set(mouseX, mouseY);\n    this._raycaster.setFromCamera(vector, this._camera);\n    var intersects = this._raycaster.intersectObjects(boundObjs);\n    var oldSelected = this._selected;\n    if (intersects.length > 0) {\n        var notifyOver, notifyOut, notifyMove;\n        var intersect = intersects[0];\n        var newSelected = intersect.object;\n        this._selected = newSelected;\n        // if newSelected bound mousemove, notify it\n        notifyMove = this._bound('mousemove', newSelected);\n        if (oldSelected != newSelected) {\n            // if newSelected bound mouseenter, notify it\n            notifyOver = this._bound('mouseover', newSelected);\n            // if there is a oldSelect and oldSelected bound mouseleave, notify it\n            notifyOut = oldSelected && this._bound('mouseout', oldSelected);\n        }\n    } else {\n        // if there is a oldSelect and oldSelected bound mouseleave, notify it\n        notifyOut = oldSelected && this._bound('mouseout', oldSelected);\n        this._selected = null;\n    }\n    // notify mouseMove - done at the end with a copy of the list to allow callback to remove handlers\n    notifyMove && this._notify('mousemove', newSelected, origDomEvent, intersect);\n    // notify mouseEnter - done at the end with a copy of the list to allow callback to remove handlers\n    notifyOver && this._notify('mouseover', newSelected, origDomEvent, intersect);\n    // notify mouseLeave - done at the end with a copy of the list to allow callback to remove handlers\n    notifyOut && this._notify('mouseout', oldSelected, origDomEvent, intersect);\n};\n/********************************************************************************/ /*\t\tonEvent\t\t\t\t\t\t\t\t*/ /********************************************************************************/ // # handle click kind of events\nTHREEx.DomEvents.prototype._onEvent = function(eventName, mouseX, mouseY, origDomEvent) {\n    //console.log('eventName', eventName, 'boundObjs', this._boundObjs[eventName])\n    // get objects bound to this event\n    var boundObjs = this._boundObjs[eventName];\n    if (boundObjs === undefined || boundObjs.length === 0) return;\n    // compute the intersection\n    var vector = new THREE.Vector2();\n    // update the picking ray with the camera and mouse position\n    vector.set(mouseX, mouseY);\n    this._raycaster.setFromCamera(vector, this._camera);\n    var intersects = this._raycaster.intersectObjects(boundObjs, true);\n    // if there are no intersections, return now\n    if (intersects.length === 0) return;\n    // init some variables\n    var intersect = intersects[0];\n    var object3d = intersect.object;\n    var objectCtx = this._objectCtxGet(object3d);\n    var objectParent = object3d.parent;\n    while(typeof objectCtx == 'undefined' && objectParent){\n        objectCtx = this._objectCtxGet(objectParent);\n        objectParent = objectParent.parent;\n    }\n    if (!objectCtx) return;\n    // notify handlers\n    this._notify(eventName, object3d, origDomEvent, intersect);\n};\nTHREEx.DomEvents.prototype._notify = function(eventName, object3d, origDomEvent, intersect) {\n    var objectCtx = this._objectCtxGet(object3d);\n    var handlers = objectCtx ? objectCtx[eventName + 'Handlers'] : null;\n    // parameter check\n    console.assert(arguments.length === 4);\n    // do bubbling\n    if (!objectCtx || !handlers || handlers.length === 0) {\n        object3d.parent && this._notify(eventName, object3d.parent, origDomEvent, intersect);\n        return;\n    }\n    // notify all handlers\n    var handlers = objectCtx[eventName + 'Handlers'];\n    for(var i = 0; i < handlers.length; i++){\n        var handler = handlers[i];\n        var toPropagate = true;\n        handler.callback({\n            type: eventName,\n            target: object3d,\n            origDomEvent: origDomEvent,\n            intersect: intersect,\n            stopPropagation: function() {\n                toPropagate = false;\n            }\n        });\n        if (!toPropagate) continue;\n        // do bubbling\n        if (handler.useCapture === false) object3d.parent && this._notify(eventName, object3d.parent, origDomEvent, intersect);\n    }\n};\n/********************************************************************************/ /*\t\thandle mouse events\t\t\t\t\t\t*/ /********************************************************************************/ // # handle mouse events\nTHREEx.DomEvents.prototype._onMouseDown = function(event) {\n    return this._onMouseEvent('mousedown', event);\n};\nTHREEx.DomEvents.prototype._onMouseUp = function(event) {\n    return this._onMouseEvent('mouseup', event);\n};\nTHREEx.DomEvents.prototype._onMouseEvent = function(eventName, domEvent) {\n    var mouseCoords = this._getRelativeMouseXY(domEvent);\n    this._onEvent(eventName, mouseCoords.x, mouseCoords.y, domEvent);\n};\nTHREEx.DomEvents.prototype._onMouseMove = function(domEvent) {\n    var mouseCoords = this._getRelativeMouseXY(domEvent);\n    this._onMove('mousemove', mouseCoords.x, mouseCoords.y, domEvent);\n    this._onMove('mouseover', mouseCoords.x, mouseCoords.y, domEvent);\n    this._onMove('mouseout', mouseCoords.x, mouseCoords.y, domEvent);\n};\nTHREEx.DomEvents.prototype._onClick = function(event) {\n    // TODO handle touch ?\n    this._onMouseEvent('click', event);\n};\nTHREEx.DomEvents.prototype._onDblClick = function(event) {\n    // TODO handle touch ?\n    this._onMouseEvent('dblclick', event);\n};\nTHREEx.DomEvents.prototype._onContextmenu = function(event) {\n    //TODO don't have a clue about how this should work with touch..\n    this._onMouseEvent('contextmenu', event);\n};\n/********************************************************************************/ /*\t\thandle touch events\t\t\t\t\t\t*/ /********************************************************************************/ // # handle touch events\nTHREEx.DomEvents.prototype._onTouchStart = function(event) {\n    return this._onTouchEvent('touchstart', event);\n};\nTHREEx.DomEvents.prototype._onTouchEnd = function(event) {\n    return this._onTouchEvent('touchend', event);\n};\nTHREEx.DomEvents.prototype._onTouchMove = function(domEvent) {\n    if (domEvent.touches.length != 1) return undefined;\n    domEvent.preventDefault();\n    var mouseX = +(domEvent.touches[0].pageX / window.innerWidth) * 2 - 1;\n    var mouseY = -(domEvent.touches[0].pageY / window.innerHeight) * 2 + 1;\n    this._onMove('mousemove', mouseX, mouseY, domEvent);\n    this._onMove('mouseover', mouseX, mouseY, domEvent);\n    this._onMove('mouseout', mouseX, mouseY, domEvent);\n};\nTHREEx.DomEvents.prototype._onTouchEvent = function(eventName, domEvent) {\n    if (domEvent.touches.length != 1) return undefined;\n    domEvent.preventDefault();\n    var mouseX = +(domEvent.touches[0].pageX / window.innerWidth) * 2 - 1;\n    var mouseY = -(domEvent.touches[0].pageY / window.innerHeight) * 2 + 1;\n    this._onEvent(eventName, mouseX, mouseY, domEvent);\n};\n\n//# sourceMappingURL=index.0e96d95e.js.map\n","// This THREEx helper makes it easy to handle the mouse events in your 3D scene\n//\n// * CHANGES NEEDED\n//   * handle drag/drop\n//   * notify events not object3D - like DOM\n//     * so single object with property\n//   * DONE bubling implement bubling/capturing\n//   * DONE implement event.stopPropagation()\n//   * DONE implement event.type = \"click\" and co\n//   * DONE implement event.target\n//\n// # Lets get started\n//\n// First you include it in your page\n//\n// ```<script src='threex.domevent.js'>< /script>```\n//\n// # use the object oriented api\n//\n// You bind an event like this\n// \n// ```mesh.on('click', function(object3d){ ... })```\n//\n// To unbind an event, just do\n//\n// ```mesh.off('click', function(object3d){ ... })```\n//\n// As an alternative, there is another naming closer DOM events.\n// Pick the one you like, they are doing the same thing\n//\n// ```mesh.addEventListener('click', function(object3d){ ... })```\n// ```mesh.removeEventListener('click', function(object3d){ ... })```\n//\n// # Supported Events\n//\n// Always in a effort to stay close to usual pratices, the events name are the same as in DOM.\n// The semantic is the same too.\n// Currently, the available events are\n// [click, dblclick, mouseup, mousedown](http://www.quirksmode.org/dom/events/click.html),\n// [mouseover and mouse out](http://www.quirksmode.org/dom/events/mouseover.html).\n//\n// # use the standalone api\n//\n// The object-oriented api modifies THREE.Object3D class.\n// It is a global class, so it may be legitimatly considered unclean by some people.\n// If this bother you, simply do ```THREEx.DomEvents.noConflict()``` and use the\n// standalone API. In fact, the object oriented API is just a thin wrapper\n// on top of the standalone API.\n//\n// First, you instanciate the object\n//\n// ```var domEvent = new THREEx.DomEvent();```\n// \n// Then you bind an event like this\n//\n// ```domEvent.bind(mesh, 'click', function(object3d){ object3d.scale.x *= 2; });```\n//\n// To unbind an event, just do\n//\n// ```domEvent.unbind(mesh, 'click', callback);```\n//\n// \n// # Code\n\n//\n\n/** @namespace */\nvar THREEx\t\t= THREEx \t\t|| {};\n\n// # Constructor\nTHREEx.DomEvents\t= function(camera, domElement)\n{\n\tthis._camera\t= camera || null;\n\tthis._domElement= domElement || document;\n\tthis._raycaster = new THREE.Raycaster();\n\tthis._selected\t= null;\n\tthis._boundObjs\t= {};\n\t// Bind dom event for mouse and touch\n\tvar _this\t= this;\n\n\tthis._$onClick\t\t= function(){ _this._onClick.apply(_this, arguments);\t\t};\n\tthis._$onDblClick\t= function(){ _this._onDblClick.apply(_this, arguments);\t};\n\tthis._$onMouseMove\t= function(){ _this._onMouseMove.apply(_this, arguments);\t};\n\tthis._$onMouseDown\t= function(){ _this._onMouseDown.apply(_this, arguments);\t};\n\tthis._$onMouseUp\t= function(){ _this._onMouseUp.apply(_this, arguments);\t\t};\n\tthis._$onTouchMove\t= function(){ _this._onTouchMove.apply(_this, arguments);\t};\n\tthis._$onTouchStart\t= function(){ _this._onTouchStart.apply(_this, arguments);\t};\n\tthis._$onTouchEnd\t= function(){ _this._onTouchEnd.apply(_this, arguments);\t};\n\tthis._$onContextmenu\t= function(){ _this._onContextmenu.apply(_this, arguments);\t};\n\tthis._domElement.addEventListener( 'click'\t, this._$onClick\t, false );\n\tthis._domElement.addEventListener( 'dblclick'\t, this._$onDblClick\t, false );\n\tthis._domElement.addEventListener( 'mousemove'\t, this._$onMouseMove\t, false );\n\tthis._domElement.addEventListener( 'mousedown'\t, this._$onMouseDown\t, false );\n\tthis._domElement.addEventListener( 'mouseup'\t, this._$onMouseUp\t, false );\n\tthis._domElement.addEventListener( 'touchmove'\t, this._$onTouchMove\t, false );\n\tthis._domElement.addEventListener( 'touchstart'\t, this._$onTouchStart\t, false );\n\tthis._domElement.addEventListener( 'touchend'\t, this._$onTouchEnd\t, false );\n\tthis._domElement.addEventListener( 'contextmenu', this._$onContextmenu\t, false );\n\t\n}\n\n// # Destructor\nTHREEx.DomEvents.prototype.destroy\t= function()\n{\n\t// unBind dom event for mouse and touch\n\tthis._domElement.removeEventListener( 'click'\t\t, this._$onClick\t, false );\n\tthis._domElement.removeEventListener( 'dblclick'\t, this._$onDblClick\t, false );\n\tthis._domElement.removeEventListener( 'mousemove'\t, this._$onMouseMove\t, false );\n\tthis._domElement.removeEventListener( 'mousedown'\t, this._$onMouseDown\t, false );\n\tthis._domElement.removeEventListener( 'mouseup'\t\t, this._$onMouseUp\t, false );\n\tthis._domElement.removeEventListener( 'touchmove'\t, this._$onTouchMove\t, false );\n\tthis._domElement.removeEventListener( 'touchstart'\t, this._$onTouchStart\t, false );\n\tthis._domElement.removeEventListener( 'touchend'\t, this._$onTouchEnd\t, false );\n\tthis._domElement.removeEventListener( 'contextmenu'\t, this._$onContextmenu\t, false );\n}\n\nTHREEx.DomEvents.eventNames\t= [\n\t\"click\",\n\t\"dblclick\",\n\t\"mouseover\",\n\t\"mouseout\",\n\t\"mousemove\",\n\t\"mousedown\",\n\t\"mouseup\",\n\t\"contextmenu\",\n\t\"touchstart\",\n\t\"touchend\"\n];\n\nTHREEx.DomEvents.prototype._getRelativeMouseXY\t= function(domEvent){\n\tvar element = domEvent.target || domEvent.srcElement;\n\tif (element.nodeType === 3) {\n\t\telement = element.parentNode; // Safari fix -- see http://www.quirksmode.org/js/events_properties.html\n\t}\n\t\n\t//get the real position of an element relative to the page starting point (0, 0)\n\t//credits go to brainjam on answering http://stackoverflow.com/questions/5755312/getting-mouse-position-relative-to-content-area-of-an-element\n\tvar elPosition\t= { x : 0 , y : 0};\n\tvar tmpElement\t= element;\n\t//store padding\n\tvar style\t= getComputedStyle(tmpElement, null);\n\telPosition.y += parseInt(style.getPropertyValue(\"padding-top\"), 10);\n\telPosition.x += parseInt(style.getPropertyValue(\"padding-left\"), 10);\n\t//add positions\n\tdo {\n\t\telPosition.x\t+= tmpElement.offsetLeft;\n\t\telPosition.y\t+= tmpElement.offsetTop;\n\t\tstyle\t\t= getComputedStyle(tmpElement, null);\n\n\t\telPosition.x\t+= parseInt(style.getPropertyValue(\"border-left-width\"), 10);\n\t\telPosition.y\t+= parseInt(style.getPropertyValue(\"border-top-width\"), 10);\n\t} while(tmpElement = tmpElement.offsetParent);\n\t\n\tvar elDimension\t= {\n\t\twidth\t: (element === window) ? window.innerWidth\t: element.offsetWidth,\n\t\theight\t: (element === window) ? window.innerHeight\t: element.offsetHeight\n\t};\n\t\n\treturn {\n\t\tx : +((domEvent.pageX - elPosition.x) / elDimension.width ) * 2 - 1,\n\t\ty : -((domEvent.pageY - elPosition.y) / elDimension.height) * 2 + 1\n\t};\n};\n\n\n/********************************************************************************/\n/*\t\tdomevent context\t\t\t\t\t\t*/\n/********************************************************************************/\n\n// handle domevent context in object3d instance\n\nTHREEx.DomEvents.prototype._objectCtxInit\t= function(object3d){\n\tobject3d._3xDomEvent = {};\n}\nTHREEx.DomEvents.prototype._objectCtxDeinit\t= function(object3d){\n\tdelete object3d._3xDomEvent;\n}\nTHREEx.DomEvents.prototype._objectCtxIsInit\t= function(object3d){\n\treturn object3d._3xDomEvent ? true : false;\n}\nTHREEx.DomEvents.prototype._objectCtxGet\t\t= function(object3d){\n\treturn object3d._3xDomEvent;\n}\n\n/********************************************************************************/\n/*\t\t\t\t\t\t\t\t\t\t*/\n/********************************************************************************/\n\n/**\n * Getter/Setter for camera\n*/\nTHREEx.DomEvents.prototype.camera\t= function(value)\n{\n\tif( value )\tthis._camera\t= value;\n\treturn this._camera;\n}\n\nTHREEx.DomEvents.prototype.bind\t= function(object3d, eventName, callback, useCapture)\n{\n\tconsole.assert( THREEx.DomEvents.eventNames.indexOf(eventName) !== -1, \"not available events:\"+eventName );\n\n\tif( !this._objectCtxIsInit(object3d) )\tthis._objectCtxInit(object3d);\n\tvar objectCtx\t= this._objectCtxGet(object3d);\t\n\tif( !objectCtx[eventName+'Handlers'] )\tobjectCtx[eventName+'Handlers']\t= [];\n\n\tobjectCtx[eventName+'Handlers'].push({\n\t\tcallback\t: callback,\n\t\tuseCapture\t: useCapture\n\t});\n\t\n\t// add this object in this._boundObjs\n\tif( this._boundObjs[eventName] === undefined ){\n\t\tthis._boundObjs[eventName]\t= [];\t\n\t}\n\tthis._boundObjs[eventName].push(object3d);\n}\nTHREEx.DomEvents.prototype.addEventListener\t= THREEx.DomEvents.prototype.bind\n\nTHREEx.DomEvents.prototype.unbind\t= function(object3d, eventName, callback, useCapture)\n{\n\tconsole.assert( THREEx.DomEvents.eventNames.indexOf(eventName) !== -1, \"not available events:\"+eventName );\n\n\tif( !this._objectCtxIsInit(object3d) )\tthis._objectCtxInit(object3d);\n\n\tvar objectCtx\t= this._objectCtxGet(object3d);\n\tif( !objectCtx[eventName+'Handlers'] )\tobjectCtx[eventName+'Handlers']\t= [];\n\n\tvar handlers\t= objectCtx[eventName+'Handlers'];\n\tfor(var i = 0; i < handlers.length; i++){\n\t\tvar handler\t= handlers[i];\n\t\tif( callback != handler.callback )\tcontinue;\n\t\tif( useCapture != handler.useCapture )\tcontinue;\n\t\thandlers.splice(i, 1)\n\t\tbreak;\n\t}\n\t// from this object from this._boundObjs\n\tvar index\t= this._boundObjs[eventName].indexOf(object3d);\n\tconsole.assert( index !== -1 );\n\tthis._boundObjs[eventName].splice(index, 1);\n}\nTHREEx.DomEvents.prototype.removeEventListener\t= THREEx.DomEvents.prototype.unbind\n\nTHREEx.DomEvents.prototype._bound\t= function(eventName, object3d)\n{\n\tvar objectCtx\t= this._objectCtxGet(object3d);\n\tif( !objectCtx )\treturn false;\n\treturn objectCtx[eventName+'Handlers'] ? true : false;\n}\n\n/********************************************************************************/\n/*\t\tonMove\t\t\t\t\t\t\t\t*/\n/********************************************************************************/\n\n// # handle mousemove kind of events\n\nTHREEx.DomEvents.prototype._onMove\t= function(eventName, mouseX, mouseY, origDomEvent)\n{\n//console.log('eventName', eventName, 'boundObjs', this._boundObjs[eventName])\n\t// get objects bound to this event\n\tvar boundObjs\t= this._boundObjs[eventName];\n\tif( boundObjs === undefined || boundObjs.length === 0 )\treturn;\n\t// compute the intersection\n\tvar vector = new THREE.Vector2();\n\n\t// update the picking ray with the camera and mouse position\n\tvector.set( mouseX, mouseY );\n\tthis._raycaster.setFromCamera( vector, this._camera );\t\n\n\tvar intersects = this._raycaster.intersectObjects( boundObjs );\n\n\tvar oldSelected\t= this._selected;\n\t\n\tif( intersects.length > 0 ){\n\t\tvar notifyOver, notifyOut, notifyMove;\n\t\tvar intersect\t= intersects[ 0 ];\n\t\tvar newSelected\t= intersect.object;\n\t\tthis._selected\t= newSelected;\n\t\t// if newSelected bound mousemove, notify it\n\t\tnotifyMove\t= this._bound('mousemove', newSelected);\n\n\t\tif( oldSelected != newSelected ){\n\t\t\t// if newSelected bound mouseenter, notify it\n\t\t\tnotifyOver\t= this._bound('mouseover', newSelected);\n\t\t\t// if there is a oldSelect and oldSelected bound mouseleave, notify it\n\t\t\tnotifyOut\t= oldSelected && this._bound('mouseout', oldSelected);\n\t\t}\n\t}else{\n\t\t// if there is a oldSelect and oldSelected bound mouseleave, notify it\n\t\tnotifyOut\t= oldSelected && this._bound('mouseout', oldSelected);\n\t\tthis._selected\t= null;\n\t}\n\n\n\t// notify mouseMove - done at the end with a copy of the list to allow callback to remove handlers\n\tnotifyMove && this._notify('mousemove', newSelected, origDomEvent, intersect);\n\t// notify mouseEnter - done at the end with a copy of the list to allow callback to remove handlers\n\tnotifyOver && this._notify('mouseover', newSelected, origDomEvent, intersect);\n\t// notify mouseLeave - done at the end with a copy of the list to allow callback to remove handlers\n\tnotifyOut  && this._notify('mouseout' , oldSelected, origDomEvent, intersect);\n}\n\n\n/********************************************************************************/\n/*\t\tonEvent\t\t\t\t\t\t\t\t*/\n/********************************************************************************/\n\n// # handle click kind of events\n\nTHREEx.DomEvents.prototype._onEvent\t= function(eventName, mouseX, mouseY, origDomEvent)\n{\n\t//console.log('eventName', eventName, 'boundObjs', this._boundObjs[eventName])\n\t// get objects bound to this event\n\tvar boundObjs\t= this._boundObjs[eventName];\n\tif( boundObjs === undefined || boundObjs.length === 0 )\treturn;\n\t// compute the intersection\n\tvar vector = new THREE.Vector2();\n\n\t// update the picking ray with the camera and mouse position\n\tvector.set( mouseX, mouseY );\n\tthis._raycaster.setFromCamera( vector, this._camera );\t\n\n\tvar intersects = this._raycaster.intersectObjects( boundObjs, true);\n\t// if there are no intersections, return now\n\tif( intersects.length === 0 )\treturn;\n\n\t// init some variables\n\tvar intersect\t= intersects[0];\n\tvar object3d\t= intersect.object;\n\tvar objectCtx\t= this._objectCtxGet(object3d);\n\tvar objectParent = object3d.parent;\n\n\twhile ( typeof(objectCtx) == 'undefined' && objectParent )\n\t{\n\t    objectCtx = this._objectCtxGet(objectParent);\n\t    objectParent = objectParent.parent;\n\t}\n\tif( !objectCtx )\treturn;\n\n\t// notify handlers\n\tthis._notify(eventName, object3d, origDomEvent, intersect);\n}\n\nTHREEx.DomEvents.prototype._notify\t= function(eventName, object3d, origDomEvent, intersect)\n{\n\tvar objectCtx\t= this._objectCtxGet(object3d);\n\tvar handlers\t= objectCtx ? objectCtx[eventName+'Handlers'] : null;\n\t\n\t// parameter check\n\tconsole.assert(arguments.length === 4)\n\n\t// do bubbling\n\tif( !objectCtx || !handlers || handlers.length === 0 ){\n\t\tobject3d.parent && this._notify(eventName, object3d.parent, origDomEvent, intersect);\n\t\treturn;\n\t}\n\t\n\t// notify all handlers\n\tvar handlers\t= objectCtx[eventName+'Handlers'];\n\tfor(var i = 0; i < handlers.length; i++){\n\t\tvar handler\t= handlers[i];\n\t\tvar toPropagate\t= true;\n\t\thandler.callback({\n\t\t\ttype\t\t: eventName,\n\t\t\ttarget\t\t: object3d,\n\t\t\torigDomEvent\t: origDomEvent,\n\t\t\tintersect\t: intersect,\n\t\t\tstopPropagation\t: function(){\n\t\t\t\ttoPropagate\t= false;\n\t\t\t}\n\t\t});\n\t\tif( !toPropagate )\tcontinue;\n\t\t// do bubbling\n\t\tif( handler.useCapture === false ){\n\t\t\tobject3d.parent && this._notify(eventName, object3d.parent, origDomEvent, intersect);\n\t\t}\n\t}\n}\n\n/********************************************************************************/\n/*\t\thandle mouse events\t\t\t\t\t\t*/\n/********************************************************************************/\n// # handle mouse events\n\nTHREEx.DomEvents.prototype._onMouseDown\t= function(event){ return this._onMouseEvent('mousedown', event);\t}\nTHREEx.DomEvents.prototype._onMouseUp\t= function(event){ return this._onMouseEvent('mouseup'\t, event);\t}\n\n\nTHREEx.DomEvents.prototype._onMouseEvent\t= function(eventName, domEvent)\n{\n\tvar mouseCoords = this._getRelativeMouseXY(domEvent);\n\tthis._onEvent(eventName, mouseCoords.x, mouseCoords.y, domEvent);\n}\n\nTHREEx.DomEvents.prototype._onMouseMove\t= function(domEvent)\n{\n\tvar mouseCoords = this._getRelativeMouseXY(domEvent);\n\tthis._onMove('mousemove', mouseCoords.x, mouseCoords.y, domEvent);\n\tthis._onMove('mouseover', mouseCoords.x, mouseCoords.y, domEvent);\n\tthis._onMove('mouseout' , mouseCoords.x, mouseCoords.y, domEvent);\n}\n\nTHREEx.DomEvents.prototype._onClick\t\t= function(event)\n{\n\t// TODO handle touch ?\n\tthis._onMouseEvent('click'\t, event);\n}\nTHREEx.DomEvents.prototype._onDblClick\t\t= function(event)\n{\n\t// TODO handle touch ?\n\tthis._onMouseEvent('dblclick'\t, event);\n}\n\nTHREEx.DomEvents.prototype._onContextmenu\t= function(event)\n{\n\t//TODO don't have a clue about how this should work with touch..\n\tthis._onMouseEvent('contextmenu'\t, event);\n}\n\n/********************************************************************************/\n/*\t\thandle touch events\t\t\t\t\t\t*/\n/********************************************************************************/\n// # handle touch events\n\n\nTHREEx.DomEvents.prototype._onTouchStart\t= function(event){ return this._onTouchEvent('touchstart', event);\t}\nTHREEx.DomEvents.prototype._onTouchEnd\t= function(event){ return this._onTouchEvent('touchend'\t, event);\t}\n\nTHREEx.DomEvents.prototype._onTouchMove\t= function(domEvent)\n{\n\tif( domEvent.touches.length != 1 )\treturn undefined;\n\n\tdomEvent.preventDefault();\n\n\tvar mouseX\t= +(domEvent.touches[ 0 ].pageX / window.innerWidth ) * 2 - 1;\n\tvar mouseY\t= -(domEvent.touches[ 0 ].pageY / window.innerHeight) * 2 + 1;\n\tthis._onMove('mousemove', mouseX, mouseY, domEvent);\n\tthis._onMove('mouseover', mouseX, mouseY, domEvent);\n\tthis._onMove('mouseout' , mouseX, mouseY, domEvent);\n}\n\nTHREEx.DomEvents.prototype._onTouchEvent\t= function(eventName, domEvent)\n{\n\tif( domEvent.touches.length != 1 )\treturn undefined;\n\n\tdomEvent.preventDefault();\n\n\tvar mouseX\t= +(domEvent.touches[ 0 ].pageX / window.innerWidth ) * 2 - 1;\n\tvar mouseY\t= -(domEvent.touches[ 0 ].pageY / window.innerHeight) * 2 + 1;\n\tthis._onEvent(eventName, mouseX, mouseY, domEvent);\t\n}\n"],"names":["THREEx","DomEvents","camera","domElement","_camera","_domElement","document","_raycaster","THREE","Raycaster","_selected","_boundObjs","_this","_$onClick","_onClick","apply","arguments","_$onDblClick","_onDblClick","_$onMouseMove","_onMouseMove","_$onMouseDown","_onMouseDown","_$onMouseUp","_onMouseUp","_$onTouchMove","_onTouchMove","_$onTouchStart","_onTouchStart","_$onTouchEnd","_onTouchEnd","_$onContextmenu","_onContextmenu","addEventListener","prototype","destroy","removeEventListener","eventNames","_getRelativeMouseXY","domEvent","element","target","srcElement","nodeType","parentNode","elPosition","x","y","tmpElement","style","getComputedStyle","parseInt","getPropertyValue","offsetLeft","offsetTop","offsetParent","elDimension","width","window","innerWidth","offsetWidth","height","innerHeight","offsetHeight","pageX","pageY","_objectCtxInit","object3d","_3xDomEvent","_objectCtxDeinit","_objectCtxIsInit","_objectCtxGet","value","bind","eventName","callback","useCapture","console","assert","indexOf","objectCtx","push","undefined","unbind","handlers","i","length","handler","splice","index","_bound","_onMove","mouseX","mouseY","origDomEvent","boundObjs","vector","Vector2","set","setFromCamera","intersects","intersectObjects","oldSelected","notifyOver","notifyOut","notifyMove","intersect","newSelected","object","_notify","_onEvent","objectParent","parent","toPropagate","type","stopPropagation","event","_onMouseEvent","mouseCoords","_onTouchEvent","touches","preventDefault"],"version":3,"file":"index.0e96d95e.js.map"}